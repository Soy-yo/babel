
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sat Apr 11 18:22:13 CEST 2020
//----------------------------------------------------

package syntactical;

import syntactical.ast.*;

import java.util.ArrayList;
import java.util.List;

/**
 * CUP v0.11b beta 20140220 generated parser.
 *
 * @version Sat Apr 11 18:22:13 CEST 2020
 */
public class SyntacticalAnalyser extends java_cup.runtime.lr_parser {

    /** Default constructor. */
    public SyntacticalAnalyser() {
        super();
    }

    /** Constructor which sets the default scanner. */
    public SyntacticalAnalyser(java_cup.runtime.Scanner s) {
        super(s);
    }

    /** Constructor which sets the default scanner. */
    public SyntacticalAnalyser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /** Production table. */
    protected static final short _production_table[][] =
            unpackFromStrings(new String[]{
                    "\000\055\000\002\002\004\000\002\002\004\000\002\003" +
                            "\005\000\002\003\002\000\002\004\004\000\002\004\002" +
                            "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
                            "\002\007\003\000\002\007\004\000\002\010\003\000\002" +
                            "\010\004\000\002\006\004\000\002\006\004\000\002\014" +
                            "\004\000\002\011\005\000\002\012\007\000\002\013\004" +
                            "\000\002\015\005\000\002\016\004\000\002\016\005\000" +
                            "\002\017\003\000\002\017\005\000\002\020\005\000\002" +
                            "\021\005\000\002\022\004\000\002\022\002\000\002\023" +
                            "\003\000\002\023\003\000\002\023\003\000\002\024\005" +
                            "\000\002\025\004\000\002\025\002\000\002\026\003\000" +
                            "\002\026\003\000\002\027\005\000\002\030\003\000\002" +
                            "\031\004\000\002\032\005\000\002\033\004\000\002\033" +
                            "\004\000\002\035\003\000\002\036\003\000\002\037\003" +
                            ""});

    /** Access to production table. */
    public short[][] production_table() {
        return _production_table;
    }

    /** Parse-action table. */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[]{
                    "\000\115\000\014\002\ufffe\023\ufffe\024\ufffe\070\ufffe\071" +
                            "\ufffe\001\002\000\004\002\117\001\002\000\014\002\ufffc" +
                            "\023\023\024\022\070\017\071\021\001\002\000\004\070" +
                            "\116\001\002\000\004\067\114\001\002\000\012\002\ufffc" +
                            "\023\023\024\022\070\017\001\002\000\012\002\ufff9\023" +
                            "\ufff9\024\ufff9\070\ufff9\001\002\000\012\002\ufff8\023\ufff8" +
                            "\024\ufff8\070\ufff8\001\002\000\004\002\001\001\002\000" +
                            "\010\030\052\063\047\067\102\001\002\000\012\002\ufffb" +
                            "\023\ufffb\024\ufffb\070\ufffb\001\002\000\012\002\ufffa\023" +
                            "\ufffa\024\ufffa\070\ufffa\001\002\000\006\034\uffd7\070\uffd7" +
                            "\001\002\000\004\067\110\001\002\000\004\067\107\001" +
                            "\002\000\004\070\017\001\002\000\004\070\017\001\002" +
                            "\000\004\070\025\001\002\000\004\063\uffd5\001\002\000" +
                            "\004\063\027\001\002\000\002\001\002\000\004\067\ufff0" +
                            "\001\002\000\004\034\032\001\002\000\012\023\044\025" +
                            "\043\035\uffe6\070\017\001\002\000\012\002\uffe9\023\uffe9" +
                            "\024\uffe9\070\uffe9\001\002\000\012\023\044\025\043\035" +
                            "\uffe6\070\017\001\002\000\012\023\uffe4\025\uffe4\035\uffe4" +
                            "\070\uffe4\001\002\000\014\010\ufff6\023\ufff6\025\ufff6\035" +
                            "\ufff6\070\ufff6\001\002\000\012\023\uffe5\025\uffe5\035\uffe5" +
                            "\070\uffe5\001\002\000\004\067\105\001\002\000\004\035" +
                            "\104\001\002\000\012\023\uffe3\025\uffe3\035\uffe3\070\uffe3" +
                            "\001\002\000\004\030\052\001\002\000\004\070\017\001" +
                            "\002\000\004\063\047\001\002\000\004\067\uffef\001\002" +
                            "\000\002\001\002\000\004\067\ufff1\001\002\000\004\034" +
                            "\062\001\002\000\006\031\055\070\017\001\002\000\006" +
                            "\031\057\041\056\001\002\000\006\031\uffeb\041\uffeb\001" +
                            "\002\000\004\034\uffed\001\002\000\004\070\017\001\002" +
                            "\000\004\034\uffec\001\002\000\006\031\uffea\041\uffea\001" +
                            "\002\000\012\023\uffe2\025\uffe2\035\uffe2\070\uffe2\001\002" +
                            "\000\012\010\070\023\044\035\uffe0\070\017\001\002\000" +
                            "\004\035\103\001\002\000\012\010\uffdf\023\uffdf\035\uffdf" +
                            "\070\uffdf\001\002\000\012\010\uffdc\023\uffdc\035\uffdc\070" +
                            "\uffdc\001\002\000\006\063\047\067\102\001\002\000\004" +
                            "\011\076\001\002\000\002\001\002\000\012\010\070\023" +
                            "\044\035\uffe0\070\017\001\002\000\012\010\uffde\023\uffde" +
                            "\035\uffde\070\uffde\001\002\000\004\035\uffe1\001\002\000" +
                            "\004\034\062\001\002\000\004\011\uffda\001\002\000\006" +
                            "\010\070\034\062\001\002\000\012\010\uffdb\023\uffdb\035" +
                            "\uffdb\070\uffdb\001\002\000\012\010\uffd8\023\uffd8\035\uffd8" +
                            "\070\uffd8\001\002\000\012\010\uffd9\023\uffd9\035\uffd9\070" +
                            "\uffd9\001\002\000\020\002\ufff4\010\ufff4\023\ufff4\024\ufff4" +
                            "\025\ufff4\035\ufff4\070\ufff4\001\002\000\022\002\uffdd\010" +
                            "\uffdd\011\uffdd\023\uffdd\024\uffdd\025\uffdd\035\uffdd\070\uffdd" +
                            "\001\002\000\012\002\uffe8\023\uffe8\024\uffe8\070\uffe8\001" +
                            "\002\000\014\010\ufff5\023\ufff5\025\ufff5\035\ufff5\070\ufff5" +
                            "\001\002\000\004\035\uffe7\001\002\000\014\002\uffff\023" +
                            "\uffff\024\uffff\070\uffff\071\uffff\001\002\000\020\002\ufff3" +
                            "\010\ufff3\023\ufff3\024\ufff3\025\ufff3\035\ufff3\070\ufff3\001" +
                            "\002\000\004\034\062\001\002\000\016\002\uffee\023\uffee" +
                            "\024\uffee\025\uffee\035\uffee\070\uffee\001\002\000\004\002" +
                            "\ufffd\001\002\000\012\002\ufff7\023\ufff7\024\ufff7\070\ufff7" +
                            "\001\002\000\014\030\ufff2\031\ufff2\041\ufff2\063\ufff2\067" +
                            "\ufff2\001\002\000\014\030\uffd6\031\uffd6\041\uffd6\063\uffd6" +
                            "\067\uffd6\001\002\000\004\002\000\001\002"});

    /** Access to parse-action table. */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table. */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[]{
                    "\000\115\000\006\002\003\003\004\001\001\000\002\001" +
                            "\001\000\026\004\012\005\007\006\011\007\014\011\017" +
                            "\012\006\014\013\015\015\020\010\035\005\001\001\000" +
                            "\004\036\114\001\001\000\002\001\001\000\026\004\112" +
                            "\005\007\006\011\007\014\011\017\012\006\014\013\015" +
                            "\015\020\010\035\005\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\004\016\110\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\004\035\030\001\001\000" +
                            "\004\035\023\001\001\000\004\037\025\001\001\000\002" +
                            "\001\001\000\002\001\001\000\004\034\027\001\001\000" +
                            "\002\001\001\000\004\021\032\001\001\000\026\006\035" +
                            "\010\036\011\017\013\037\014\013\015\041\022\040\023" +
                            "\033\024\034\035\005\001\001\000\002\001\001\000\026" +
                            "\006\035\010\036\011\017\013\037\014\013\015\041\022" +
                            "\105\023\033\024\034\035\005\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\004\016\050\001\001" +
                            "\000\010\011\045\014\044\035\005\001\001\000\002\001" +
                            "\001\000\002\001\001\000\004\034\047\001\001\000\002" +
                            "\001\001\000\004\027\060\001\001\000\010\014\053\017" +
                            "\052\035\005\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\006\014\057\035\005\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
                            "\006\035\010\064\011\017\013\037\014\065\025\062\026" +
                            "\070\030\063\031\071\032\066\035\005\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\004\033\076\001\001\000\004\034\073\001\001" +
                            "\000\030\006\035\010\064\011\017\013\037\014\065\025" +
                            "\072\026\070\030\063\031\071\032\066\035\005\001\001" +
                            "\000\002\001\001\000\002\001\001\000\004\027\074\001" +
                            "\001\000\002\001\001\000\010\027\100\031\077\032\066" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\004\027\111\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001"});

    /** Access to <code>reduce_goto</code> table. */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /** Instance of action encapsulation class. */
    protected CUP$SyntacticalAnalyser$actions action_obj;

    /** Action encapsulation object initializer. */
    protected void init_actions() {
        action_obj = new CUP$SyntacticalAnalyser$actions(this);
    }

    /** Invoke a user supplied parse action. */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SyntacticalAnalyser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

        //LexicalAnalyser analyser = (LexicalAnalyser) getScanner(); ???

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
  return getScanner().next_token(); 
    }

 /* TODO ?? */
}

/**
 * Cup generated class to encapsulate user supplied action code.
 */
class CUP$SyntacticalAnalyser$actions {

    private ProgramNode program;
    private final SyntacticalAnalyser parser;

    /** Constructor */
    CUP$SyntacticalAnalyser$actions(SyntacticalAnalyser parser) {
        this.parser = parser;
    }

    /** Method 0 with the actual generated action code for actions 0 to 300. */
    public final java_cup.runtime.Symbol CUP$SyntacticalAnalyser$do_action_part00000000(
            int CUP$SyntacticalAnalyser$act_num,
            java_cup.runtime.lr_parser CUP$SyntacticalAnalyser$parser,
            java.util.Stack CUP$SyntacticalAnalyser$stack,
            int CUP$SyntacticalAnalyser$top)
            throws java.lang.Exception {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$SyntacticalAnalyser$result;

        /* select the action based on the action number */
        switch (CUP$SyntacticalAnalyser$act_num) {
            /*. . . . . . . . . . . . . . . . . . . .*/
            case 0: // Program ::= ImportList DeclarationList
            {
                ProgramNode RESULT = null;
                List<String> imports = (List<String>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                DeclarationNode declarations = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ProgramNode(declarations, imports);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Program", 0, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 1: // $START ::= Program EOF
            {
                Object RESULT = null;
                ProgramNode start_val = (ProgramNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = start_val;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("$START", 0, RESULT);
            }
            /* ACCEPT */
            CUP$SyntacticalAnalyser$parser.done_parsing();
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 2: // ImportList ::= ImportList IMPORT END
            {
                List<String> RESULT = null;
                List<String> imports = (List<String>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                String file = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                imports.add(file);
                RESULT = imports;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ImportList", 1, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 3: // ImportList ::=
            {
                List<String> RESULT = null;
                RESULT = new ArrayList<>();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ImportList", 1, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 4: // DeclarationList ::= Declaration DeclarationList
            {
                DeclarationNode RESULT = null;
                DeclarationNode declaration = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                DeclarationNode declarations = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration.linkedTo(declarations);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("DeclarationList", 2, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 5: // DeclarationList ::=
            {
                DeclarationNode RESULT = null;
                RESULT = null;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("DeclarationList", 2, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 6: // Declaration ::= GlobalVarConstDeclaration
            {
                DeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration", 3, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 7: // Declaration ::= FunctionDeclaration
            {
                DeclarationNode RESULT = null;
                FunctionDeclarationNode declaration = (FunctionDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration", 3, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 8: // Declaration ::= ClassDeclaration
            {
                DeclarationNode RESULT = null;
                ClassDeclarationNode declaration = (ClassDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration", 3, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 9: // GlobalVarConstDeclaration ::= VarDeclaration
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalVarConstDeclaration", 5, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 10: // GlobalVarConstDeclaration ::= GlobalConstDeclaration END
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalVarConstDeclaration", 5, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 11: // VarConstDeclaration ::= VarDeclaration
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarConstDeclaration", 6, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 12: // VarConstDeclaration ::= LocalConstDeclaration END
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarConstDeclaration", 6, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 13: // VarDeclaration ::= BaseVarDeclaration END
            {
                VarDeclarationNode RESULT = null;
                Name declaration = (Name) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new VarDeclarationNode(declaration);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclaration", 4, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 14: // VarDeclaration ::= VarInitDeclaration END
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclaration", 4, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 15: // BaseVarDeclaration ::= Type VarId
            {
                Name RESULT = null;
                String type = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new Name(id, type);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("BaseVarDeclaration", 10, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 16: // VarInitDeclaration ::= BaseVarDeclaration ASSIGNMENT Expression
            {
                VarDeclarationNode RESULT = null;
                Name name = (Name) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode initialValue = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new VarDeclarationNode(name, initialValue);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarInitDeclaration", 7, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 17: // GlobalConstDeclaration ::= CONST Type GlobalConstId ASSIGNMENT Expression
            {
                VarDeclarationNode RESULT = null;
                String type = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode initialValue = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new VarDeclarationNode(new Name(id, type), initialValue, true, true);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalConstDeclaration", 8, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 18: // LocalConstDeclaration ::= CONST VarInitDeclaration
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration.constant();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("LocalConstDeclaration", 9, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 19: // FunctionDeclaration ::= BaseVarDeclaration FunctionParameters BlockStatement
            {
                FunctionDeclarationNode RESULT = null;
                Name name = (Name) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                List<Name> parameters = (List<Name>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                BlockStatementNode block = (BlockStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new FunctionDeclarationNode(name, parameters, block);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionDeclaration", 11, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 20: // FunctionParameters ::= PARENTH_L PARENTH_R
            {
                List<Name> RESULT = null;
                RESULT = new ArrayList<>();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionParameters", 12, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 21: // FunctionParameters ::= PARENTH_L ParameterList PARENTH_R
            {
                List<Name> RESULT = null;
                List<Name> parameters = (List<Name>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = parameters;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionParameters", 12, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 22: // ParameterList ::= BaseVarDeclaration
            {
                List<Name> RESULT = null;
                Name parameter = (Name) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ArrayList<Name>() {{
                    add(parameter);
                }};
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ParameterList", 13, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 23: // ParameterList ::= ParameterList COMMA BaseVarDeclaration
            {
                List<Name> RESULT = null;
                List<Name> parameters = (List<Name>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                Name parameter = (Name) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                parameters.add(parameter);
                RESULT = parameters;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ParameterList", 13, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 24: // ClassDeclaration ::= CLASS Type ClassBlock
            {
                ClassDeclarationNode RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                DeclarationNode block = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ClassDeclarationNode(name, block);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration", 14, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 25: // ClassBlock ::= CURLY_L ClassElementList CURLY_R
            {
                DeclarationNode RESULT = null;
                DeclarationNode contents = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = contents;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassBlock", 15, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 26: // ClassElementList ::= ClassElement ClassElementList
            {
                DeclarationNode RESULT = null;
                DeclarationNode element = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                DeclarationNode elements = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = element.linkedTo(elements);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElementList", 16, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 27: // ClassElementList ::=
            {
                DeclarationNode RESULT = null;
                RESULT = null;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElementList", 16, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 28: // ClassElement ::= VarConstDeclaration
            {
                DeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement", 17, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 29: // ClassElement ::= ConstructorDeclaration
            {
                DeclarationNode RESULT = null;
                ConstructorDeclarationNode declaration = (ConstructorDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement", 17, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 30: // ClassElement ::= FunctionDeclaration
            {
                DeclarationNode RESULT = null;
                FunctionDeclarationNode declaration = (FunctionDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement", 17, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 31: // ConstructorDeclaration ::= CONSTRUCTOR FunctionParameters BlockStatement
            {
                ConstructorDeclarationNode RESULT = null;
                List<Name> parameters = (List<Name>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                BlockStatementNode block = (BlockStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ConstructorDeclarationNode(parameters, block);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstructorDeclaration", 18, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 32: // StatementList ::= Statement StatementList
            {
                StatementNode RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("StatementList", 19, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 33: // StatementList ::=
            {
                StatementNode RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("StatementList", 19, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 34: // Statement ::= VarDeclarationStatement
            {
                StatementNode RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement", 20, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 35: // Statement ::= IfElseStatement
            {
                StatementNode RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement", 20, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 36: // BlockStatement ::= CURLY_L StatementList CURLY_R
            {
                BlockStatementNode RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("BlockStatement", 21, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 37: // VarDeclarationStatement ::= VarConstDeclaration
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclarationStatement", 22, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 38: // IfElseStatement ::= IfStatement ElseStatement
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("IfElseStatement", 23, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 39: // IfStatement ::= IF Expression BlockStatement
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("IfStatement", 24, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 40: // ElseStatement ::= ELSE BlockStatement
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ElseStatement", 25, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 41: // ElseStatement ::= ELSE IfElseStatement
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ElseStatement", 25, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 42: // Type ::= IDENTIFIER
            {
                String RESULT = null;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = id;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Type", 27, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 43: // VarId ::= IDENTIFIER
            {
                String RESULT = null;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = id;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarId", 28, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 44: // GlobalConstId ::= IDENTIFIER
            {
                String RESULT = null;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = id;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalConstId", 29, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /* . . . . . .*/
            default:
                throw new Exception(
                        "Invalid action number " + CUP$SyntacticalAnalyser$act_num + "found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SyntacticalAnalyser$do_action(
    int                        CUP$SyntacticalAnalyser$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticalAnalyser$parser,
    java.util.Stack            CUP$SyntacticalAnalyser$stack,
    int                        CUP$SyntacticalAnalyser$top)
    throws java.lang.Exception
    {
              return CUP$SyntacticalAnalyser$do_action_part00000000(
                               CUP$SyntacticalAnalyser$act_num,
                               CUP$SyntacticalAnalyser$parser,
                               CUP$SyntacticalAnalyser$stack,
                               CUP$SyntacticalAnalyser$top);
    }
}

