// This file needs a bigger memory !!

Array<Int> stdout = [0];
Int index = 0;
BinaryTree([1,2,3,4,5]) bt;
BinaryTree bt2 = BinaryTree([3,1,4,69,62,7]);
BinaryTree bt3;

class Node {
    Int value;
    Node left;
    Node right;

    constructor(Int value) {
        this.value = value;
        this.right = null;
        this.left = null;
    }

    Node merge(Node other) {
         if other === null {
             return this;
         }
         value += other.value;
         if left === null {
            left = other.left;
         } else {
            left = left.merge(other.left);
         }
         if right === null {
            right = other.right;
         } else {
            right = right.merge(other.right);
         }
         return this;
    }

    Int value() {
        return value;
    }

    Node left() {
        return left;
    }

    Void setLeft(Node left) {
        this.left = left;
    }

    Node right() {
        return right;
    }

    Void setRight(Node right) {
        this.right = right;
    }

}

class BinaryTree {
    Node root;

    constructor(Node root) {
        this.root = root;
    }

    constructor(Array<Int> arr) {
        for Int a in arr {
            add(a);
        }
    }

    Node addRecursive(Node current, Int value) {
        if current === null {
            return Node(value);
        }
        if value < current.value() {
            current.setLeft(addRecursive(current.left(), value));
        } else if value > current.value() {
            current.setRight(addRecursive(current.right(), value));
        }
        return current;
    }

    Void add(Int value) {
        root = addRecursive(root, value);
    }

    Int findSmallestValue() {
        if root.left() === null {
            return root.value();
        } else {
            return BinaryTree(root.left()).findSmallestValue();
        }
    }

    BinaryTree _plus(BinaryTree other) {
        return BinaryTree(root.merge(other.root));
    }

}

Void print(Int value) {
    stdout[index] = value;
    index += 1;
}

Void main() {
    print(bt.findSmallestValue());
    bt3 = bt + bt2;
}