
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Wed Apr 01 17:21:22 CEST 2020
//----------------------------------------------------

package syntactical;

import lexical.LexicalAnalyser;

/**
 * CUP v0.11b beta 20140220 generated parser.
 *
 * @version Wed Apr 01 17:21:22 CEST 2020
 */
public class SyntacticalAnalyser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SyntacticalAnalyser() {super();}

  /** Constructor which sets the default scanner. */
  public SyntacticalAnalyser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SyntacticalAnalyser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

    /**
     * Production table.
     */
    protected static final short _production_table[][] =
            unpackFromStrings(new String[]{
                    "\000\040\000\002\002\004\000\002\002\004\000\002\003" +
                            "\005\000\002\003\002\000\002\004\004\000\002\004\002" +
                            "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
                            "\002\006\004\000\002\007\004\000\002\007\004\000\002" +
                            "\007\004\000\002\011\005\000\002\012\004\000\002\014" +
                            "\005\000\002\015\005\000\002\016\003\000\002\016\003" +
                            "\000\002\017\005\000\002\017\002\000\002\026\005\000" +
                            "\002\027\004\000\002\027\002\000\002\030\003\000\002" +
                            "\030\003\000\002\031\003\000\002\031\003\000\002\032" +
                            "\004\000\002\033\005\000\002\034\004\000\002\034\004" +
                            "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;
  }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[]{
                    "\000\066\000\012\002\ufffe\023\ufffe\024\005\031\ufffe\001" +
                            "\002\000\004\002\070\001\002\000\004\071\066\001\002" +
                            "\000\010\002\ufffc\023\020\031\016\001\002\000\010\002" +
                            "\ufff9\023\ufff9\031\ufff9\001\002\000\010\002\ufffc\023\020" +
                            "\031\016\001\002\000\010\002\ufffb\023\ufffb\031\ufffb\001" +
                            "\002\000\004\002\001\001\002\000\010\032\031\065\023" +
                            "\071\032\001\002\000\004\071\027\001\002\000\010\002" +
                            "\ufffa\023\ufffa\031\ufffa\001\002\000\004\031\026\001\002" +
                            "\000\004\071\025\001\002\000\004\031\016\001\002\000" +
                            "\004\065\023\001\002\000\004\071\ufff3\001\002\000\002" +
                            "\001\002\000\004\071\ufff4\001\002\000\014\002\ufff6\010" +
                            "\ufff6\023\ufff6\031\ufff6\037\ufff6\001\002\000\014\032\ufff8" +
                            "\033\ufff8\043\ufff8\065\ufff8\071\ufff8\001\002\000\014\002" +
                            "\ufff5\010\ufff5\023\ufff5\031\ufff5\037\ufff5\001\002\000\004" +
                            "\036\043\001\002\000\006\031\016\033\uffed\001\002\000" +
                            "\014\002\ufff7\010\ufff7\023\ufff7\031\ufff7\037\ufff7\001\002" +
                            "\000\004\033\ufff0\001\002\000\004\033\041\001\002\000" +
                            "\006\033\uffef\043\036\001\002\000\006\031\016\033\uffed" +
                            "\001\002\000\004\033\uffee\001\002\000\004\043\036\001" +
                            "\002\000\004\036\ufff1\001\002\000\010\002\ufff2\023\ufff2" +
                            "\031\ufff2\001\002\000\012\010\052\023\020\031\016\037" +
                            "\uffea\001\002\000\004\037\064\001\002\000\012\010\uffe7" +
                            "\023\uffe7\031\uffe7\037\uffe7\001\002\000\012\010\uffe9\023" +
                            "\uffe9\031\uffe9\037\uffe9\001\002\000\006\065\023\071\032" +
                            "\001\002\000\012\010\uffe6\023\uffe6\031\uffe6\037\uffe6\001" +
                            "\002\000\004\011\060\001\002\000\002\001\002\000\012" +
                            "\010\052\023\020\031\016\037\uffea\001\002\000\012\010" +
                            "\uffe8\023\uffe8\031\uffe8\037\uffe8\001\002\000\004\037\uffeb" +
                            "\001\002\000\004\036\043\001\002\000\004\011\uffe4\001" +
                            "\002\000\006\010\052\036\043\001\002\000\012\010\uffe5" +
                            "\023\uffe5\031\uffe5\037\uffe5\001\002\000\012\010\uffe2\023" +
                            "\uffe2\031\uffe2\037\uffe2\001\002\000\012\010\uffe3\023\uffe3" +
                            "\031\uffe3\037\uffe3\001\002\000\016\002\uffec\010\uffec\011" +
                            "\uffec\023\uffec\031\uffec\037\uffec\001\002\000\004\002\ufffd" +
                            "\001\002\000\012\002\ufffe\023\ufffe\024\005\031\ufffe\001" +
                            "\002\000\010\002\uffff\023\uffff\031\uffff\001\002\000\004" +
                            "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[]{
            "\000\066\000\006\002\003\003\005\001\001\000\002\001" +
                    "\001\000\002\001\001\000\022\004\011\005\007\006\012" +
                    "\007\010\011\016\012\013\014\014\020\006\001\001\000" +
                    "\002\001\001\000\022\004\064\005\007\006\012\007\010" +
                    "\011\016\012\013\014\014\020\006\001\001\000\002\001" +
                    "\001\000\002\001\001\000\004\015\027\001\001\000\002" +
                    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                    "\001\000\006\006\020\011\021\001\001\000\002\001\001" +
                    "\000\002\001\001\000\004\035\023\001\001\000\002\001" +
                    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                    "\000\004\026\041\001\001\000\010\006\034\016\033\017" +
                    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
                    "\001\001\000\002\001\001\000\006\006\037\017\036\001" +
                    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                    "\000\002\001\001\000\026\006\046\007\044\011\016\012" +
                    "\013\013\047\027\043\030\052\031\045\032\053\033\050" +
                    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                    "\001\000\002\001\001\000\002\001\001\000\004\034\060" +
                    "\001\001\000\004\035\055\001\001\000\026\006\046\007" +
                    "\044\011\016\012\013\013\047\027\054\030\052\031\045" +
                    "\032\053\033\050\001\001\000\002\001\001\000\002\001" +
                    "\001\000\004\026\056\001\001\000\002\001\001\000\010" +
                    "\026\062\032\061\033\050\001\001\000\002\001\001\000" +
                    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                    "\001\001\000\004\003\066\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SyntacticalAnalyser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SyntacticalAnalyser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SyntacticalAnalyser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    LexicalAnalyser analyser = (LexicalAnalyser) getScanner();

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
  return getScanner().next_token(); 
    }

 /* TODO ?? */ 
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SyntacticalAnalyser$actions {

 /* TODO tree root declaration */ 
  private final SyntacticalAnalyser parser;

  /** Constructor */
  CUP$SyntacticalAnalyser$actions(SyntacticalAnalyser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SyntacticalAnalyser$do_action_part00000000(
    int                        CUP$SyntacticalAnalyser$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticalAnalyser$parser,
    java.util.Stack            CUP$SyntacticalAnalyser$stack,
    int                        CUP$SyntacticalAnalyser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SyntacticalAnalyser$result;

      /* select the action based on the action number */
      switch (CUP$SyntacticalAnalyser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
            case 0: // Program ::= ImportList DeclarationList
            {
              Object RESULT =null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Program",0, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 1: // $START ::= Program EOF
            {
                Object RESULT = null;
                Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = start_val;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("$START", 0, RESULT);
            }
            /* ACCEPT */
            CUP$SyntacticalAnalyser$parser.done_parsing();
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 2: // ImportList ::= IMPORT END ImportList
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ImportList", 1, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 3: // ImportList ::=
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ImportList", 1, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 4: // DeclarationList ::= Declaration DeclarationList
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("DeclarationList", 2, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 5: // DeclarationList ::=
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("DeclarationList", 2, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 6: // Declaration ::= VarConstDeclaration
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration", 3, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 7: // Declaration ::= FunctionDeclaration
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration", 3, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 8: // Declaration ::= ClassDeclaration
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration", 3, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 9: // BaseVarDeclaration ::= IDENTIFIER IDENTIFIER
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("BaseVarDeclaration", 4, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 10: // VarConstDeclaration ::= BaseVarDeclaration END
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarConstDeclaration", 5, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 11: // VarConstDeclaration ::= VarInitDeclaration END
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarConstDeclaration", 5, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 12: // VarConstDeclaration ::= ConstDeclaration END
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarConstDeclaration", 5, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 13: // VarInitDeclaration ::= BaseVarDeclaration ASSIGNMENT Expression
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarInitDeclaration", 7, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 14: // ConstDeclaration ::= CONST VarInitDeclaration
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstDeclaration", 8, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 15: // FunctionDeclaration ::= BaseVarDeclaration FunctionParameters Block
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionDeclaration", 10, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 16: // FunctionParameters ::= PARENTH_L Parameters PARENTH_R
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionParameters", 11, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 17: // Parameters ::= ParameterList
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Parameters", 12, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 18: // Parameters ::= BaseVarDeclaration
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Parameters", 12, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 19: // ParameterList ::= BaseVarDeclaration COMMA ParameterList
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ParameterList", 13, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 20: // ParameterList ::=
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ParameterList", 13, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 21: // Block ::= CURLY_L StatementList CURLY_R
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Block", 20, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 22: // StatementList ::= Statement StatementList
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("StatementList", 21, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 23: // StatementList ::=
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("StatementList", 21, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 24: // Statement ::= VarDeclarationStatement
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement", 22, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 25: // Statement ::= IfElseStatement
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement", 22, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 26: // VarDeclarationStatement ::= VarConstDeclaration
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclarationStatement", 23, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 27: // VarDeclarationStatement ::= LocalConstDeclaration
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclarationStatement", 23, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 28: // IfElseStatement ::= IfStatement ElseStatement
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("IfElseStatement", 24, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 29: // IfStatement ::= IF Expression Block
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("IfStatement", 25, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 30: // ElseStatement ::= ELSE Block
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ElseStatement", 26, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 31: // ElseStatement ::= ELSE IfElseStatement
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ElseStatement", 26, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /* . . . . . .*/
            default:
                throw new Exception(
                        "Invalid action number " + CUP$SyntacticalAnalyser$act_num + "found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SyntacticalAnalyser$do_action(
    int                        CUP$SyntacticalAnalyser$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticalAnalyser$parser,
    java.util.Stack            CUP$SyntacticalAnalyser$stack,
    int                        CUP$SyntacticalAnalyser$top)
    throws java.lang.Exception
    {
              return CUP$SyntacticalAnalyser$do_action_part00000000(
                               CUP$SyntacticalAnalyser$act_num,
                               CUP$SyntacticalAnalyser$parser,
                               CUP$SyntacticalAnalyser$stack,
                               CUP$SyntacticalAnalyser$top);
    }
}

