
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Wed Apr 29 15:29:13 CEST 2020
//----------------------------------------------------

package syntactical;

import lexical.LexicalAnalyser;
import syntactical.ast.*;

import java.util.*;

/**
 * CUP v0.11b beta 20140220 generated parser.
 *
 * @version Wed Apr 29 15:29:13 CEST 2020
 */
public class SyntacticalAnalyser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SyntacticalAnalyser() {super();}

  /** Constructor which sets the default scanner. */
  public SyntacticalAnalyser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SyntacticalAnalyser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
            "\000\213\000\002\002\004\000\002\002\004\000\002\003" +
                    "\004\000\002\003\002\000\002\004\005\000\002\005\005" +
                    "\000\002\005\003\000\002\006\003\000\002\006\003\000" +
                    "\002\006\003\000\002\007\004\000\002\007\002\000\002" +
                    "\010\003\000\002\010\003\000\002\010\003\000\002\012" +
                    "\003\000\002\012\004\000\002\013\003\000\002\013\004" +
                    "\000\002\011\004\000\002\011\004\000\002\017\004\000" +
                    "\002\014\005\000\002\014\004\000\002\015\007\000\002" +
                    "\015\005\000\002\016\004\000\002\020\005\000\002\021" +
                    "\004\000\002\021\005\000\002\022\003\000\002\022\005" +
                    "\000\002\023\005\000\002\024\005\000\002\025\004\000" +
                    "\002\025\002\000\002\026\003\000\002\026\003\000\002" +
                    "\026\003\000\002\027\005\000\002\030\004\000\002\030" +
                    "\002\000\002\031\003\000\002\031\003\000\002\031\003" +
                    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
                    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
                    "\032\005\000\002\033\003\000\002\034\006\000\002\034" +
                    "\006\000\002\034\006\000\002\034\006\000\002\034\006" +
                    "\000\002\034\006\000\002\036\004\000\002\036\005\000" +
                    "\002\037\006\000\002\040\004\000\002\040\004\000\002" +
                    "\040\002\000\002\041\007\000\002\042\005\000\002\042" +
                    "\006\000\002\043\005\000\002\044\007\000\002\045\003" +
                    "\000\002\056\005\000\002\056\003\000\002\056\003\000" +
                    "\002\056\003\000\002\056\003\000\002\055\004\000\002" +
                    "\055\004\000\002\055\004\000\002\055\003\000\002\054" +
                    "\005\000\002\054\005\000\002\054\005\000\002\054\003" +
                    "\000\002\053\005\000\002\053\005\000\002\053\003\000" +
                    "\002\052\005\000\002\052\005\000\002\052\005\000\002" +
                    "\052\005\000\002\052\003\000\002\051\005\000\002\051" +
                    "\005\000\002\051\005\000\002\051\003\000\002\050\005" +
                    "\000\002\050\003\000\002\047\005\000\002\047\003\000" +
                    "\002\046\005\000\002\046\003\000\002\057\003\000\002" +
                    "\057\003\000\002\057\003\000\002\060\003\000\002\060" +
                    "\003\000\002\060\003\000\002\060\003\000\002\060\003" +
                    "\000\002\060\003\000\002\060\003\000\002\060\003\000" +
                    "\002\061\003\000\002\061\004\000\002\061\005\000\002" +
                    "\062\003\000\002\062\005\000\002\063\004\000\002\063" +
                    "\005\000\002\064\003\000\002\064\005\000\002\065\003" +
                    "\000\002\065\003\000\002\066\004\000\002\070\003\000" +
                    "\002\070\006\000\002\067\003\000\002\067\003\000\002" +
                    "\071\003\000\002\071\003\000\002\071\003\000\002\072" +
                    "\006\000\002\073\005\000\002\074\003\000\002\075\004" +
                    "\000\002\075\005\000\002\076\003\000\002\076\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[]{
            "\000\354\000\016\002\ufffe\013\ufffe\014\ufffe\060\ufffe\062" +
                    "\ufffe\063\ufffe\001\002\000\004\002\356\001\002\000\016" +
                    "\002\ufff6\013\025\014\010\060\027\062\020\063\006\001" +
                    "\002\000\010\057\351\060\347\062\352\001\002\000\014" +
                    "\002\ufff3\013\ufff3\014\ufff3\060\ufff3\062\ufff3\001\002\000" +
                    "\006\060\027\062\020\001\002\000\004\056\330\001\002" +
                    "\000\014\002\ufff6\013\025\014\010\060\027\062\020\001" +
                    "\002\000\010\017\200\052\150\056\201\001\002\000\004" +
                    "\056\176\001\002\000\006\017\035\057\175\001\002\000" +
                    "\014\017\uff84\044\172\046\uff84\057\uff84\060\uff84\001\002" +
                    "\000\016\002\uffff\013\uffff\014\uffff\060\uffff\062\uffff\063" +
                    "\uffff\001\002\000\016\017\uff82\023\uff82\044\uff82\046\uff82" +
                    "\057\uff82\060\uff82\001\002\000\004\002\001\001\002\000" +
                    "\014\002\ufff5\013\ufff5\014\ufff5\060\ufff5\062\ufff5\001\002" +
                    "\000\014\002\ufff2\013\ufff2\014\ufff2\060\ufff2\062\ufff2\001" +
                    "\002\000\004\057\171\001\002\000\006\060\027\062\020" +
                    "\001\002\000\014\002\ufff4\013\ufff4\014\ufff4\060\ufff4\062" +
                    "\ufff4\001\002\000\016\017\uff81\023\uff81\044\uff81\046\uff81" +
                    "\057\uff81\060\uff81\001\002\000\006\017\035\060\033\001" +
                    "\002\000\004\060\032\001\002\000\004\056\uffe8\001\002" +
                    "\000\004\052\167\001\002\000\062\020\uff85\022\uff85\023" +
                    "\uff85\024\uff85\025\uff85\026\uff85\030\uff85\032\uff85\034\uff85" +
                    "\036\uff85\040\uff85\042\uff85\043\uff85\044\uff85\045\uff85\046" +
                    "\uff85\047\uff85\050\uff85\051\uff85\054\uff85\055\uff85\056\uff85" +
                    "\057\uff85\060\uff85\001\002\000\046\016\036\017\037\020" +
                    "\075\021\045\023\051\032\040\034\071\053\044\060\027" +
                    "\062\020\064\041\065\073\066\043\067\061\070\046\071" +
                    "\070\072\060\073\072\001\002\000\056\020\uff91\022\uff91" +
                    "\023\uff91\024\uff91\025\uff91\026\uff91\030\uff91\032\uff91\034" +
                    "\uff91\036\uff91\040\uff91\042\uff91\043\uff91\044\uff91\045\uff91" +
                    "\046\uff91\047\uff91\050\uff91\051\uff91\054\uff91\055\uff91\056" +
                    "\uff91\001\002\000\044\016\036\017\037\021\045\023\051" +
                    "\032\040\034\071\053\044\060\027\062\020\064\041\065" +
                    "\073\066\043\067\061\070\046\071\070\072\060\073\072" +
                    "\001\002\000\044\016\036\017\037\021\045\023\051\032" +
                    "\040\034\071\053\044\060\027\062\020\064\041\065\073" +
                    "\066\043\067\061\070\046\071\070\072\060\073\072\001" +
                    "\002\000\056\020\uff98\022\uff98\023\uff98\024\uff98\025\uff98" +
                    "\026\uff98\030\uff98\032\uff98\034\uff98\036\uff98\040\uff98\042" +
                    "\uff98\043\uff98\044\uff98\045\uff98\046\uff98\047\uff98\050\uff98" +
                    "\051\uff98\054\uff98\055\uff98\056\uff98\001\002\000\056\020" +
                    "\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\030\uffb9" +
                    "\032\uffb9\034\uffb9\036\uffb9\040\uffb9\042\uffb9\043\uffb9\044" +
                    "\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\054\uffb9" +
                    "\055\uffb9\056\uffb9\001\002\000\056\020\uff94\022\uff94\023" +
                    "\uff94\024\uff94\025\uff94\026\uff94\030\uff94\032\uff94\034\uff94" +
                    "\036\uff94\040\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046" +
                    "\uff94\047\uff94\050\uff94\051\uff94\054\uff94\055\uff94\056\uff94" +
                    "\001\002\000\044\016\036\017\037\021\045\023\051\032" +
                    "\040\034\071\053\044\060\027\062\020\064\041\065\073" +
                    "\066\043\067\061\070\046\071\070\072\060\073\072\001" +
                    "\002\000\046\016\036\017\037\021\045\022\155\023\051" +
                    "\032\040\034\071\053\044\060\027\062\020\064\041\065" +
                    "\073\066\043\067\061\070\046\071\070\072\060\073\072" +
                    "\001\002\000\056\020\uff96\022\uff96\023\uff96\024\uff96\025" +
                    "\uff96\026\uff96\030\uff96\032\uff96\034\uff96\036\uff96\040\uff96" +
                    "\042\uff96\043\uff96\044\uff96\045\uff96\046\uff96\047\uff96\050" +
                    "\uff96\051\uff96\054\uff96\055\uff96\056\uff96\001\002\000\056" +
                    "\020\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\030" +
                    "\uffb2\032\uffb2\034\uffb2\036\uffb2\040\uffb2\042\uffb2\043\uffb2" +
                    "\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\054" +
                    "\uffb2\055\uffb2\056\uffb2\001\002\000\056\020\uffb7\022\uffb7" +
                    "\023\uffb7\024\uffb7\025\uffb7\026\uffb7\030\uffb7\032\uffb7\034" +
                    "\uffb7\036\uffb7\040\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7" +
                    "\046\uffb7\047\uffb7\050\uffb7\051\uffb7\054\uffb7\055\uffb7\056" +
                    "\uffb7\001\002\000\012\013\146\024\141\060\027\062\020" +
                    "\001\002\000\056\020\uffae\022\uffae\023\uffae\024\uffae\025" +
                    "\uffae\026\uffae\030\uffae\032\uffae\034\uffae\036\uffae\040\uffae" +
                    "\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050" +
                    "\uffae\051\uffae\054\uffae\055\uffae\056\uffae\001\002\000\004" +
                    "\017\035\001\002\000\056\020\uffab\022\uffab\023\uffab\024" +
                    "\uffab\025\uffab\026\uffab\030\uffab\032\uffab\034\uffab\036\125" +
                    "\040\126\042\124\043\uffab\044\uffab\045\uffab\046\uffab\047" +
                    "\uffab\050\uffab\051\uffab\054\uffab\055\uffab\056\uffab\001\002" +
                    "\000\050\020\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026" +
                    "\uffa6\030\uffa6\032\121\034\122\043\uffa6\044\uffa6\045\uffa6" +
                    "\046\uffa6\047\uffa6\050\uffa6\051\uffa6\054\uffa6\055\uffa6\056" +
                    "\uffa6\001\002\000\044\020\uffa2\022\uffa2\023\uffa2\024\uffa2" +
                    "\025\uffa2\026\uffa2\030\uffa2\043\116\044\114\045\117\046" +
                    "\115\047\uffa2\050\uffa2\051\uffa2\054\uffa2\055\uffa2\056\uffa2" +
                    "\001\002\000\034\020\uffa0\022\uffa0\023\uffa0\024\uffa0\025" +
                    "\uffa0\026\uffa0\030\uffa0\047\110\050\111\051\112\054\uffa0" +
                    "\055\uffa0\056\uffa0\001\002\000\056\020\uff93\022\uff93\023" +
                    "\uff93\024\uff93\025\uff93\026\uff93\030\uff93\032\uff93\034\uff93" +
                    "\036\uff93\040\uff93\042\uff93\043\uff93\044\uff93\045\uff93\046" +
                    "\uff93\047\uff93\050\uff93\051\uff93\054\uff93\055\uff93\056\uff93" +
                    "\001\002\000\056\020\uff90\022\uff90\023\uff90\024\uff90\025" +
                    "\uff90\026\uff90\030\uff90\032\uff90\034\uff90\036\uff90\040\uff90" +
                    "\042\uff90\043\uff90\044\uff90\045\uff90\046\uff90\047\uff90\050" +
                    "\uff90\051\uff90\054\uff90\055\uff90\056\uff90\001\002\000\026" +
                    "\020\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\030" +
                    "\uff9e\054\106\055\uff9e\056\uff9e\001\002\000\024\020\uff9c" +
                    "\022\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c\030\uff9c\055" +
                    "\104\056\uff9c\001\002\000\022\020\uffbb\022\uffbb\023\uffbb" +
                    "\024\uffbb\025\uffbb\026\102\030\uffbb\056\uffbb\001\002\000" +
                    "\056\020\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6" +
                    "\030\uffb6\032\uffb6\034\uffb6\036\uffb6\040\uffb6\042\uffb6\043" +
                    "\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6" +
                    "\054\uffb6\055\uffb6\056\uffb6\001\002\000\006\020\100\030" +
                    "\077\001\002\000\056\020\uffb8\022\uffb8\023\uffb8\024\uffb8" +
                    "\025\uffb8\026\uffb8\030\uffb8\032\uffb8\034\uffb8\036\uffb8\040" +
                    "\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8" +
                    "\050\uffb8\051\uffb8\054\uffb8\055\uffb8\056\uffb8\001\002\000" +
                    "\056\020\uff95\022\uff95\023\uff95\024\uff95\025\uff95\026\uff95" +
                    "\030\uff95\032\uff95\034\uff95\036\uff95\040\uff95\042\uff95\043" +
                    "\uff95\044\uff95\045\uff95\046\uff95\047\uff95\050\uff95\051\uff95" +
                    "\054\uff95\055\uff95\056\uff95\001\002\000\044\016\036\017" +
                    "\037\021\045\023\051\032\040\034\071\053\044\060\027" +
                    "\062\020\064\041\065\073\066\043\067\061\070\046\071" +
                    "\070\072\060\073\072\001\002\000\056\020\uff92\022\uff92" +
                    "\023\uff92\024\uff92\025\uff92\026\uff92\030\uff92\032\uff92\034" +
                    "\uff92\036\uff92\040\uff92\042\uff92\043\uff92\044\uff92\045\uff92" +
                    "\046\uff92\047\uff92\050\uff92\051\uff92\054\uff92\055\uff92\056" +
                    "\uff92\001\002\000\056\020\uff97\022\uff97\023\uff97\024\uff97" +
                    "\025\uff97\026\uff97\030\uff97\032\uff97\034\uff97\036\uff97\040" +
                    "\uff97\042\uff97\043\uff97\044\uff97\045\uff97\046\uff97\047\uff97" +
                    "\050\uff97\051\uff97\054\uff97\055\uff97\056\uff97\001\002\000" +
                    "\006\020\uff78\030\uff78\001\002\000\062\020\uff7a\022\uff7a" +
                    "\023\uff7a\024\uff7a\025\uff7a\026\uff7a\030\uff7a\032\uff7a\034" +
                    "\uff7a\036\uff7a\040\uff7a\042\uff7a\043\uff7a\044\uff7a\045\uff7a" +
                    "\046\uff7a\047\uff7a\050\uff7a\051\uff7a\054\uff7a\055\uff7a\056" +
                    "\uff7a\057\uff7a\060\uff7a\001\002\000\056\020\uffb4\022\uffb4" +
                    "\023\uffb4\024\uffb4\025\uffb4\026\uffb4\030\uffb4\032\uffb4\034" +
                    "\uffb4\036\uffb4\040\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4" +
                    "\046\uffb4\047\uffb4\050\uffb4\051\uffb4\054\uffb4\055\uffb4\056" +
                    "\uffb4\001\002\000\044\016\036\017\037\021\045\023\051" +
                    "\032\040\034\071\053\044\060\027\062\020\064\041\065" +
                    "\073\066\043\067\061\070\046\071\070\072\060\073\072" +
                    "\001\002\000\062\020\uff79\022\uff79\023\uff79\024\uff79\025" +
                    "\uff79\026\uff79\030\uff79\032\uff79\034\uff79\036\uff79\040\uff79" +
                    "\042\uff79\043\uff79\044\uff79\045\uff79\046\uff79\047\uff79\050" +
                    "\uff79\051\uff79\054\uff79\055\uff79\056\uff79\057\uff79\060\uff79" +
                    "\001\002\000\006\020\uff77\030\uff77\001\002\000\044\016" +
                    "\036\017\037\021\045\023\051\032\040\034\071\053\044" +
                    "\060\027\062\020\064\041\065\073\066\043\067\061\070" +
                    "\046\071\070\072\060\073\072\001\002\000\024\020\uff9d" +
                    "\022\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d\030\uff9d\055" +
                    "\104\056\uff9d\001\002\000\044\016\036\017\037\021\045" +
                    "\023\051\032\040\034\071\053\044\060\027\062\020\064" +
                    "\041\065\073\066\043\067\061\070\046\071\070\072\060" +
                    "\073\072\001\002\000\026\020\uff9f\022\uff9f\023\uff9f\024" +
                    "\uff9f\025\uff9f\026\uff9f\030\uff9f\054\106\055\uff9f\056\uff9f" +
                    "\001\002\000\044\016\036\017\037\021\045\023\051\032" +
                    "\040\034\071\053\044\060\027\062\020\064\041\065\073" +
                    "\066\043\067\061\070\046\071\070\072\060\073\072\001" +
                    "\002\000\034\020\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1" +
                    "\026\uffa1\030\uffa1\047\110\050\111\051\112\054\uffa1\055" +
                    "\uffa1\056\uffa1\001\002\000\044\016\036\017\037\021\045" +
                    "\023\051\032\040\034\071\053\044\060\027\062\020\064" +
                    "\041\065\073\066\043\067\061\070\046\071\070\072\060" +
                    "\073\072\001\002\000\044\016\036\017\037\021\045\023" +
                    "\051\032\040\034\071\053\044\060\027\062\020\064\041" +
                    "\065\073\066\043\067\061\070\046\071\070\072\060\073" +
                    "\072\001\002\000\044\016\036\017\037\021\045\023\051" +
                    "\032\040\034\071\053\044\060\027\062\020\064\041\065" +
                    "\073\066\043\067\061\070\046\071\070\072\060\073\072" +
                    "\001\002\000\044\020\uffa4\022\uffa4\023\uffa4\024\uffa4\025" +
                    "\uffa4\026\uffa4\030\uffa4\043\116\044\114\045\117\046\115" +
                    "\047\uffa4\050\uffa4\051\uffa4\054\uffa4\055\uffa4\056\uffa4\001" +
                    "\002\000\044\016\036\017\037\021\045\023\051\032\040" +
                    "\034\071\053\044\060\027\062\020\064\041\065\073\066" +
                    "\043\067\061\070\046\071\070\072\060\073\072\001\002" +
                    "\000\044\016\036\017\037\021\045\023\051\032\040\034" +
                    "\071\053\044\060\027\062\020\064\041\065\073\066\043" +
                    "\067\061\070\046\071\070\072\060\073\072\001\002\000" +
                    "\044\016\036\017\037\021\045\023\051\032\040\034\071" +
                    "\053\044\060\027\062\020\064\041\065\073\066\043\067" +
                    "\061\070\046\071\070\072\060\073\072\001\002\000\044" +
                    "\016\036\017\037\021\045\023\051\032\040\034\071\053" +
                    "\044\060\027\062\020\064\041\065\073\066\043\067\061" +
                    "\070\046\071\070\072\060\073\072\001\002\000\050\020" +
                    "\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\030\uffa9" +
                    "\032\121\034\122\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047" +
                    "\uffa9\050\uffa9\051\uffa9\054\uffa9\055\uffa9\056\uffa9\001\002" +
                    "\000\044\016\036\017\037\021\045\023\051\032\040\034" +
                    "\071\053\044\060\027\062\020\064\041\065\073\066\043" +
                    "\067\061\070\046\071\070\072\060\073\072\001\002\000" +
                    "\044\016\036\017\037\021\045\023\051\032\040\034\071" +
                    "\053\044\060\027\062\020\064\041\065\073\066\043\067" +
                    "\061\070\046\071\070\072\060\073\072\001\002\000\056" +
                    "\020\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac\030" +
                    "\uffac\032\uffac\034\uffac\036\125\040\126\042\124\043\uffac" +
                    "\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051\uffac\054" +
                    "\uffac\055\uffac\056\uffac\001\002\000\044\016\036\017\037" +
                    "\021\045\023\051\032\040\034\071\053\044\060\027\062" +
                    "\020\064\041\065\073\066\043\067\061\070\046\071\070" +
                    "\072\060\073\072\001\002\000\044\016\036\017\037\021" +
                    "\045\023\051\032\040\034\071\053\044\060\027\062\020" +
                    "\064\041\065\073\066\043\067\061\070\046\071\070\072" +
                    "\060\073\072\001\002\000\044\016\036\017\037\021\045" +
                    "\023\051\032\040\034\071\053\044\060\027\062\020\064" +
                    "\041\065\073\066\043\067\061\070\046\071\070\072\060" +
                    "\073\072\001\002\000\056\020\uffb0\022\uffb0\023\uffb0\024" +
                    "\uffb0\025\uffb0\026\uffb0\030\uffb0\032\uffb0\034\uffb0\036\uffb0" +
                    "\040\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047" +
                    "\uffb0\050\uffb0\051\uffb0\054\uffb0\055\uffb0\056\uffb0\001\002" +
                    "\000\056\020\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026" +
                    "\uffb1\030\uffb1\032\uffb1\034\uffb1\036\uffb1\040\uffb1\042\uffb1" +
                    "\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051" +
                    "\uffb1\054\uffb1\055\uffb1\056\uffb1\001\002\000\056\020\uffaf" +
                    "\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\030\uffaf\032" +
                    "\uffaf\034\uffaf\036\uffaf\040\uffaf\042\uffaf\043\uffaf\044\uffaf" +
                    "\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\054\uffaf\055" +
                    "\uffaf\056\uffaf\001\002\000\056\020\uffad\022\uffad\023\uffad" +
                    "\024\uffad\025\uffad\026\uffad\030\uffad\032\uffad\034\uffad\036" +
                    "\125\040\126\042\124\043\uffad\044\uffad\045\uffad\046\uffad" +
                    "\047\uffad\050\uffad\051\uffad\054\uffad\055\uffad\056\uffad\001" +
                    "\002\000\050\020\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7" +
                    "\026\uffa7\030\uffa7\032\121\034\122\043\uffa7\044\uffa7\045" +
                    "\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\054\uffa7\055\uffa7" +
                    "\056\uffa7\001\002\000\050\020\uffaa\022\uffaa\023\uffaa\024" +
                    "\uffaa\025\uffaa\026\uffaa\030\uffaa\032\121\034\122\043\uffaa" +
                    "\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\054" +
                    "\uffaa\055\uffaa\056\uffaa\001\002\000\050\020\uffa8\022\uffa8" +
                    "\023\uffa8\024\uffa8\025\uffa8\026\uffa8\030\uffa8\032\121\034" +
                    "\122\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8" +
                    "\051\uffa8\054\uffa8\055\uffa8\056\uffa8\001\002\000\044\020" +
                    "\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\030\uffa5" +
                    "\043\116\044\114\045\117\046\115\047\uffa5\050\uffa5\051" +
                    "\uffa5\054\uffa5\055\uffa5\056\uffa5\001\002\000\044\020\uffa3" +
                    "\022\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\030\uffa3\043" +
                    "\116\044\114\045\117\046\115\047\uffa3\050\uffa3\051\uffa3" +
                    "\054\uffa3\055\uffa3\056\uffa3\001\002\000\006\024\uff89\030" +
                    "\153\001\002\000\056\020\uff8b\022\uff8b\023\uff8b\024\uff8b" +
                    "\025\uff8b\026\uff8b\030\uff8b\032\uff8b\034\uff8b\036\uff8b\040" +
                    "\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b\047\uff8b" +
                    "\050\uff8b\051\uff8b\054\uff8b\055\uff8b\056\uff8b\001\002\000" +
                    "\004\024\152\001\002\000\004\052\150\001\002\000\006" +
                    "\024\uff86\030\uff86\001\002\000\006\024\uff87\030\uff87\001" +
                    "\002\000\006\060\027\062\020\001\002\000\010\024\uffe7" +
                    "\030\uffe7\056\uffe7\001\002\000\044\016\036\017\037\021" +
                    "\045\023\051\032\040\034\071\053\044\060\027\062\020" +
                    "\064\041\065\073\066\043\067\061\070\046\071\070\072" +
                    "\060\073\072\001\002\000\010\024\uffeb\030\uffeb\056\uffeb" +
                    "\001\002\000\056\020\uff8a\022\uff8a\023\uff8a\024\uff8a\025" +
                    "\uff8a\026\uff8a\030\uff8a\032\uff8a\034\uff8a\036\uff8a\040\uff8a" +
                    "\042\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a\047\uff8a\050" +
                    "\uff8a\051\uff8a\054\uff8a\055\uff8a\056\uff8a\001\002\000\010" +
                    "\013\146\060\027\062\020\001\002\000\004\024\uff88\001" +
                    "\002\000\056\020\uff8f\022\uff8f\023\uff8f\024\uff8f\025\uff8f" +
                    "\026\uff8f\030\uff8f\032\uff8f\034\uff8f\036\uff8f\040\uff8f\042" +
                    "\uff8f\043\uff8f\044\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f" +
                    "\051\uff8f\054\uff8f\055\uff8f\056\uff8f\001\002\000\006\022" +
                    "\160\030\161\001\002\000\006\022\uff8d\030\uff8d\001\002" +
                    "\000\056\020\uff8e\022\uff8e\023\uff8e\024\uff8e\025\uff8e\026" +
                    "\uff8e\030\uff8e\032\uff8e\034\uff8e\036\uff8e\040\uff8e\042\uff8e" +
                    "\043\uff8e\044\uff8e\045\uff8e\046\uff8e\047\uff8e\050\uff8e\051" +
                    "\uff8e\054\uff8e\055\uff8e\056\uff8e\001\002\000\044\016\036" +
                    "\017\037\021\045\023\051\032\040\034\071\053\044\060" +
                    "\027\062\020\064\041\065\073\066\043\067\061\070\046" +
                    "\071\070\072\060\073\072\001\002\000\006\022\uff8c\030" +
                    "\uff8c\001\002\000\056\020\uffb3\022\uffb3\023\uffb3\024\uffb3" +
                    "\025\uffb3\026\uffb3\030\uffb3\032\uffb3\034\uffb3\036\uffb3\040" +
                    "\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3" +
                    "\050\uffb3\051\uffb3\054\uffb3\055\uffb3\056\uffb3\001\002\000" +
                    "\056\020\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5" +
                    "\030\uffb5\032\uffb5\034\uffb5\036\uffb5\040\uffb5\042\uffb5\043" +
                    "\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5" +
                    "\054\uffb5\055\uffb5\056\uffb5\001\002\000\006\020\166\026" +
                    "\102\001\002\000\056\020\uffba\022\uffba\023\uffba\024\uffba" +
                    "\025\uffba\026\uffba\030\uffba\032\uffba\034\uffba\036\uffba\040" +
                    "\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba" +
                    "\050\uffba\051\uffba\054\uffba\055\uffba\056\uffba\001\002\000" +
                    "\044\016\036\017\037\021\045\023\051\032\040\034\071" +
                    "\053\044\060\027\062\020\064\041\065\073\066\043\067" +
                    "\061\070\046\071\070\072\060\073\072\001\002\000\004" +
                    "\056\uffe9\001\002\000\010\024\uffea\030\uffea\056\uffea\001" +
                    "\002\000\006\060\027\062\020\001\002\000\004\046\174" +
                    "\001\002\000\012\017\uff83\046\uff83\057\uff83\060\uff83\001" +
                    "\002\000\016\011\uffec\017\uffec\020\uffec\030\uffec\052\uffec" +
                    "\056\uffec\001\002\000\072\002\uffed\004\uffed\006\uffed\007" +
                    "\uffed\010\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed" +
                    "\017\uffed\021\uffed\023\uffed\024\uffed\032\uffed\034\uffed\053" +
                    "\uffed\057\uffed\060\uffed\062\uffed\064\uffed\065\uffed\066\uffed" +
                    "\067\uffed\070\uffed\071\uffed\072\uffed\073\uffed\001\002\000" +
                    "\004\023\212\001\002\000\010\020\205\060\027\062\020" +
                    "\001\002\000\072\002\uffee\004\uffee\006\uffee\007\uffee\010" +
                    "\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee" +
                    "\021\uffee\023\uffee\024\uffee\032\uffee\034\uffee\053\uffee\057" +
                    "\uffee\060\uffee\062\uffee\064\uffee\065\uffee\066\uffee\067\uffee" +
                    "\070\uffee\071\uffee\072\uffee\073\uffee\001\002\000\006\020" +
                    "\207\030\206\001\002\000\004\057\175\001\002\000\006" +
                    "\020\uffe3\030\uffe3\001\002\000\004\023\uffe5\001\002\000" +
                    "\006\060\027\062\020\001\002\000\004\023\uffe4\001\002" +
                    "\000\006\020\uffe2\030\uffe2\001\002\000\020\002\uffe6\013" +
                    "\uffe6\014\uffe6\015\uffe6\024\uffe6\060\uffe6\062\uffe6\001\002" +
                    "\000\030\004\227\006\225\007\237\010\216\012\221\013" +
                    "\146\023\212\024\uffd8\057\220\060\027\062\020\001\002" +
                    "\000\016\031\310\033\305\035\311\037\306\041\312\052" +
                    "\307\001\002\000\064\004\uffd4\006\uffd4\007\uffd4\010\uffd4" +
                    "\012\uffd4\013\uffd4\016\uffd4\017\uffd4\021\uffd4\023\uffd4\024" +
                    "\uffd4\032\uffd4\034\uffd4\053\uffd4\057\uffd4\060\uffd4\062\uffd4" +
                    "\064\uffd4\065\uffd4\066\uffd4\067\uffd4\070\uffd4\071\uffd4\072" +
                    "\uffd4\073\uffd4\001\002\000\064\004\uffd6\006\uffd6\007\uffd6" +
                    "\010\uffd6\012\uffd6\013\uffd6\016\uffd6\017\uffd6\021\uffd6\023" +
                    "\uffd6\024\uffd6\032\uffd6\034\uffd6\053\uffd6\057\uffd6\060\uffd6" +
                    "\062\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6\070\uffd6\071" +
                    "\uffd6\072\uffd6\073\uffd6\001\002\000\044\016\036\017\037" +
                    "\021\045\023\051\032\040\034\071\053\044\060\027\062" +
                    "\020\064\041\065\073\066\043\067\061\070\046\071\070" +
                    "\072\060\073\072\001\002\000\064\004\uffcd\006\uffcd\007" +
                    "\uffcd\010\uffcd\012\uffcd\013\uffcd\016\uffcd\017\uffcd\021\uffcd" +
                    "\023\uffcd\024\uffcd\032\uffcd\034\uffcd\053\uffcd\057\uffcd\060" +
                    "\uffcd\062\uffcd\064\uffcd\065\uffcd\066\uffcd\067\uffcd\070\uffcd" +
                    "\071\uffcd\072\uffcd\073\uffcd\001\002\000\022\021\uff7b\027" +
                    "\uff7b\031\uff80\033\uff80\035\uff80\037\uff80\041\uff80\052\uff80" +
                    "\001\002\000\046\016\036\017\037\021\045\023\051\032" +
                    "\040\034\071\053\044\056\300\060\027\062\020\064\041" +
                    "\065\073\066\043\067\061\070\046\071\070\072\060\073" +
                    "\072\001\002\000\064\004\uffd7\006\uffd7\007\uffd7\010\uffd7" +
                    "\012\uffd7\013\uffd7\016\uffd7\017\uffd7\021\uffd7\023\uffd7\024" +
                    "\uffd7\032\uffd7\034\uffd7\053\uffd7\057\uffd7\060\uffd7\062\uffd7" +
                    "\064\uffd7\065\uffd7\066\uffd7\067\uffd7\070\uffd7\071\uffd7\072" +
                    "\uffd7\073\uffd7\001\002\000\006\021\274\027\273\001\002" +
                    "\000\064\004\uffd3\006\uffd3\007\uffd3\010\uffd3\012\uffd3\013" +
                    "\uffd3\016\uffd3\017\uffd3\021\uffd3\023\uffd3\024\uffd3\032\uffd3" +
                    "\034\uffd3\053\uffd3\057\uffd3\060\uffd3\062\uffd3\064\uffd3\065" +
                    "\uffd3\066\uffd3\067\uffd3\070\uffd3\071\uffd3\072\uffd3\073\uffd3" +
                    "\001\002\000\044\016\036\017\037\021\045\023\051\032" +
                    "\040\034\071\053\044\060\027\062\020\064\041\065\073" +
                    "\066\043\067\061\070\046\071\070\072\060\073\072\001" +
                    "\002\000\006\052\150\056\201\001\002\000\044\016\036" +
                    "\017\037\021\045\023\051\032\040\034\071\053\044\060" +
                    "\027\062\020\064\041\065\073\066\043\067\061\070\046" +
                    "\071\070\072\060\073\072\001\002\000\064\004\uffd0\006" +
                    "\uffd0\007\uffd0\010\uffd0\012\uffd0\013\uffd0\016\uffd0\017\uffd0" +
                    "\021\uffd0\023\uffd0\024\uffd0\032\uffd0\034\uffd0\053\uffd0\057" +
                    "\uffd0\060\uffd0\062\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0" +
                    "\070\uffd0\071\uffd0\072\uffd0\073\uffd0\001\002\000\064\004" +
                    "\uffd2\006\uffd2\007\uffd2\010\uffd2\012\uffd2\013\uffd2\016\uffd2" +
                    "\017\uffd2\021\uffd2\023\uffd2\024\uffd2\032\uffd2\034\uffd2\053" +
                    "\uffd2\057\uffd2\060\uffd2\062\uffd2\064\uffd2\065\uffd2\066\uffd2" +
                    "\067\uffd2\070\uffd2\071\uffd2\072\uffd2\073\uffd2\001\002\000" +
                    "\064\004\uffd1\006\uffd1\007\uffd1\010\uffd1\012\uffd1\013\uffd1" +
                    "\016\uffd1\017\uffd1\021\uffd1\023\uffd1\024\uffd1\032\uffd1\034" +
                    "\uffd1\053\uffd1\057\uffd1\060\uffd1\062\uffd1\064\uffd1\065\uffd1" +
                    "\066\uffd1\067\uffd1\070\uffd1\071\uffd1\072\uffd1\073\uffd1\001" +
                    "\002\000\066\004\ufff0\006\ufff0\007\ufff0\010\ufff0\012\ufff0" +
                    "\013\ufff0\015\ufff0\016\ufff0\017\ufff0\021\ufff0\023\ufff0\024" +
                    "\ufff0\032\ufff0\034\ufff0\053\ufff0\057\ufff0\060\ufff0\062\ufff0" +
                    "\064\ufff0\065\ufff0\066\ufff0\067\ufff0\070\ufff0\071\ufff0\072" +
                    "\ufff0\073\ufff0\001\002\000\064\004\uffd5\006\uffd5\007\uffd5" +
                    "\010\uffd5\012\uffd5\013\uffd5\016\uffd5\017\uffd5\021\uffd5\023" +
                    "\uffd5\024\uffd5\032\uffd5\034\uffd5\053\uffd5\057\uffd5\060\uffd5" +
                    "\062\uffd5\064\uffd5\065\uffd5\066\uffd5\067\uffd5\070\uffd5\071" +
                    "\uffd5\072\uffd5\073\uffd5\001\002\000\016\031\uff7f\033\uff7f" +
                    "\035\uff7f\037\uff7f\041\uff7f\052\uff7f\001\002\000\030\004" +
                    "\227\006\225\007\237\010\216\012\221\013\146\023\212" +
                    "\024\uffd8\057\220\060\027\062\020\001\002\000\006\060" +
                    "\027\062\020\001\002\000\004\056\245\001\002\000\004" +
                    "\024\244\001\002\000\064\004\uffcf\006\uffcf\007\uffcf\010" +
                    "\uffcf\012\uffcf\013\uffcf\016\uffcf\017\uffcf\021\uffcf\023\uffcf" +
                    "\024\uffcf\032\uffcf\034\uffcf\053\uffcf\057\uffcf\060\uffcf\062" +
                    "\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\070\uffcf\071\uffcf" +
                    "\072\uffcf\073\uffcf\001\002\000\016\031\uff7e\033\uff7e\035" +
                    "\uff7e\037\uff7e\041\uff7e\052\uff7e\001\002\000\074\002\uffce" +
                    "\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce\012\uffce\013" +
                    "\uffce\014\uffce\015\uffce\016\uffce\017\uffce\021\uffce\023\uffce" +
                    "\024\uffce\032\uffce\034\uffce\053\uffce\057\uffce\060\uffce\062" +
                    "\uffce\064\uffce\065\uffce\066\uffce\067\uffce\070\uffce\071\uffce" +
                    "\072\uffce\073\uffce\001\002\000\066\004\uffef\006\uffef\007" +
                    "\uffef\010\uffef\012\uffef\013\uffef\015\uffef\016\uffef\017\uffef" +
                    "\021\uffef\023\uffef\024\uffef\032\uffef\034\uffef\053\uffef\057" +
                    "\uffef\060\uffef\062\uffef\064\uffef\065\uffef\066\uffef\067\uffef" +
                    "\070\uffef\071\uffef\072\uffef\073\uffef\001\002\000\004\011" +
                    "\247\001\002\000\044\016\036\017\037\021\045\023\051" +
                    "\032\040\034\071\053\044\060\027\062\020\064\041\065" +
                    "\073\066\043\067\061\070\046\071\070\072\060\073\072" +
                    "\001\002\000\004\023\212\001\002\000\064\004\uffbc\006" +
                    "\uffbc\007\uffbc\010\uffbc\012\uffbc\013\uffbc\016\uffbc\017\uffbc" +
                    "\021\uffbc\023\uffbc\024\uffbc\032\uffbc\034\uffbc\053\uffbc\057" +
                    "\uffbc\060\uffbc\062\uffbc\064\uffbc\065\uffbc\066\uffbc\067\uffbc" +
                    "\070\uffbc\071\uffbc\072\uffbc\073\uffbc\001\002\000\004\024" +
                    "\uffd9\001\002\000\004\023\212\001\002\000\066\004\uffc1" +
                    "\005\255\006\uffc1\007\uffc1\010\uffc1\012\uffc1\013\uffc1\016" +
                    "\uffc1\017\uffc1\021\uffc1\023\uffc1\024\uffc1\032\uffc1\034\uffc1" +
                    "\053\uffc1\057\uffc1\060\uffc1\062\uffc1\064\uffc1\065\uffc1\066" +
                    "\uffc1\067\uffc1\070\uffc1\071\uffc1\072\uffc1\073\uffc1\001\002" +
                    "\000\006\004\227\023\212\001\002\000\064\004\uffc4\006" +
                    "\uffc4\007\uffc4\010\uffc4\012\uffc4\013\uffc4\016\uffc4\017\uffc4" +
                    "\021\uffc4\023\uffc4\024\uffc4\032\uffc4\034\uffc4\053\uffc4\057" +
                    "\uffc4\060\uffc4\062\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4" +
                    "\070\uffc4\071\uffc4\072\uffc4\073\uffc4\001\002\000\064\004" +
                    "\uffc2\006\uffc2\007\uffc2\010\uffc2\012\uffc2\013\uffc2\016\uffc2" +
                    "\017\uffc2\021\uffc2\023\uffc2\024\uffc2\032\uffc2\034\uffc2\053" +
                    "\uffc2\057\uffc2\060\uffc2\062\uffc2\064\uffc2\065\uffc2\066\uffc2" +
                    "\067\uffc2\070\uffc2\071\uffc2\072\uffc2\073\uffc2\001\002\000" +
                    "\064\004\uffc3\006\uffc3\007\uffc3\010\uffc3\012\uffc3\013\uffc3" +
                    "\016\uffc3\017\uffc3\021\uffc3\023\uffc3\024\uffc3\032\uffc3\034" +
                    "\uffc3\053\uffc3\057\uffc3\060\uffc3\062\uffc3\064\uffc3\065\uffc3" +
                    "\066\uffc3\067\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3\001" +
                    "\002\000\004\023\262\001\002\000\022\016\036\064\041" +
                    "\065\073\066\043\070\046\071\070\072\060\073\072\001" +
                    "\002\000\004\025\271\001\002\000\046\016\036\017\037" +
                    "\021\045\023\051\024\265\032\040\034\071\053\044\060" +
                    "\027\062\020\064\041\065\073\066\043\067\061\070\046" +
                    "\071\070\072\060\073\072\001\002\000\064\004\uffc0\006" +
                    "\uffc0\007\uffc0\010\uffc0\012\uffc0\013\uffc0\016\uffc0\017\uffc0" +
                    "\021\uffc0\023\uffc0\024\uffc0\032\uffc0\034\uffc0\053\uffc0\057" +
                    "\uffc0\060\uffc0\062\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0" +
                    "\070\uffc0\071\uffc0\072\uffc0\073\uffc0\001\002\000\004\025" +
                    "\267\001\002\000\026\004\227\006\225\007\237\010\216" +
                    "\012\221\013\146\023\212\057\220\060\027\062\020\001" +
                    "\002\000\046\016\uffbe\017\uffbe\021\uffbe\023\uffbe\024\uffbe" +
                    "\032\uffbe\034\uffbe\053\uffbe\060\uffbe\062\uffbe\064\uffbe\065" +
                    "\uffbe\066\uffbe\067\uffbe\070\uffbe\071\uffbe\072\uffbe\073\uffbe" +
                    "\001\002\000\026\004\227\006\225\007\237\010\216\012" +
                    "\221\013\146\023\212\057\220\060\027\062\020\001\002" +
                    "\000\046\016\uffbf\017\uffbf\021\uffbf\023\uffbf\024\uffbf\032" +
                    "\uffbf\034\uffbf\053\uffbf\060\uffbf\062\uffbf\064\uffbf\065\uffbf" +
                    "\066\uffbf\067\uffbf\070\uffbf\071\uffbf\072\uffbf\073\uffbf\001" +
                    "\002\000\004\057\277\001\002\000\044\016\036\017\037" +
                    "\021\045\023\051\032\040\034\071\053\044\060\027\062" +
                    "\020\064\041\065\073\066\043\067\061\070\046\071\070" +
                    "\072\060\073\072\001\002\000\004\022\276\001\002\000" +
                    "\016\031\uff7d\033\uff7d\035\uff7d\037\uff7d\041\uff7d\052\uff7d" +
                    "\001\002\000\016\031\uff7c\033\uff7c\035\uff7c\037\uff7c\041" +
                    "\uff7c\052\uff7c\001\002\000\064\004\uffc6\006\uffc6\007\uffc6" +
                    "\010\uffc6\012\uffc6\013\uffc6\016\uffc6\017\uffc6\021\uffc6\023" +
                    "\uffc6\024\uffc6\032\uffc6\034\uffc6\053\uffc6\057\uffc6\060\uffc6" +
                    "\062\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6\070\uffc6\071" +
                    "\uffc6\072\uffc6\073\uffc6\001\002\000\004\056\302\001\002" +
                    "\000\064\004\uffc5\006\uffc5\007\uffc5\010\uffc5\012\uffc5\013" +
                    "\uffc5\016\uffc5\017\uffc5\021\uffc5\023\uffc5\024\uffc5\032\uffc5" +
                    "\034\uffc5\053\uffc5\057\uffc5\060\uffc5\062\uffc5\064\uffc5\065" +
                    "\uffc5\066\uffc5\067\uffc5\070\uffc5\071\uffc5\072\uffc5\073\uffc5" +
                    "\001\002\000\004\023\212\001\002\000\064\004\uffbd\006" +
                    "\uffbd\007\uffbd\010\uffbd\012\uffbd\013\uffbd\016\uffbd\017\uffbd" +
                    "\021\uffbd\023\uffbd\024\uffbd\032\uffbd\034\uffbd\053\uffbd\057" +
                    "\uffbd\060\uffbd\062\uffbd\064\uffbd\065\uffbd\066\uffbd\067\uffbd" +
                    "\070\uffbd\071\uffbd\072\uffbd\073\uffbd\001\002\000\044\016" +
                    "\036\017\037\021\045\023\051\032\040\034\071\053\044" +
                    "\060\027\062\020\064\041\065\073\066\043\067\061\070" +
                    "\046\071\070\072\060\073\072\001\002\000\044\016\036" +
                    "\017\037\021\045\023\051\032\040\034\071\053\044\060" +
                    "\027\062\020\064\041\065\073\066\043\067\061\070\046" +
                    "\071\070\072\060\073\072\001\002\000\044\016\036\017" +
                    "\037\021\045\023\051\032\040\034\071\053\044\060\027" +
                    "\062\020\064\041\065\073\066\043\067\061\070\046\071" +
                    "\070\072\060\073\072\001\002\000\044\016\036\017\037" +
                    "\021\045\023\051\032\040\034\071\053\044\060\027\062" +
                    "\020\064\041\065\073\066\043\067\061\070\046\071\070" +
                    "\072\060\073\072\001\002\000\044\016\036\017\037\021" +
                    "\045\023\051\032\040\034\071\053\044\060\027\062\020" +
                    "\064\041\065\073\066\043\067\061\070\046\071\070\072" +
                    "\060\073\072\001\002\000\044\016\036\017\037\021\045" +
                    "\023\051\032\040\034\071\053\044\060\027\062\020\064" +
                    "\041\065\073\066\043\067\061\070\046\071\070\072\060" +
                    "\073\072\001\002\000\004\056\314\001\002\000\064\004" +
                    "\uffc7\006\uffc7\007\uffc7\010\uffc7\012\uffc7\013\uffc7\016\uffc7" +
                    "\017\uffc7\021\uffc7\023\uffc7\024\uffc7\032\uffc7\034\uffc7\053" +
                    "\uffc7\057\uffc7\060\uffc7\062\uffc7\064\uffc7\065\uffc7\066\uffc7" +
                    "\067\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7\001\002\000" +
                    "\004\056\316\001\002\000\064\004\uffc9\006\uffc9\007\uffc9" +
                    "\010\uffc9\012\uffc9\013\uffc9\016\uffc9\017\uffc9\021\uffc9\023" +
                    "\uffc9\024\uffc9\032\uffc9\034\uffc9\053\uffc9\057\uffc9\060\uffc9" +
                    "\062\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\070\uffc9\071" +
                    "\uffc9\072\uffc9\073\uffc9\001\002\000\004\056\320\001\002" +
                    "\000\064\004\uffcb\006\uffcb\007\uffcb\010\uffcb\012\uffcb\013" +
                    "\uffcb\016\uffcb\017\uffcb\021\uffcb\023\uffcb\024\uffcb\032\uffcb" +
                    "\034\uffcb\053\uffcb\057\uffcb\060\uffcb\062\uffcb\064\uffcb\065" +
                    "\uffcb\066\uffcb\067\uffcb\070\uffcb\071\uffcb\072\uffcb\073\uffcb" +
                    "\001\002\000\004\056\322\001\002\000\064\004\uffcc\006" +
                    "\uffcc\007\uffcc\010\uffcc\012\uffcc\013\uffcc\016\uffcc\017\uffcc" +
                    "\021\uffcc\023\uffcc\024\uffcc\032\uffcc\034\uffcc\053\uffcc\057" +
                    "\uffcc\060\uffcc\062\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc" +
                    "\070\uffcc\071\uffcc\072\uffcc\073\uffcc\001\002\000\004\056" +
                    "\324\001\002\000\064\004\uffc8\006\uffc8\007\uffc8\010\uffc8" +
                    "\012\uffc8\013\uffc8\016\uffc8\017\uffc8\021\uffc8\023\uffc8\024" +
                    "\uffc8\032\uffc8\034\uffc8\053\uffc8\057\uffc8\060\uffc8\062\uffc8" +
                    "\064\uffc8\065\uffc8\066\uffc8\067\uffc8\070\uffc8\071\uffc8\072" +
                    "\uffc8\073\uffc8\001\002\000\004\056\326\001\002\000\064" +
                    "\004\uffca\006\uffca\007\uffca\010\uffca\012\uffca\013\uffca\016" +
                    "\uffca\017\uffca\021\uffca\023\uffca\024\uffca\032\uffca\034\uffca" +
                    "\053\uffca\057\uffca\060\uffca\062\uffca\064\uffca\065\uffca\066" +
                    "\uffca\067\uffca\070\uffca\071\uffca\072\uffca\073\uffca\001\002" +
                    "\000\004\002\ufff7\001\002\000\014\002\ufff1\013\ufff1\014" +
                    "\ufff1\060\ufff1\062\ufff1\001\002\000\004\023\332\001\002" +
                    "\000\014\013\146\015\341\024\uffde\060\027\062\020\001" +
                    "\002\000\014\002\uffe1\013\uffe1\014\uffe1\060\uffe1\062\uffe1" +
                    "\001\002\000\014\013\146\015\341\024\uffde\060\027\062" +
                    "\020\001\002\000\014\013\uffdc\015\uffdc\024\uffdc\060\uffdc" +
                    "\062\uffdc\001\002\000\014\013\uffdd\015\uffdd\024\uffdd\060" +
                    "\uffdd\062\uffdd\001\002\000\004\024\344\001\002\000\014" +
                    "\013\uffdb\015\uffdb\024\uffdb\060\uffdb\062\uffdb\001\002\000" +
                    "\004\017\200\001\002\000\004\023\212\001\002\000\014" +
                    "\013\uffda\015\uffda\024\uffda\060\uffda\062\uffda\001\002\000" +
                    "\014\002\uffe0\013\uffe0\014\uffe0\060\uffe0\062\uffe0\001\002" +
                    "\000\004\024\uffdf\001\002\000\006\040\ufffb\056\ufffb\001" +
                    "\002\000\006\040\ufff9\056\ufff9\001\002\000\006\040\353" +
                    "\056\354\001\002\000\006\040\ufffa\056\ufffa\001\002\000" +
                    "\006\040\ufff8\056\ufff8\001\002\000\010\057\351\060\347" +
                    "\062\352\001\002\000\016\002\ufffd\013\ufffd\014\ufffd\060" +
                    "\ufffd\062\ufffd\063\ufffd\001\002\000\006\040\ufffc\056\ufffc" +
                    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
            "\000\354\000\006\002\003\003\004\001\001\000\002\001" +
                    "\001\000\034\004\016\007\020\010\011\011\022\012\021" +
                    "\014\013\015\010\017\012\020\025\023\006\066\023\067" +
                    "\015\070\014\001\001\000\006\005\347\006\345\001\001" +
                    "\000\002\001\001\000\004\067\330\001\001\000\002\001" +
                    "\001\000\032\007\326\010\011\011\022\012\021\014\013" +
                    "\015\010\017\012\020\025\023\006\066\023\067\015\070" +
                    "\014\001\001\000\004\021\176\001\001\000\002\001\001" +
                    "\000\004\075\033\001\001\000\002\001\001\000\002\001" +
                    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                    "\000\002\001\001\000\002\001\001\000\010\066\030\067" +
                    "\015\070\027\001\001\000\002\001\001\000\002\001\001" +
                    "\000\004\075\033\001\001\000\002\001\001\000\002\001" +
                    "\001\000\002\001\001\000\002\001\001\000\044\045\073" +
                    "\046\063\047\062\050\061\051\056\052\055\053\054\054" +
                    "\053\055\051\056\046\060\041\061\066\063\047\066\064" +
                    "\067\015\070\052\076\065\001\001\000\002\001\001\000" +
                    "\040\046\164\047\062\050\061\051\056\052\055\053\054" +
                    "\054\053\055\051\056\046\060\041\061\066\063\047\066" +
                    "\064\067\015\070\052\001\001\000\022\055\163\056\046" +
                    "\060\041\061\066\063\047\066\064\067\015\070\052\001" +
                    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                    "\000\022\055\162\056\046\060\041\061\066\063\047\066" +
                    "\064\067\015\070\052\001\001\000\044\045\156\046\063" +
                    "\047\062\050\061\051\056\052\055\053\054\054\053\055" +
                    "\051\056\046\060\041\061\066\062\155\063\047\066\064" +
                    "\067\015\070\052\001\001\000\002\001\001\000\002\001" +
                    "\001\000\002\001\001\000\022\014\144\016\143\017\142" +
                    "\064\141\065\137\066\023\067\015\070\014\001\001\000" +
                    "\002\001\001\000\004\075\033\001\001\000\002\001\001" +
                    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                    "\001\000\002\001\001\000\002\001\001\000\022\055\075" +
                    "\056\046\060\041\061\066\063\047\066\064\067\015\070" +
                    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
                    "\001\001\000\002\001\001\000\002\001\001\000\042\045" +
                    "\100\046\063\047\062\050\061\051\056\052\055\053\054" +
                    "\054\053\055\051\056\046\060\041\061\066\063\047\066" +
                    "\064\067\015\070\052\001\001\000\002\001\001\000\002" +
                    "\001\001\000\036\047\102\050\061\051\056\052\055\053" +
                    "\054\054\053\055\051\056\046\060\041\061\066\063\047" +
                    "\066\064\067\015\070\052\001\001\000\002\001\001\000" +
                    "\034\050\104\051\056\052\055\053\054\054\053\055\051" +
                    "\056\046\060\041\061\066\063\047\066\064\067\015\070" +
                    "\052\001\001\000\002\001\001\000\032\051\106\052\055" +
                    "\053\054\054\053\055\051\056\046\060\041\061\066\063" +
                    "\047\066\064\067\015\070\052\001\001\000\002\001\001" +
                    "\000\030\052\136\053\054\054\053\055\051\056\046\060" +
                    "\041\061\066\063\047\066\064\067\015\070\052\001\001" +
                    "\000\030\052\135\053\054\054\053\055\051\056\046\060" +
                    "\041\061\066\063\047\066\064\067\015\070\052\001\001" +
                    "\000\030\052\112\053\054\054\053\055\051\056\046\060" +
                    "\041\061\066\063\047\066\064\067\015\070\052\001\001" +
                    "\000\002\001\001\000\026\053\134\054\053\055\051\056" +
                    "\046\060\041\061\066\063\047\066\064\067\015\070\052" +
                    "\001\001\000\026\053\133\054\053\055\051\056\046\060" +
                    "\041\061\066\063\047\066\064\067\015\070\052\001\001" +
                    "\000\026\053\132\054\053\055\051\056\046\060\041\061" +
                    "\066\063\047\066\064\067\015\070\052\001\001\000\026" +
                    "\053\117\054\053\055\051\056\046\060\041\061\066\063" +
                    "\047\066\064\067\015\070\052\001\001\000\002\001\001" +
                    "\000\024\054\131\055\051\056\046\060\041\061\066\063" +
                    "\047\066\064\067\015\070\052\001\001\000\024\054\122" +
                    "\055\051\056\046\060\041\061\066\063\047\066\064\067" +
                    "\015\070\052\001\001\000\002\001\001\000\022\055\130" +
                    "\056\046\060\041\061\066\063\047\066\064\067\015\070" +
                    "\052\001\001\000\022\055\127\056\046\060\041\061\066" +
                    "\063\047\066\064\067\015\070\052\001\001\000\022\055" +
                    "\126\056\046\060\041\061\066\063\047\066\064\067\015" +
                    "\070\052\001\001\000\002\001\001\000\002\001\001\000" +
                    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                    "\014\014\146\017\142\066\023\067\015\070\014\001\001" +
                    "\000\002\001\001\000\042\045\150\046\063\047\062\050" +
                    "\061\051\056\052\055\053\054\054\053\055\051\056\046" +
                    "\060\041\061\066\063\047\066\064\067\015\070\052\001" +
                    "\001\000\002\001\001\000\002\001\001\000\022\014\144" +
                    "\016\143\017\142\064\153\065\137\066\023\067\015\070" +
                    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
                    "\001\001\000\002\001\001\000\002\001\001\000\042\045" +
                    "\161\046\063\047\062\050\061\051\056\052\055\053\054" +
                    "\054\053\055\051\056\046\060\041\061\066\063\047\066" +
                    "\064\067\015\070\052\001\001\000\002\001\001\000\002" +
                    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                    "\001\000\042\045\167\046\063\047\062\050\061\051\056" +
                    "\052\055\053\054\054\053\055\051\056\046\060\041\061" +
                    "\066\063\047\066\064\067\015\070\052\001\001\000\002" +
                    "\001\001\000\002\001\001\000\006\067\015\070\172\001" +
                    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                    "\000\002\001\001\000\004\032\210\001\001\000\012\017" +
                    "\203\022\201\067\015\070\202\001\001\000\002\001\001" +
                    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                    "\002\001\001\000\010\017\207\067\015\070\202\001\001" +
                    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                    "\060\011\232\013\216\014\013\016\237\017\225\030\240" +
                    "\031\235\032\241\033\221\034\214\035\233\036\213\037" +
                    "\223\041\230\043\231\044\227\066\023\067\015\070\014" +
                    "\071\212\072\234\073\242\074\222\001\001\000\002\001" +
                    "\001\000\002\001\001\000\002\001\001\000\042\045\302" +
                    "\046\063\047\062\050\061\051\056\052\055\053\054\054" +
                    "\053\055\051\056\046\060\041\061\066\063\047\066\064" +
                    "\067\015\070\052\001\001\000\002\001\001\000\002\001" +
                    "\001\000\042\045\300\046\063\047\062\050\061\051\056" +
                    "\052\055\053\054\054\053\055\051\056\046\060\041\061" +
                    "\066\063\047\066\064\067\015\070\052\001\001\000\002" +
                    "\001\001\000\002\001\001\000\002\001\001\000\042\045" +
                    "\260\046\063\047\062\050\061\051\056\052\055\053\054" +
                    "\054\053\055\051\056\046\060\041\061\066\063\047\066" +
                    "\064\067\015\070\052\001\001\000\002\001\001\000\042" +
                    "\045\252\046\063\047\062\050\061\051\056\052\055\053" +
                    "\054\054\053\055\051\056\046\060\041\061\066\063\047" +
                    "\066\064\067\015\070\052\001\001\000\002\001\001\000" +
                    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                    "\001\001\000\002\001\001\000\060\011\232\013\216\014" +
                    "\013\016\237\017\225\030\251\031\235\032\241\033\221" +
                    "\034\214\035\233\036\213\037\223\041\230\043\231\044" +
                    "\227\066\023\067\015\070\014\071\212\072\234\073\242" +
                    "\074\222\001\001\000\010\017\245\067\015\070\202\001" +
                    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                    "\002\001\001\000\042\045\247\046\063\047\062\050\061" +
                    "\051\056\052\055\053\054\054\053\055\051\056\046\060" +
                    "\041\061\066\063\047\066\064\067\015\070\052\001\001" +
                    "\000\004\032\250\001\001\000\002\001\001\000\002\001" +
                    "\001\000\004\032\253\001\001\000\004\040\255\001\001" +
                    "\000\006\032\257\037\256\001\001\000\002\001\001\000" +
                    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
                    "\042\263\060\262\001\001\000\002\001\001\000\042\045" +
                    "\265\046\063\047\062\050\061\051\056\052\055\053\054" +
                    "\054\053\055\051\056\046\060\041\061\066\063\047\066" +
                    "\064\067\015\070\052\001\001\000\002\001\001\000\002" +
                    "\001\001\000\056\011\232\013\216\014\013\016\237\017" +
                    "\225\031\267\032\241\033\221\034\214\035\233\036\213" +
                    "\037\223\041\230\043\231\044\227\066\023\067\015\070" +
                    "\014\071\212\072\234\073\242\074\222\001\001\000\002" +
                    "\001\001\000\056\011\232\013\216\014\013\016\237\017" +
                    "\225\031\271\032\241\033\221\034\214\035\233\036\213" +
                    "\037\223\041\230\043\231\044\227\066\023\067\015\070" +
                    "\014\071\212\072\234\073\242\074\222\001\001\000\002" +
                    "\001\001\000\002\001\001\000\042\045\274\046\063\047" +
                    "\062\050\061\051\056\052\055\053\054\054\053\055\051" +
                    "\056\046\060\041\061\066\063\047\066\064\067\015\070" +
                    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
                    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                    "\001\000\004\032\303\001\001\000\002\001\001\000\042" +
                    "\045\324\046\063\047\062\050\061\051\056\052\055\053" +
                    "\054\054\053\055\051\056\046\060\041\061\066\063\047" +
                    "\066\064\067\015\070\052\001\001\000\042\045\322\046" +
                    "\063\047\062\050\061\051\056\052\055\053\054\054\053" +
                    "\055\051\056\046\060\041\061\066\063\047\066\064\067" +
                    "\015\070\052\001\001\000\042\045\320\046\063\047\062" +
                    "\050\061\051\056\052\055\053\054\054\053\055\051\056" +
                    "\046\060\041\061\066\063\047\066\064\067\015\070\052" +
                    "\001\001\000\042\045\316\046\063\047\062\050\061\051" +
                    "\056\052\055\053\054\054\053\055\051\056\046\060\041" +
                    "\061\066\063\047\066\064\067\015\070\052\001\001\000" +
                    "\042\045\314\046\063\047\062\050\061\051\056\052\055" +
                    "\053\054\054\053\055\051\056\046\060\041\061\066\063" +
                    "\047\066\064\067\015\070\052\001\001\000\042\045\312" +
                    "\046\063\047\062\050\061\051\056\052\055\053\054\054" +
                    "\053\055\051\056\046\060\041\061\066\063\047\066\064" +
                    "\067\015\070\052\001\001\000\002\001\001\000\002\001" +
                    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
                    "\332\001\001\000\032\011\232\013\335\014\013\016\237" +
                    "\017\012\020\337\025\336\026\333\027\334\066\023\067" +
                    "\015\070\014\001\001\000\002\001\001\000\032\011\232" +
                    "\013\335\014\013\016\237\017\012\020\337\025\344\026" +
                    "\333\027\334\066\023\067\015\070\014\001\001\000\002" +
                    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                    "\001\000\004\021\341\001\001\000\004\032\342\001\001" +
                    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                    "\001\001\000\002\001\001\000\004\006\354\001\001\000" +
                    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SyntacticalAnalyser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SyntacticalAnalyser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SyntacticalAnalyser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    return analyser.next_token();

    }


    private LexicalAnalyser analyser = (LexicalAnalyser) getScanner();

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SyntacticalAnalyser$actions {


  private final SyntacticalAnalyser parser;

  /** Constructor */
  CUP$SyntacticalAnalyser$actions(SyntacticalAnalyser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SyntacticalAnalyser$do_action_part00000000(
    int                        CUP$SyntacticalAnalyser$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticalAnalyser$parser,
    java.util.Stack            CUP$SyntacticalAnalyser$stack,
    int                        CUP$SyntacticalAnalyser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SyntacticalAnalyser$result;

      /* select the action based on the action number */
      switch (CUP$SyntacticalAnalyser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= ImportList DeclarationList 
            {
              ProgramNode RESULT =null;
		List<String> imports = (List<String>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		DeclarationNode declarations = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ProgramNode(declarations, imports); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Program",0, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		RESULT = start_val;
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$SyntacticalAnalyser$parser.done_parsing();
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ImportList ::= ImportList Import 
            {
              List<String> RESULT =null;
		List<String> imports = (List<String>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		String file = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 imports.add(file); RESULT = imports; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ImportList",1, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ImportList ::= 
            {
              List<String> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ImportList",1, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Import ::= IMPORT FilePath END 
            {
              String RESULT =null;
		String path = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = path; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Import",2, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FilePath ::= FilePath DIV Filename 
            {
              String RESULT =null;
		String path = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		String filename = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = path + "/" + filename; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FilePath",3, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FilePath ::= Filename 
            {
              String RESULT =null;
		String filename = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = filename; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FilePath",3, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Filename ::= IDENTIFIER 
            {
              String RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = name; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Filename",4, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Filename ::= GLOBAL 
            {
              String RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = name; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Filename",4, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Filename ::= TYPE 
            {
              String RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = name; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Filename",4, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DeclarationList ::= Declaration DeclarationList 
            {
              DeclarationNode RESULT =null;
		DeclarationNode declaration = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		DeclarationNode declarations = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration.linkedTo(declarations); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("DeclarationList",5, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DeclarationList ::= 
            {
              DeclarationNode RESULT =null;
		 RESULT = null; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("DeclarationList",5, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Declaration ::= GlobalVarConstDeclaration 
            {
              DeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration",6, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Declaration ::= FunctionDeclaration 
            {
              DeclarationNode RESULT =null;
		FunctionDeclarationNode declaration = (FunctionDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration",6, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Declaration ::= ClassDeclaration 
            {
              DeclarationNode RESULT =null;
		ClassDeclarationNode declaration = (ClassDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration",6, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // GlobalVarConstDeclaration ::= VarDeclaration 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalVarConstDeclaration",8, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // GlobalVarConstDeclaration ::= GlobalConstDeclaration END 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalVarConstDeclaration",8, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VarConstDeclaration ::= VarDeclaration 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarConstDeclaration",9, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarConstDeclaration ::= LocalConstDeclaration END 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarConstDeclaration",9, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarDeclaration ::= BaseVarDeclaration END 
            {
              VarDeclarationNode RESULT =null;
		Name declaration = (Name)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new VarDeclarationNode(declaration); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclaration",7, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarDeclaration ::= VarInitDeclaration END 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclaration",7, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BaseVarDeclaration ::= Type IDENTIFIER 
            {
              Name RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new Name(id, type); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("BaseVarDeclaration",13, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarInitDeclaration ::= BaseVarDeclaration ASSIGNMENT Expression 
            {
              VarDeclarationNode RESULT =null;
		Name name = (Name)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		ExpressionNode initialValue = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new VarDeclarationNode(name, initialValue); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarInitDeclaration",10, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VarInitDeclaration ::= ConstructorCallExpression IDENTIFIER 
            {
              VarDeclarationNode RESULT =null;
		ConstructorCallExpressionNode constructor = (ConstructorCallExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = VarDeclarationNode.fromConstructor(constructor, id); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarInitDeclaration",10, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // GlobalConstDeclaration ::= CONST Type GLOBAL ASSIGNMENT Expression 
            {
              VarDeclarationNode RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		ExpressionNode initialValue = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new VarDeclarationNode(new Name(id, type), initialValue, true); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalConstDeclaration",11, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // GlobalConstDeclaration ::= CONST ConstructorCallExpression GLOBAL 
            {
              VarDeclarationNode RESULT =null;
		ConstructorCallExpressionNode constructor = (ConstructorCallExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = VarDeclarationNode.fromConstructor(constructor, id).constant(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalConstDeclaration",11, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LocalConstDeclaration ::= CONST VarInitDeclaration 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration.constant(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("LocalConstDeclaration",12, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FunctionDeclaration ::= BaseVarDeclaration FunctionParameters BlockStatement 
            {
              FunctionDeclarationNode RESULT =null;
		Name name = (Name)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		List<Name> parameters = (List<Name>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		BlockStatementNode block = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionDeclarationNode(name, parameters, block); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionDeclaration",14, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FunctionParameters ::= PARENTH_L PARENTH_R 
            {
              List<Name> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionParameters",15, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FunctionParameters ::= PARENTH_L ParameterList PARENTH_R 
            {
              List<Name> RESULT =null;
		List<Name> parameters = (List<Name>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = parameters; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionParameters",15, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ParameterList ::= BaseVarDeclaration 
            {
              List<Name> RESULT =null;
		Name parameter = (Name)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ArrayList<>(Collections.singletonList(parameter)); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ParameterList",16, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ParameterList ::= ParameterList COMMA BaseVarDeclaration 
            {
              List<Name> RESULT =null;
		List<Name> parameters = (List<Name>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		Name parameter = (Name)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 parameters.add(parameter); RESULT = parameters; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ParameterList",16, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassDeclaration ::= CLASS TypeName ClassBlock 
            {
              ClassDeclarationNode RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		DeclarationNode block = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ClassDeclarationNode(name, block); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",17, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassBlock ::= CURLY_L ClassElementList CURLY_R 
            {
              DeclarationNode RESULT =null;
		DeclarationNode contents = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = contents; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassBlock",18, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ClassElementList ::= ClassElement ClassElementList 
            {
              DeclarationNode RESULT =null;
		DeclarationNode element = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		DeclarationNode elements = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = element.linkedTo(elements); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElementList",19, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ClassElementList ::= 
            {
              DeclarationNode RESULT =null;
		 RESULT = null; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElementList",19, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ClassElement ::= VarConstDeclaration 
            {
              DeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement",20, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ClassElement ::= ConstructorDeclaration 
            {
              DeclarationNode RESULT =null;
		ConstructorDeclarationNode declaration = (ConstructorDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement",20, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ClassElement ::= FunctionDeclaration 
            {
              DeclarationNode RESULT =null;
		FunctionDeclarationNode declaration = (FunctionDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement",20, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ConstructorDeclaration ::= CONSTRUCTOR FunctionParameters BlockStatement 
            {
              ConstructorDeclarationNode RESULT =null;
		List<Name> parameters = (List<Name>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		BlockStatementNode block = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ConstructorDeclarationNode(parameters, block); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstructorDeclaration",21, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // StatementList ::= Statement StatementList 
            {
              StatementNode RESULT =null;
		StatementNode statement = (StatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		StatementNode statements = (StatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement.linkedTo(statements); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("StatementList",22, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // StatementList ::= 
            {
              StatementNode RESULT =null;
		 RESULT = null; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("StatementList",22, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Statement ::= VarDeclarationStatement 
            {
              StatementNode RESULT =null;
		VarDeclarationStatementNode statement = (VarDeclarationStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",23, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Statement ::= AssignmentStatement 
            {
              StatementNode RESULT =null;
		AssignmentStatementNode statement = (AssignmentStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",23, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Statement ::= FunctionCallStatement 
            {
              StatementNode RESULT =null;
		FunctionCallStatementNode statement = (FunctionCallStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",23, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Statement ::= ReturnStatement 
            {
              StatementNode RESULT =null;
		ReturnStatementNode statement = (ReturnStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",23, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Statement ::= IfElseStatement 
            {
              StatementNode RESULT =null;
		IfElseStatementNode statement = (IfElseStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",23, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Statement ::= SwitchStatement 
            {
              StatementNode RESULT =null;
		SwitchStatementNode statement = (SwitchStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",23, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Statement ::= WhileStatement 
            {
              StatementNode RESULT =null;
		WhileStatementNode statement = (WhileStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",23, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Statement ::= ForStatement 
            {
              StatementNode RESULT =null;
		ForStatementNode statement = (ForStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",23, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Statement ::= BlockStatement 
            {
              StatementNode RESULT =null;
		BlockStatementNode statement = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",23, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BlockStatement ::= CURLY_L StatementList CURLY_R 
            {
              BlockStatementNode RESULT =null;
		StatementNode root = (StatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new BlockStatementNode(root); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("BlockStatement",24, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VarDeclarationStatement ::= VarConstDeclaration 
            {
              VarDeclarationStatementNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration.asStatement(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclarationStatement",25, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // AssignmentStatement ::= Designator ASSIGNMENT Expression END 
          {
              AssignmentStatementNode RESULT = null;
              Designator designator = (Designator) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
              ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
              RESULT = new AssignmentStatementNode(designator, expression);
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AssignmentStatement", 26, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 54: // AssignmentStatement ::= Designator PLUS_ASSIGN Expression END
            {
                AssignmentStatementNode RESULT = null;
                Designator designator = (Designator) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = AssignmentStatementNode.fromSyntacticSugar(designator, "_plus", expression);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AssignmentStatement", 26, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 55: // AssignmentStatement ::= Designator MINUS_ASSIGN Expression END
            {
                AssignmentStatementNode RESULT = null;
                Designator designator = (Designator) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = AssignmentStatementNode.fromSyntacticSugar(designator, "_minus", expression);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AssignmentStatement", 26, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 56: // AssignmentStatement ::= Designator MULT_ASSIGN Expression END
            {
                AssignmentStatementNode RESULT = null;
                Designator designator = (Designator) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = AssignmentStatementNode.fromSyntacticSugar(designator, "_mult", expression);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AssignmentStatement", 26, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 57: // AssignmentStatement ::= Designator DIV_ASSIGN Expression END
            {
                AssignmentStatementNode RESULT = null;
                Designator designator = (Designator) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = AssignmentStatementNode.fromSyntacticSugar(designator, "_div", expression);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AssignmentStatement", 26, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 58: // AssignmentStatement ::= Designator MOD_ASSIGN Expression END
            {
                AssignmentStatementNode RESULT = null;
                Designator designator = (Designator) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = AssignmentStatementNode.fromSyntacticSugar(designator, "_mod", expression);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AssignmentStatement", 26, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 59: // ReturnStatement ::= RETURN END
            {
                ReturnStatementNode RESULT = null;
                RESULT = new ReturnStatementNode();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ReturnStatement", 28, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 60: // ReturnStatement ::= RETURN Expression END
            {
              ReturnStatementNode RESULT =null;
		ExpressionNode expression = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new ReturnStatementNode(expression); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",28, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 61: // IfElseStatement ::= IF Expression BlockStatement ElsePartStatement
            {
              IfElseStatementNode RESULT =null;
		ExpressionNode condition = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		BlockStatementNode ifBlock = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		StatementNode elsePart = (StatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new IfElseStatementNode(condition, ifBlock, elsePart); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("IfElseStatement",29, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 62: // ElsePartStatement ::= ELSE BlockStatement
            {
              StatementNode RESULT =null;
		BlockStatementNode elseBlock = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = elseBlock; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ElsePartStatement",30, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 63: // ElsePartStatement ::= ELSE IfElseStatement
            {
              StatementNode RESULT =null;
		IfElseStatementNode ifElse = (IfElseStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = ifElse; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ElsePartStatement",30, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 64: // ElsePartStatement ::=
            {
              StatementNode RESULT =null;
		 RESULT = null; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ElsePartStatement",30, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 65: // SwitchStatement ::= SWITCH Expression CURLY_L SwitchCasesStatement CURLY_R
            {
              SwitchStatementNode RESULT =null;
		ExpressionNode expression = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		Map<ExpressionNode,StatementNode> cases = (Map<ExpressionNode,StatementNode>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new SwitchStatementNode(expression, cases); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("SwitchStatement",31, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 66: // SwitchCasesStatement ::= ConstantExpression ARROW Statement
            {
              Map<ExpressionNode,StatementNode> RESULT =null;
		ConstantExpressionNode expression = (ConstantExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		StatementNode statement = (StatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new HashMap<>(Collections.singletonMap(expression, statement)); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("SwitchCasesStatement",32, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 67: // SwitchCasesStatement ::= SwitchCasesStatement Expression ARROW Statement
            {
              Map<ExpressionNode,StatementNode> RESULT =null;
		Map<ExpressionNode,StatementNode> cases = (Map<ExpressionNode,StatementNode>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		ExpressionNode expression = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		StatementNode statement = (StatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 cases.put(expression, statement); RESULT = cases; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("SwitchCasesStatement",32, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 68: // WhileStatement ::= WHILE Expression BlockStatement
            {
              WhileStatementNode RESULT =null;
		ExpressionNode condition = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		BlockStatementNode whileBlock = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new WhileStatementNode(condition, whileBlock); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("WhileStatement",33, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 69: // ForStatement ::= FOR BaseVarDeclaration IN Expression BlockStatement
            {
              ForStatementNode RESULT =null;
		Name variable = (Name)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		ExpressionNode iterable = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		BlockStatementNode forBlock = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ForStatementNode(variable, iterable, forBlock); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ForStatement",34, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 70: // Expression ::= Expression0
            {
                ExpressionNode RESULT = null;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression", 35, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 71: // Expression8 ::= PARENTH_L Expression0 PARENTH_R
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = first;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression8", 44, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 72: // Expression8 ::= ConstantExpression
            {
                ExpressionNode RESULT = null;
                ConstantExpressionNode first = (ConstantExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = first;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression8", 44, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 73: // Expression8 ::= ListConstructorExpression
            {
                ExpressionNode RESULT = null;
                ListConstructorExpressionNode expression = (ListConstructorExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression8", 44, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 74: // Expression8 ::= AnonymousObjectConstructorExpression
            {
                ExpressionNode RESULT = null;
                AnonymousObjectConstructorExpressionNode expression = (AnonymousObjectConstructorExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression8", 44, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 75: // Expression8 ::= ConstructorCallExpression
            {
                ExpressionNode RESULT = null;
                ConstructorCallExpressionNode expression = (ConstructorCallExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression8", 44, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 76: // Expression7 ::= PLUS Expression7
            {
              ExpressionNode RESULT =null;
		String plus = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionCallExpressionNode(new PointExpressionNode(first,"_plus")
                , new ArrayList<>()); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression7",43, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 77: // Expression7 ::= MINUS Expression7
            {
              ExpressionNode RESULT =null;
		String minus = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionCallExpressionNode(new PointExpressionNode(first,"_minus")
                , new ArrayList<>()); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression7",43, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 78: // Expression7 ::= NOT Expression7
            {
              ExpressionNode RESULT =null;
		String not = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionCallExpressionNode(new PointExpressionNode(first,"_not"),
                new ArrayList<>()); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression7",43, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 79: // Expression7 ::= Expression8
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = first; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression7",43, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 80: // Expression6 ::= Expression6 MULT Expression7
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		String mult = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionCallExpressionNode(new PointExpressionNode(first,"_mult"),
                                new ArrayList<>(Collections.singletonList(last))); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression6",42, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 81: // Expression6 ::= Expression6 DIV Expression7
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		String div = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionCallExpressionNode(new PointExpressionNode(first,"_div"),
                                                new ArrayList<>(Collections.singletonList(last))); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression6",42, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 82: // Expression6 ::= Expression6 MOD Expression7
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		String mod = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionCallExpressionNode(new PointExpressionNode(first,"_mod"),
                                                new ArrayList<>(Collections.singletonList(last))); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression6",42, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 83: // Expression6 ::= Expression7
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = first; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression6",42, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 84: // Expression5 ::= Expression5 PLUS Expression6
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		String plus = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionCallExpressionNode(new PointExpressionNode(first,"_plus"),
                                                new ArrayList<>(Collections.singletonList(last))); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression5",41, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 85: // Expression5 ::= Expression5 MINUS Expression6
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		String minus = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionCallExpressionNode(new PointExpressionNode(first,"_minus"),
                                                new ArrayList<>(Collections.singletonList(last))); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression5",41, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 86: // Expression5 ::= Expression6
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = first; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression5",41, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 87: // Expression4 ::= Expression4 GT Expression5
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		String gt = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionCallExpressionNode(new PointExpressionNode(first,"_gt"),
                                                new ArrayList<>(Collections.singletonList(last))); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression4",40, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 88: // Expression4 ::= Expression4 GE Expression5
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		String ge = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionCallExpressionNode(new PointExpressionNode(first,"_ge"),
                                                new ArrayList<>(Collections.singletonList(last))); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression4",40, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 89: // Expression4 ::= Expression4 LT Expression5
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		String lt = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionCallExpressionNode(new PointExpressionNode(first,"_lt"),
                                                new ArrayList<>(Collections.singletonList(last))); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression4",40, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 90: // Expression4 ::= Expression4 LE Expression5
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		String le = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionCallExpressionNode(new PointExpressionNode(first,"_le"),
                                                new ArrayList<>(Collections.singletonList(last))); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression4",40, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 91: // Expression4 ::= Expression5
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = first; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression4",40, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 92: // Expression3 ::= Expression3 EQUALS Expression4
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		String equals = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionCallExpressionNode(new PointExpressionNode(first,"_equals"),
                                                new ArrayList<>(Collections.singletonList(last))); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression3",39, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 93: // Expression3 ::= Expression3 NEQ Expression4
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		String neq = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionCallExpressionNode(new PointExpressionNode(first,"_neq"),
                                                new ArrayList<>(Collections.singletonList(last))); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression3",39, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 94: // Expression3 ::= Expression3 IDENTITY Expression4
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		String identity = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionCallExpressionNode(new PointExpressionNode(first,"_id"),
                                                new ArrayList<>(Collections.singletonList(last))); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression3",39, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 95: // Expression3 ::= Expression4
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = first; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression3",39, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 96: // Expression2 ::= Expression2 AND Expression3
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		String and = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionCallExpressionNode(new PointExpressionNode(first,"_and"),
                                                new ArrayList<>(Collections.singletonList(last))); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression2",38, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 97: // Expression2 ::= Expression3
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = first; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression2",38, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 98: // Expression1 ::= Expression1 OR Expression2
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		String or = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionCallExpressionNode(new PointExpressionNode(first,"_or"),
                                                new ArrayList<>(Collections.singletonList(last))); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression1",37, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 99: // Expression1 ::= Expression2
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = first; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression1",37, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 100: // Expression0 ::= Expression0 ELLIPSIS Expression1
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		String ellipsis = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionCallExpressionNode(new PointExpressionNode(first,"_to"),
                                                new ArrayList<>(Collections.singletonList(last))); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression0",36, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 101: // Expression0 ::= Expression1
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = first;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression0", 36, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 102: // VariableExpression ::= IDENTIFIER
            {
                VariableExpressionNode RESULT = null;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new VariableExpressionNode(id);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VariableExpression", 45, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 103: // VariableExpression ::= GLOBAL
            {
                VariableExpressionNode RESULT = null;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new VariableExpressionNode(id);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VariableExpression", 45, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 104: // VariableExpression ::= THIS
            {
                VariableExpressionNode RESULT = null;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new VariableExpressionNode(id);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VariableExpression", 45, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 105: // ConstantExpression ::= INT
            {
                ConstantExpressionNode RESULT = null;
                String n = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = ConstantExpressionNode.fromInt(n);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression", 46, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 106: // ConstantExpression ::= REAL
            {
              ConstantExpressionNode RESULT =null;
		String x = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = ConstantExpressionNode.fromFloat(x);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression", 46, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 107: // ConstantExpression ::= TRUE
            {
              ConstantExpressionNode RESULT =null;
		String t = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = ConstantExpressionNode.fromBoolean(t);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression", 46, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 108: // ConstantExpression ::= FALSE
            {
              ConstantExpressionNode RESULT =null;
		String f = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = ConstantExpressionNode.fromBoolean(f);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression", 46, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 109: // ConstantExpression ::= CHAR
            {
              ConstantExpressionNode RESULT =null;
		String c = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = ConstantExpressionNode.fromChar(c);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression", 46, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 110: // ConstantExpression ::= NOTHING
            {
              ConstantExpressionNode RESULT =null;
                RESULT = ConstantExpressionNode.ofNothing();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression", 46, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 111: // ConstantExpression ::= NULL
            {
              ConstantExpressionNode RESULT =null;
                RESULT = ConstantExpressionNode.ofNull();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression", 46, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 112: // ConstantExpression ::= UNDERSCORE
            {
              ConstantExpressionNode RESULT =null;
                RESULT = ConstantExpressionNode.ofNull();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression", 46, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 113: // ListConstructorExpression ::= STRING
            {
              ListConstructorExpressionNode RESULT =null;
		String str = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = ListConstructorExpressionNode.fromString(str);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListConstructorExpression", 47, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 114: // ListConstructorExpression ::= SQUARE_L SQUARE_R
            {
              ListConstructorExpressionNode RESULT =null;
                RESULT = new ListConstructorExpressionNode();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListConstructorExpression", 47, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 115: // ListConstructorExpression ::= SQUARE_L ListElements SQUARE_R
            {
              ListConstructorExpressionNode RESULT =null;
		List<ExpressionNode> elements = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
                RESULT = new ListConstructorExpressionNode(elements);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListConstructorExpression", 47, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 116: // ListElements ::= Expression
            {
              List<ExpressionNode> RESULT =null;
		ExpressionNode element = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ArrayList<>(Collections.singletonList(element));
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListElements", 48, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 117: // ListElements ::= ListElements COMMA Expression
            {
              List<ExpressionNode> RESULT =null;
		List<ExpressionNode> elements = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		ExpressionNode element = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 elements.add(element);
                RESULT = elements;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListElements", 48, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 118: // AnonymousObjectConstructorExpression ::= CURLY_L CURLY_R
            {
              AnonymousObjectConstructorExpressionNode RESULT =null;
                RESULT = new AnonymousObjectConstructorExpressionNode();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectConstructorExpression", 49, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 119: // AnonymousObjectConstructorExpression ::= CURLY_L AnonymousObjectFields CURLY_R
            {
              AnonymousObjectConstructorExpressionNode RESULT =null;
		VarDeclarationNode fields = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
                RESULT = new AnonymousObjectConstructorExpressionNode(fields);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectConstructorExpression", 49, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 120: // AnonymousObjectFields ::= AnonymousObjectField
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode field = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = field;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectFields", 50, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 121: // AnonymousObjectFields ::= AnonymousObjectField COMMA AnonymousObjectFields
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode field = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		VarDeclarationNode fields = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 field.linkedTo(fields);
                RESULT = field;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectFields", 50, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 122: // AnonymousObjectField ::= VarInitDeclaration
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode field = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = field;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectField", 51, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 123: // AnonymousObjectField ::= LocalConstDeclaration
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode field = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = field;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectField", 51, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 124: // ConstructorCallExpression ::= Type Arguments
            {
              ConstructorCallExpressionNode RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		List<ExpressionNode> arguments = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ConstructorCallExpressionNode(type, arguments);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstructorCallExpression", 52, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 125: // Type ::= TypeName
            {
              Type RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new Type(name);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Type", 54, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 126: // Type ::= TypeName LT Type GT
            {
              Type RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		Type param = (Type)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
                RESULT = new Type(name, param);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Type", 54, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 127: // TypeName ::= TYPE
            {
              String RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = name;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("TypeName", 53, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 128: // TypeName ::= GLOBAL
            {
              String RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = name;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("TypeName", 53, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 129: // Designator ::= IDENTIFIER
            {
              Designator RESULT =null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Designator", 55, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 130: // Designator ::= ArrayAccess
            {
              Designator RESULT =null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Designator", 55, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 131: // Designator ::= FieldAccess
            {
              Designator RESULT =null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Designator", 55, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 132: // ArrayAccess ::= DesignableExpression SQUARE_L Expression SQUARE_R
            {
              ExpressionNode RESULT =null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ArrayAccess", 56, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 133: // FieldAccess ::= DesignableExpression POINT IDENTIFIER
            {
              ExpressionNode RESULT =null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FieldAccess", 57, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 134: // DesignableExpression ::= IDENTIFIER
            {
              ExpressionNode RESULT =null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("DesignableExpression", 58, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 135: // Arguments ::= PARENTH_L PARENTH_R
            {
              List<ExpressionNode> RESULT =null;
                RESULT = new ArrayList<>();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Arguments", 59, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 136: // Arguments ::= PARENTH_L ArgumentList PARENTH_R
            {
              List<ExpressionNode> RESULT =null;
		List<ExpressionNode> arguments = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
                RESULT = arguments;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Arguments", 59, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 137: // ArgumentList ::= Expression
            {
              List<ExpressionNode> RESULT =null;
		ExpressionNode argument = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ArrayList<>(Collections.singletonList(argument));
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ArgumentList", 60, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 138: // ArgumentList ::= ArgumentList COMMA Expression
            {
              List<ExpressionNode> RESULT =null;
		List<ExpressionNode> arguments = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		ExpressionNode argument = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 arguments.add(argument);
                RESULT = arguments;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ArgumentList", 60, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SyntacticalAnalyser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SyntacticalAnalyser$do_action(
    int                        CUP$SyntacticalAnalyser$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticalAnalyser$parser,
    java.util.Stack            CUP$SyntacticalAnalyser$stack,
    int                        CUP$SyntacticalAnalyser$top)
    throws java.lang.Exception
    {
              return CUP$SyntacticalAnalyser$do_action_part00000000(
                               CUP$SyntacticalAnalyser$act_num,
                               CUP$SyntacticalAnalyser$parser,
                               CUP$SyntacticalAnalyser$stack,
                               CUP$SyntacticalAnalyser$top);
    }
}

