
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun Apr 05 14:54:57 CEST 2020
//----------------------------------------------------

package syntactical;

import lexical.LexicalAnalyser;

/**
 * CUP v0.11b beta 20140220 generated parser.
 *
 * @version Sun Apr 05 14:54:57 CEST 2020
 */
public class SyntacticalAnalyser extends java_cup.runtime.lr_parser {

    /** Default constructor. */
    public SyntacticalAnalyser() {
        super();
    }

    /** Constructor which sets the default scanner. */
    public SyntacticalAnalyser(java_cup.runtime.Scanner s) {
        super(s);
    }

    /** Constructor which sets the default scanner. */
    public SyntacticalAnalyser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /** Production table. */
    protected static final short _production_table[][] =
            unpackFromStrings(new String[]{
                    "\000\055\000\002\002\004\000\002\002\004\000\002\003" +
                            "\005\000\002\003\002\000\002\004\004\000\002\004\002" +
                            "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
                            "\002\006\004\000\002\006\004\000\002\007\003\000\002" +
                            "\007\004\000\002\010\003\000\002\010\004\000\002\011" +
                            "\004\000\002\012\005\000\002\013\006\000\002\014\004" +
                            "\000\002\015\005\000\002\016\004\000\002\016\005\000" +
                            "\002\017\003\000\002\017\005\000\002\020\005\000\002" +
                            "\021\005\000\002\023\004\000\002\023\002\000\002\024" +
                            "\003\000\002\024\003\000\002\024\003\000\002\022\005" +
                            "\000\002\025\005\000\002\026\004\000\002\026\002\000" +
                            "\002\027\003\000\002\027\003\000\002\030\003\000\002" +
                            "\031\004\000\002\032\005\000\002\033\004\000\002\033" +
                            "\004\000\002\035\003\000\002\036\003\000\002\037\003" +
                            ""});

    /** Access to production table. */
    public short[][] production_table() {
        return _production_table;
    }

    /** Parse-action table. */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[]{
                    "\000\115\000\014\002\ufffe\023\ufffe\024\005\025\ufffe\031" +
                            "\ufffe\001\002\000\004\002\117\001\002\000\004\071\115" +
                            "\001\002\000\012\002\ufffc\023\023\025\022\031\020\001" +
                            "\002\000\004\031\114\001\002\000\004\071\112\001\002" +
                            "\000\012\002\ufff9\023\ufff9\025\ufff9\031\ufff9\001\002\000" +
                            "\012\002\ufffc\023\023\025\022\031\020\001\002\000\012" +
                            "\002\ufff6\023\ufff6\025\ufff6\031\ufff6\001\002\000\004\002" +
                            "\001\001\002\000\010\032\051\065\046\071\101\001\002" +
                            "\000\012\002\ufffb\023\ufffb\025\ufffb\031\ufffb\001\002\000" +
                            "\012\002\ufffa\023\ufffa\025\ufffa\031\ufffa\001\002\000\006" +
                            "\031\uffd7\036\uffd7\001\002\000\004\071\106\001\002\000" +
                            "\004\031\020\001\002\000\004\031\024\001\002\000\004" +
                            "\065\uffd5\001\002\000\004\065\026\001\002\000\002\001" +
                            "\002\000\004\071\ufff0\001\002\000\004\036\031\001\002" +
                            "\000\012\023\043\026\042\031\020\037\uffe6\001\002\000" +
                            "\012\002\uffe9\023\uffe9\025\uffe9\031\uffe9\001\002\000\012" +
                            "\023\043\026\042\031\020\037\uffe6\001\002\000\012\023" +
                            "\uffe4\026\uffe4\031\uffe4\037\uffe4\001\002\000\014\010\ufff4" +
                            "\023\ufff4\026\ufff4\031\ufff4\037\ufff4\001\002\000\012\023" +
                            "\uffe5\026\uffe5\031\uffe5\037\uffe5\001\002\000\004\071\104" +
                            "\001\002\000\004\037\103\001\002\000\012\023\uffe3\026" +
                            "\uffe3\031\uffe3\037\uffe3\001\002\000\004\032\051\001\002" +
                            "\000\004\031\020\001\002\000\004\065\046\001\002\000" +
                            "\004\071\uffef\001\002\000\002\001\002\000\004\071\ufff1" +
                            "\001\002\000\004\036\061\001\002\000\006\031\020\033" +
                            "\054\001\002\000\006\033\056\043\055\001\002\000\006" +
                            "\033\uffeb\043\uffeb\001\002\000\004\036\uffed\001\002\000" +
                            "\004\031\020\001\002\000\004\036\uffec\001\002\000\006" +
                            "\033\uffea\043\uffea\001\002\000\012\023\uffe2\026\uffe2\031" +
                            "\uffe2\037\uffe2\001\002\000\012\010\067\023\043\031\020" +
                            "\037\uffdf\001\002\000\004\037\102\001\002\000\012\010" +
                            "\uffde\023\uffde\031\uffde\037\uffde\001\002\000\012\010\uffdc" +
                            "\023\uffdc\031\uffdc\037\uffdc\001\002\000\006\065\046\071" +
                            "\101\001\002\000\004\011\075\001\002\000\002\001\002" +
                            "\000\012\010\067\023\043\031\020\037\uffdf\001\002\000" +
                            "\012\010\uffdd\023\uffdd\031\uffdd\037\uffdd\001\002\000\004" +
                            "\037\uffe0\001\002\000\004\036\061\001\002\000\004\011" +
                            "\uffda\001\002\000\006\010\067\036\061\001\002\000\012" +
                            "\010\uffdb\023\uffdb\031\uffdb\037\uffdb\001\002\000\012\010" +
                            "\uffd8\023\uffd8\031\uffd8\037\uffd8\001\002\000\012\010\uffd9" +
                            "\023\uffd9\031\uffd9\037\uffd9\001\002\000\020\002\ufff8\010" +
                            "\ufff8\023\ufff8\025\ufff8\026\ufff8\031\ufff8\037\ufff8\001\002" +
                            "\000\022\002\uffe1\010\uffe1\011\uffe1\023\uffe1\025\uffe1\026" +
                            "\uffe1\031\uffe1\037\uffe1\001\002\000\012\002\uffe8\023\uffe8" +
                            "\025\uffe8\031\uffe8\001\002\000\014\010\ufff3\023\ufff3\026" +
                            "\ufff3\031\ufff3\037\ufff3\001\002\000\004\037\uffe7\001\002" +
                            "\000\020\002\ufff7\010\ufff7\023\ufff7\025\ufff7\026\ufff7\031" +
                            "\ufff7\037\ufff7\001\002\000\004\036\061\001\002\000\016" +
                            "\002\uffee\023\uffee\025\uffee\026\uffee\031\uffee\037\uffee\001" +
                            "\002\000\004\002\ufffd\001\002\000\012\002\ufff5\023\ufff5" +
                            "\025\ufff5\031\ufff5\001\002\000\014\032\ufff2\033\ufff2\043" +
                            "\ufff2\065\ufff2\071\ufff2\001\002\000\014\032\uffd6\033\uffd6" +
                            "\043\uffd6\065\uffd6\071\uffd6\001\002\000\014\002\ufffe\023" +
                            "\ufffe\024\005\025\ufffe\031\ufffe\001\002\000\012\002\uffff" +
                            "\023\uffff\025\uffff\031\uffff\001\002\000\004\002\000\001" +
                            "\002"});

    /** Access to parse-action table. */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table. */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[]{
                    "\000\115\000\006\002\003\003\005\001\001\000\002\001" +
                            "\001\000\002\001\001\000\026\004\013\005\011\006\012" +
                            "\007\015\011\014\012\020\013\007\015\016\020\010\035" +
                            "\006\001\001\000\004\036\112\001\001\000\002\001\001" +
                            "\000\002\001\001\000\026\004\110\005\011\006\012\007" +
                            "\015\011\014\012\020\013\007\015\016\020\010\035\006" +
                            "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
                            "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\004\035\027\001\001\000" +
                            "\004\037\024\001\001\000\002\001\001\000\002\001\001" +
                            "\000\004\034\026\001\001\000\002\001\001\000\004\021" +
                            "\031\001\001\000\026\006\034\010\035\011\014\012\020" +
                            "\014\036\015\040\022\033\023\037\024\032\035\006\001" +
                            "\001\000\002\001\001\000\026\006\034\010\035\011\014" +
                            "\012\020\014\036\015\040\022\033\023\104\024\032\035" +
                            "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\004\016\047\001\001\000\010\011\043\012\044" +
                            "\035\006\001\001\000\002\001\001\000\002\001\001\000" +
                            "\004\034\046\001\001\000\002\001\001\000\004\025\057" +
                            "\001\001\000\010\011\052\017\051\035\006\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
                            "\011\056\035\006\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\030\006\034\010\063\011\064" +
                            "\012\020\014\036\026\061\027\067\030\062\031\070\032" +
                            "\065\035\006\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\004\033\075\001" +
                            "\001\000\004\034\072\001\001\000\030\006\034\010\063" +
                            "\011\064\012\020\014\036\026\071\027\067\030\062\031" +
                            "\070\032\065\035\006\001\001\000\002\001\001\000\002" +
                            "\001\001\000\004\025\073\001\001\000\002\001\001\000" +
                            "\010\025\077\031\076\032\065\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\004\025\107\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\004\003\115\001\001\000" +
                            "\002\001\001\000\002\001\001"});

    /** Access to <code>reduce_goto</code> table. */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /** Instance of action encapsulation class. */
    protected CUP$SyntacticalAnalyser$actions action_obj;

    /** Action encapsulation object initializer. */
    protected void init_actions() {
      action_obj = new CUP$SyntacticalAnalyser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SyntacticalAnalyser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    LexicalAnalyser analyser = (LexicalAnalyser) getScanner();

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
  return getScanner().next_token(); 
    }

 /* TODO ?? */ 
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SyntacticalAnalyser$actions {

 /* TODO tree root declaration */ 
  private final SyntacticalAnalyser parser;

  /** Constructor */
  CUP$SyntacticalAnalyser$actions(SyntacticalAnalyser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SyntacticalAnalyser$do_action_part00000000(
    int                        CUP$SyntacticalAnalyser$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticalAnalyser$parser,
    java.util.Stack            CUP$SyntacticalAnalyser$stack,
    int                        CUP$SyntacticalAnalyser$top)
    throws java.lang.Exception {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SyntacticalAnalyser$result;

      /* select the action based on the action number */
      switch (CUP$SyntacticalAnalyser$act_num) {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= ImportList DeclarationList 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Program", 0, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
          {
              Object RESULT = null;
              Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
              RESULT = start_val;
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("$START", 0, RESULT);
          }
          /* ACCEPT */
          CUP$SyntacticalAnalyser$parser.done_parsing();
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ImportList ::= IMPORT END ImportList 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ImportList", 1, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ImportList ::= 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ImportList", 1, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclarationList ::= Declaration DeclarationList 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("DeclarationList", 2, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DeclarationList ::= 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("DeclarationList", 2, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Declaration ::= GlobalVarConstDeclaration 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration", 3, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Declaration ::= FunctionDeclaration 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration", 3, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Declaration ::= ClassDeclaration 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration", 3, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarDeclaration ::= BaseVarDeclaration END 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclaration", 4, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarDeclaration ::= VarInitDeclaration END 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclaration", 4, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // GlobalVarConstDeclaration ::= VarDeclaration 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalVarConstDeclaration", 5, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // GlobalVarConstDeclaration ::= GlobalConstDeclaration END 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalVarConstDeclaration", 5, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VarConstDeclaration ::= VarDeclaration 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarConstDeclaration", 6, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VarConstDeclaration ::= LocalConstDeclaration END 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarConstDeclaration", 6, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BaseVarDeclaration ::= Type VarId 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("BaseVarDeclaration", 7, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VarInitDeclaration ::= BaseVarDeclaration ASSIGNMENT Expression 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarInitDeclaration", 8, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // GlobalConstDeclaration ::= CONST GlobalConstId ASSIGNMENT Expression 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalConstDeclaration", 9, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LocalConstDeclaration ::= CONST VarInitDeclaration 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("LocalConstDeclaration", 10, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FunctionDeclaration ::= BaseVarDeclaration FunctionParameters Block 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionDeclaration", 11, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FunctionParameters ::= PARENTH_L PARENTH_R 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionParameters", 12, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FunctionParameters ::= PARENTH_L ParameterList PARENTH_R 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionParameters", 12, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ParameterList ::= BaseVarDeclaration 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ParameterList", 13, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ParameterList ::= ParameterList COMMA BaseVarDeclaration 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ParameterList", 13, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ClassDeclaration ::= CLASS Type ClassBlock 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration", 14, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ClassBlock ::= CURLY_L ClassElementList CURLY_R 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassBlock", 15, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ClassElementList ::= ClassElement ClassElementList 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElementList", 17, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ClassElementList ::= 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElementList", 17, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassElement ::= VarConstDeclaration 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement", 18, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassElement ::= ConstructorDeclaration 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement", 18, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassElement ::= FunctionDeclaration 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement", 18, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ConstructorDeclaration ::= CONSTRUCTOR FunctionParameters Block 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstructorDeclaration", 16, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Block ::= CURLY_L StatementList CURLY_R 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Block", 19, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // StatementList ::= Statement StatementList 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("StatementList", 20, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // StatementList ::= 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("StatementList", 20, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Statement ::= VarDeclarationStatement 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement", 21, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Statement ::= IfElseStatement 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement", 21, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VarDeclarationStatement ::= VarConstDeclaration 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclarationStatement", 22, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IfElseStatement ::= IfStatement ElseStatement 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("IfElseStatement", 23, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IfStatement ::= IF Expression Block 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("IfStatement", 24, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ElseStatement ::= ELSE Block 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ElseStatement", 25, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ElseStatement ::= ELSE IfElseStatement 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ElseStatement", 25, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Type ::= IDENTIFIER 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Type", 27, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VarId ::= IDENTIFIER 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarId", 28, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // GlobalConstId ::= IDENTIFIER 
          {
              Object RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalConstId", 29, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /* . . . . . .*/
          default:
              throw new Exception(
                      "Invalid action number " + CUP$SyntacticalAnalyser$act_num + "found in internal parse table");

      }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SyntacticalAnalyser$do_action(
    int                        CUP$SyntacticalAnalyser$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticalAnalyser$parser,
    java.util.Stack            CUP$SyntacticalAnalyser$stack,
    int                        CUP$SyntacticalAnalyser$top)
    throws java.lang.Exception
    {
              return CUP$SyntacticalAnalyser$do_action_part00000000(
                               CUP$SyntacticalAnalyser$act_num,
                               CUP$SyntacticalAnalyser$parser,
                               CUP$SyntacticalAnalyser$stack,
                               CUP$SyntacticalAnalyser$top);
    }
}

