
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun Apr 26 12:13:26 CEST 2020
//----------------------------------------------------

package syntactical;

import lexical.LexicalAnalyser;
import syntactical.ast.*;

import java.util.*;

/**
 * CUP v0.11b beta 20140220 generated parser.
 *
 * @version Sun Apr 26 12:13:26 CEST 2020
 */
public class SyntacticalAnalyser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SyntacticalAnalyser() {super();}

  /** Constructor which sets the default scanner. */
  public SyntacticalAnalyser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SyntacticalAnalyser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
            "\000\134\000\002\002\004\000\002\002\004\000\002\003" +
                    "\004\000\002\003\002\000\002\004\005\000\002\005\005" +
                    "\000\002\005\003\000\002\006\004\000\002\006\002\000" +
                    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
                    "\011\003\000\002\011\004\000\002\012\003\000\002\012" +
                    "\004\000\002\010\004\000\002\010\004\000\002\016\004" +
                    "\000\002\013\005\000\002\014\007\000\002\015\004\000" +
                    "\002\017\005\000\002\020\004\000\002\020\005\000\002" +
                    "\021\003\000\002\021\005\000\002\022\005\000\002\023" +
                    "\005\000\002\024\004\000\002\024\002\000\002\025\003" +
                    "\000\002\025\003\000\002\025\003\000\002\026\005\000" +
    "\002\027\004\000\002\027\002\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
                    "\000\002\030\003\000\002\031\005\000\002\032\003\000" +
                    "\002\033\006\000\002\034\005\000\002\035\004\000\002" +
                    "\035\005\000\002\036\003\000\002\036\005\000\002\037" +
                    "\004\000\002\037\005\000\002\040\006\000\002\041\004" +
                    "\000\002\041\004\000\002\041\002\000\002\042\007\000" +
                    "\002\043\005\000\002\043\006\000\002\044\005\000\002" +
                    "\045\007\000\002\046\003\000\002\046\003\000\002\046" +
                    "\003\000\002\047\003\000\002\047\003\000\002\047\003" +
                    "\000\002\047\003\000\002\047\003\000\002\047\003\000" +
                    "\002\047\003\000\002\047\003\000\002\050\003\000\002" +
                    "\050\004\000\002\050\005\000\002\051\003\000\002\051" +
                    "\005\000\002\056\003\000\002\056\006\000\002\052\003" +
                    "\000\002\053\003\000\002\054\003\000\002\057\003\000" +
                    "\002\057\003\000\002\057\003\000\002\060\006\000\002" +
                    "\061\005\000\002\062\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[]{
            "\000\236\000\014\002\ufffe\013\ufffe\014\ufffe\060\ufffe\061" +
                    "\ufffe\001\002\000\004\002\240\001\002\000\014\002\ufff9" +
                    "\013\025\014\024\060\021\061\023\001\002\000\004\060" +
                    "\163\001\002\000\014\002\uffff\013\uffff\014\uffff\060\uffff" +
                    "\061\uffff\001\002\000\004\057\236\001\002\000\012\002" +
                    "\ufff9\013\025\014\024\060\021\001\002\000\012\002\ufff6" +
                    "\013\ufff6\014\ufff6\060\ufff6\001\002\000\012\002\ufff5\013" +
                    "\ufff5\014\ufff5\060\ufff5\001\002\000\004\002\001\001\002" +
                    "\000\010\020\077\053\074\057\155\001\002\000\012\002" +
                    "\ufff8\013\ufff8\014\ufff8\060\ufff8\001\002\000\010\045\230" +
                    "\047\uffb0\060\uffb0\001\002\000\012\002\ufff7\013\ufff7\014" +
                    "\ufff7\060\ufff7\001\002\000\012\024\uffae\045\uffae\047\uffae" +
                    "\060\uffae\001\002\000\004\057\227\001\002\000\004\060" +
                    "\223\001\002\000\004\060\021\001\002\000\004\060\021" +
                    "\001\002\000\004\060\027\001\002\000\004\053\uffac\001" +
                    "\002\000\004\053\031\001\002\000\030\017\047\022\042" +
                    "\060\045\062\032\063\044\064\046\065\040\066\036\067" +
                    "\043\070\033\071\037\001\002\000\020\020\uffbd\021\uffbd" +
                    "\023\uffbd\024\uffbd\026\uffbd\031\uffbd\057\uffbd\001\002\000" +
                    "\020\020\uffb8\021\uffb8\023\uffb8\024\uffb8\026\uffb8\031\uffb8" +
                    "\057\uffb8\001\002\000\020\020\uffbf\021\uffbf\023\uffbf\024" +
                    "\uffbf\026\uffbf\031\uffbf\057\uffbf\001\002\000\020\020\uffbe" +
                    "\021\uffbe\023\uffbe\024\uffbe\026\uffbe\031\uffbe\057\uffbe\001" +
                    "\002\000\020\020\uffbb\021\uffbb\023\uffbb\024\uffbb\026\uffbb" +
                    "\031\uffbb\057\uffbb\001\002\000\020\020\uffb7\021\uffb7\023" +
                    "\uffb7\024\uffb7\026\uffb7\031\uffb7\057\uffb7\001\002\000\020" +
                    "\020\uffb5\021\uffb5\023\uffb5\024\uffb5\026\uffb5\031\uffb5\057" +
                    "\uffb5\001\002\000\004\057\uffed\001\002\000\032\017\047" +
                    "\022\042\023\051\060\045\062\032\063\044\064\046\065" +
                    "\040\066\036\067\043\070\033\071\037\001\002\000\020" +
                    "\020\uffba\021\uffba\023\uffba\024\uffba\026\uffba\031\uffba\057" +
                    "\uffba\001\002\000\020\020\uffbc\021\uffbc\023\uffbc\024\uffbc" +
                    "\026\uffbc\031\uffbc\057\uffbc\001\002\000\016\021\uffc0\023" +
                    "\uffc0\024\uffc0\026\uffc0\031\uffc0\057\uffc0\001\002\000\020" +
                    "\020\uffb9\021\uffb9\023\uffb9\024\uffb9\026\uffb9\031\uffb9\057" +
                    "\uffb9\001\002\000\020\020\uffb6\021\uffb6\023\uffb6\024\uffb6" +
                    "\026\uffb6\031\uffb6\057\uffb6\001\002\000\006\023\054\031" +
                    "\053\001\002\000\020\020\uffb4\021\uffb4\023\uffb4\024\uffb4" +
                    "\026\uffb4\031\uffb4\057\uffb4\001\002\000\006\023\uffb2\031" +
                    "\uffb2\001\002\000\030\017\047\022\042\060\045\062\032" +
                    "\063\044\064\046\065\040\066\036\067\043\070\033\071" +
                    "\037\001\002\000\020\020\uffb3\021\uffb3\023\uffb3\024\uffb3" +
                    "\026\uffb3\031\uffb3\057\uffb3\001\002\000\006\023\uffb1\031" +
                    "\uffb1\001\002\000\004\024\057\001\002\000\012\013\071" +
                    "\015\070\025\uffe3\060\021\001\002\000\012\002\uffe6\013" +
                    "\uffe6\014\uffe6\060\uffe6\001\002\000\012\013\071\015\070" +
                    "\025\uffe3\060\021\001\002\000\012\013\uffe1\015\uffe1\025" +
                    "\uffe1\060\uffe1\001\002\000\052\004\ufff3\006\ufff3\007\ufff3" +
                    "\010\ufff3\012\ufff3\013\ufff3\015\ufff3\017\ufff3\022\ufff3\024" +
                    "\ufff3\025\ufff3\060\ufff3\062\ufff3\063\ufff3\064\ufff3\065\ufff3" +
                    "\066\ufff3\067\ufff3\070\ufff3\071\ufff3\001\002\000\012\013" +
                    "\uffe2\015\uffe2\025\uffe2\060\uffe2\001\002\000\004\057\220" +
                    "\001\002\000\004\025\217\001\002\000\012\013\uffe0\015" +
                    "\uffe0\025\uffe0\060\uffe0\001\002\000\004\020\077\001\002" +
                    "\000\004\060\021\001\002\000\004\053\074\001\002\000" +
                    "\004\057\uffec\001\002\000\030\017\047\022\042\060\045" +
                    "\062\032\063\044\064\046\065\040\066\036\067\043\070" +
                    "\033\071\037\001\002\000\004\057\uffee\001\002\000\004" +
                    "\024\107\001\002\000\006\021\102\060\021\001\002\000" +
                    "\006\021\104\031\103\001\002\000\006\021\uffe8\031\uffe8" +
                    "\001\002\000\004\024\uffea\001\002\000\004\060\021\001" +
                    "\002\000\004\024\uffe9\001\002\000\006\021\uffe7\031\uffe7" +
                    "\001\002\000\012\013\uffdf\015\uffdf\025\uffdf\060\uffdf\001" +
                    "\002\000\050\004\116\006\125\007\113\010\133\012\121" +
                    "\013\071\017\047\022\042\024\107\025\uffdd\060\140\062" +
                    "\032\063\044\064\046\065\040\066\036\067\043\070\033" +
                    "\071\037\001\002\000\004\053\uffaa\001\002\000\010\022" +
                    "\uffa6\030\uffa6\053\uffab\001\002\000\004\025\216\001\002" +
                    "\000\004\060\021\001\002\000\050\004\uffd7\006\uffd7\007" +
                    "\uffd7\010\uffd7\012\uffd7\013\uffd7\017\uffd7\022\uffd7\024\uffd7" +
                    "\025\uffd7\060\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7\066" +
                    "\uffd7\067\uffd7\070\uffd7\071\uffd7\001\002\000\004\053\207" +
                    "\001\002\000\030\017\047\022\042\060\045\062\032\063" +
                    "\044\064\046\065\040\066\036\067\043\070\033\071\037" +
                    "\001\002\000\050\004\uffdb\006\uffdb\007\uffdb\010\uffdb\012" +
                    "\uffdb\013\uffdb\017\uffdb\022\uffdb\024\uffdb\025\uffdb\060\uffdb" +
                    "\062\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\067\uffdb\070" +
                    "\uffdb\071\uffdb\001\002\000\050\004\uffda\006\uffda\007\uffda" +
                    "\010\uffda\012\uffda\013\uffda\017\uffda\022\uffda\024\uffda\025" +
                    "\uffda\060\uffda\062\uffda\063\uffda\064\uffda\065\uffda\066\uffda" +
                    "\067\uffda\070\uffda\071\uffda\001\002\000\032\017\047\022" +
                    "\042\057\177\060\045\062\032\063\044\064\046\065\040" +
                    "\066\036\067\043\070\033\071\037\001\002\000\050\004" +
                    "\uffd2\006\uffd2\007\uffd2\010\uffd2\012\uffd2\013\uffd2\017\uffd2" +
                    "\022\uffd2\024\uffd2\025\uffd2\060\uffd2\062\uffd2\063\uffd2\064" +
                    "\uffd2\065\uffd2\066\uffd2\067\uffd2\070\uffd2\071\uffd2\001\002" +
                    "\000\050\004\uffd8\006\uffd8\007\uffd8\010\uffd8\012\uffd8\013" +
                    "\uffd8\017\uffd8\022\uffd8\024\uffd8\025\uffd8\060\uffd8\062\uffd8" +
                    "\063\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8\070\uffd8\071" +
                    "\uffd8\001\002\000\050\004\uffd9\006\uffd9\007\uffd9\010\uffd9" +
                    "\012\uffd9\013\uffd9\017\uffd9\022\uffd9\024\uffd9\025\uffd9\060" +
                    "\uffd9\062\uffd9\063\uffd9\064\uffd9\065\uffd9\066\uffd9\067\uffd9" +
                    "\070\uffd9\071\uffd9\001\002\000\030\017\047\022\042\060" +
                    "\045\062\032\063\044\064\046\065\040\066\036\067\043" +
                    "\070\033\071\037\001\002\000\050\004\uffdc\006\uffdc\007" +
                    "\uffdc\010\uffdc\012\uffdc\013\uffdc\017\uffdc\022\uffdc\024\uffdc" +
                    "\025\uffdc\060\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc\066" +
                    "\uffdc\067\uffdc\070\uffdc\071\uffdc\001\002\000\006\022\157" +
                    "\030\156\001\002\000\050\004\uffd5\006\uffd5\007\uffd5\010" +
                    "\uffd5\012\uffd5\013\uffd5\017\uffd5\022\uffd5\024\uffd5\025\uffd5" +
                    "\060\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\067" +
                    "\uffd5\070\uffd5\071\uffd5\001\002\000\006\053\074\057\155" +
                    "\001\002\000\004\053\uffa9\001\002\000\030\017\047\022" +
                    "\042\060\045\062\032\063\044\064\046\065\040\066\036" +
                    "\067\043\070\033\071\037\001\002\000\050\004\116\006" +
                    "\125\007\113\010\133\012\121\013\071\017\047\022\042" +
                    "\024\107\025\uffdd\060\140\062\032\063\044\064\046\065" +
                    "\040\066\036\067\043\070\033\071\037\001\002\000\004" +
                    "\020\141\001\002\000\050\004\uffd6\006\uffd6\007\uffd6\010" +
                    "\uffd6\012\uffd6\013\uffd6\017\uffd6\022\uffd6\024\uffd6\025\uffd6" +
                    "\060\uffd6\062\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6\067" +
                    "\uffd6\070\uffd6\071\uffd6\001\002\000\050\004\uffd4\006\uffd4" +
                    "\007\uffd4\010\uffd4\012\uffd4\013\uffd4\017\uffd4\022\uffd4\024" +
                    "\uffd4\025\uffd4\060\uffd4\062\uffd4\063\uffd4\064\uffd4\065\uffd4" +
                    "\066\uffd4\067\uffd4\070\uffd4\071\uffd4\001\002\000\016\020" +
                    "\uffc0\022\uffad\030\uffad\045\uffae\053\uffad\060\uffae\001\002" +
                    "\000\032\017\047\021\146\022\042\060\045\062\032\063" +
                    "\044\064\046\065\040\066\036\067\043\070\033\071\037" +
                    "\001\002\000\004\057\143\001\002\000\050\004\uffd0\006" +
                    "\uffd0\007\uffd0\010\uffd0\012\uffd0\013\uffd0\017\uffd0\022\uffd0" +
                    "\024\uffd0\025\uffd0\060\uffd0\062\uffd0\063\uffd0\064\uffd0\065" +
                    "\uffd0\066\uffd0\067\uffd0\070\uffd0\071\uffd0\001\002\000\006" +
                    "\021\150\031\147\001\002\000\006\021\uffcd\031\uffcd\001" +
                    "\002\000\004\057\uffcf\001\002\000\030\017\047\022\042" +
                    "\060\045\062\032\063\044\064\046\065\040\066\036\067" +
                    "\043\070\033\071\037\001\002\000\004\057\uffce\001\002" +
                    "\000\006\021\uffcc\031\uffcc\001\002\000\004\025\uffde\001" +
                    "\002\000\004\024\107\001\002\000\050\004\uffc2\006\uffc2" +
                    "\007\uffc2\010\uffc2\012\uffc2\013\uffc2\017\uffc2\022\uffc2\024" +
                    "\uffc2\025\uffc2\060\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2" +
                    "\066\uffc2\067\uffc2\070\uffc2\071\uffc2\001\002\000\056\002" +
                    "\ufff1\004\ufff1\006\ufff1\007\ufff1\010\ufff1\012\ufff1\013\ufff1" +
                    "\014\ufff1\015\ufff1\017\ufff1\022\ufff1\024\ufff1\025\ufff1\060" +
                    "\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1" +
                    "\070\ufff1\071\ufff1\001\002\000\004\060\163\001\002\000" +
                    "\030\017\047\022\042\060\045\062\032\063\044\064\046" +
                    "\065\040\066\036\067\043\070\033\071\037\001\002\000" +
                    "\004\023\161\001\002\000\004\053\uffa8\001\002\000\004" +
                    "\053\uffa7\001\002\000\016\011\uffad\020\uffad\021\uffad\031" +
                    "\uffad\053\uffad\057\uffad\001\002\000\004\024\165\001\002" +
                    "\000\022\017\047\062\032\063\044\064\046\066\036\067" +
                    "\043\070\033\071\037\001\002\000\004\026\174\001\002" +
                    "\000\032\017\047\022\042\025\170\060\045\062\032\063" +
                    "\044\064\046\065\040\066\036\067\043\070\033\071\037" +
                    "\001\002\000\050\004\uffc5\006\uffc5\007\uffc5\010\uffc5\012" +
                    "\uffc5\013\uffc5\017\uffc5\022\uffc5\024\uffc5\025\uffc5\060\uffc5" +
                    "\062\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5\067\uffc5\070" +
                    "\uffc5\071\uffc5\001\002\000\004\026\172\001\002\000\046" +
                    "\004\116\006\125\007\113\010\133\012\121\013\071\017" +
                    "\047\022\042\024\107\060\140\062\032\063\044\064\046" +
                    "\065\040\066\036\067\043\070\033\071\037\001\002\000" +
                    "\032\017\uffc3\022\uffc3\025\uffc3\060\uffc3\062\uffc3\063\uffc3" +
                    "\064\uffc3\065\uffc3\066\uffc3\067\uffc3\070\uffc3\071\uffc3\001" +
                    "\002\000\046\004\116\006\125\007\113\010\133\012\121" +
                    "\013\071\017\047\022\042\024\107\060\140\062\032\063" +
                    "\044\064\046\065\040\066\036\067\043\070\033\071\037" +
                    "\001\002\000\032\017\uffc4\022\uffc4\025\uffc4\060\uffc4\062" +
                    "\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4\070\uffc4" +
                    "\071\uffc4\001\002\000\004\057\200\001\002\000\050\004" +
                    "\uffcb\006\uffcb\007\uffcb\010\uffcb\012\uffcb\013\uffcb\017\uffcb" +
                    "\022\uffcb\024\uffcb\025\uffcb\060\uffcb\062\uffcb\063\uffcb\064" +
                    "\uffcb\065\uffcb\066\uffcb\067\uffcb\070\uffcb\071\uffcb\001\002" +
                    "\000\050\004\uffca\006\uffca\007\uffca\010\uffca\012\uffca\013" +
                    "\uffca\017\uffca\022\uffca\024\uffca\025\uffca\060\uffca\062\uffca" +
                    "\063\uffca\064\uffca\065\uffca\066\uffca\067\uffca\070\uffca\071" +
                    "\uffca\001\002\000\004\024\107\001\002\000\052\004\uffc6" +
                    "\005\203\006\uffc6\007\uffc6\010\uffc6\012\uffc6\013\uffc6\017" +
                    "\uffc6\022\uffc6\024\uffc6\025\uffc6\060\uffc6\062\uffc6\063\uffc6" +
                    "\064\uffc6\065\uffc6\066\uffc6\067\uffc6\070\uffc6\071\uffc6\001" +
                    "\002\000\006\004\116\024\107\001\002\000\050\004\uffc9" +
                    "\006\uffc9\007\uffc9\010\uffc9\012\uffc9\013\uffc9\017\uffc9\022" +
                    "\uffc9\024\uffc9\025\uffc9\060\uffc9\062\uffc9\063\uffc9\064\uffc9" +
                    "\065\uffc9\066\uffc9\067\uffc9\070\uffc9\071\uffc9\001\002\000" +
                    "\050\004\uffc7\006\uffc7\007\uffc7\010\uffc7\012\uffc7\013\uffc7" +
                    "\017\uffc7\022\uffc7\024\uffc7\025\uffc7\060\uffc7\062\uffc7\063" +
                    "\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7\070\uffc7\071\uffc7" +
                    "\001\002\000\050\004\uffc8\006\uffc8\007\uffc8\010\uffc8\012" +
                    "\uffc8\013\uffc8\017\uffc8\022\uffc8\024\uffc8\025\uffc8\060\uffc8" +
                    "\062\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8\070" +
                    "\uffc8\071\uffc8\001\002\000\030\017\047\022\042\060\045" +
                    "\062\032\063\044\064\046\065\040\066\036\067\043\070" +
                    "\033\071\037\001\002\000\004\057\211\001\002\000\050" +
                    "\004\uffd1\006\uffd1\007\uffd1\010\uffd1\012\uffd1\013\uffd1\017" +
                    "\uffd1\022\uffd1\024\uffd1\025\uffd1\060\uffd1\062\uffd1\063\uffd1" +
                    "\064\uffd1\065\uffd1\066\uffd1\067\uffd1\070\uffd1\071\uffd1\001" +
                    "\002\000\004\011\213\001\002\000\030\017\047\022\042" +
                    "\060\045\062\032\063\044\064\046\065\040\066\036\067" +
                    "\043\070\033\071\037\001\002\000\004\024\107\001\002" +
                    "\000\050\004\uffc1\006\uffc1\007\uffc1\010\uffc1\012\uffc1\013" +
                    "\uffc1\017\uffc1\022\uffc1\024\uffc1\025\uffc1\060\uffc1\062\uffc1" +
                    "\063\uffc1\064\uffc1\065\uffc1\066\uffc1\067\uffc1\070\uffc1\071" +
                    "\uffc1\001\002\000\060\002\uffd3\004\uffd3\005\uffd3\006\uffd3" +
                    "\007\uffd3\010\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\017" +
                    "\uffd3\022\uffd3\024\uffd3\025\uffd3\060\uffd3\062\uffd3\063\uffd3" +
                    "\064\uffd3\065\uffd3\066\uffd3\067\uffd3\070\uffd3\071\uffd3\001" +
                    "\002\000\012\002\uffe5\013\uffe5\014\uffe5\060\uffe5\001\002" +
                    "\000\052\004\ufff2\006\ufff2\007\ufff2\010\ufff2\012\ufff2\013" +
                    "\ufff2\015\ufff2\017\ufff2\022\ufff2\024\ufff2\025\ufff2\060\ufff2" +
                    "\062\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\067\ufff2\070" +
                    "\ufff2\071\ufff2\001\002\000\004\025\uffe4\001\002\000\006" +
                    "\041\224\057\225\001\002\000\006\041\ufffb\057\ufffb\001" +
                    "\002\000\004\060\226\001\002\000\014\002\ufffd\013\ufffd" +
                    "\014\ufffd\060\ufffd\061\ufffd\001\002\000\006\041\ufffc\057" +
                    "\ufffc\001\002\000\056\002\ufff0\004\ufff0\006\ufff0\007\ufff0" +
                    "\010\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\017\ufff0\022" +
                    "\ufff0\024\ufff0\025\ufff0\060\ufff0\062\ufff0\063\ufff0\064\ufff0" +
                    "\065\ufff0\066\ufff0\067\ufff0\070\ufff0\071\ufff0\001\002\000" +
                    "\004\060\021\001\002\000\004\047\232\001\002\000\006" +
                    "\047\uffaf\060\uffaf\001\002\000\004\024\107\001\002\000" +
                    "\016\002\uffeb\013\uffeb\014\uffeb\015\uffeb\025\uffeb\060\uffeb" +
                    "\001\002\000\004\002\ufffa\001\002\000\012\002\ufff4\013" +
                    "\ufff4\014\ufff4\060\ufff4\001\002\000\016\011\uffef\020\uffef" +
                    "\021\uffef\031\uffef\053\uffef\057\uffef\001\002\000\004\002" +
                    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
            "\000\236\000\006\002\003\003\004\001\001\000\002\001" +
                    "\001\000\032\004\006\006\013\007\010\010\012\011\015" +
                    "\013\021\014\007\016\014\017\017\022\011\052\016\056" +
                    "\005\001\001\000\004\053\236\001\001\000\002\001\001" +
                    "\000\002\001\001\000\030\006\234\007\010\010\012\011" +
                    "\015\013\021\014\007\016\014\017\017\022\011\052\016" +
                    "\056\005\001\001\000\002\001\001\000\002\001\001\000" +
                    "\002\001\001\000\004\020\232\001\001\000\002\001\001" +
                    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                    "\002\001\001\000\004\005\221\001\001\000\004\052\055" +
                    "\001\001\000\006\052\016\056\025\001\001\000\004\054" +
                    "\027\001\001\000\002\001\001\000\002\001\001\000\010" +
                    "\046\040\047\033\050\034\001\001\000\002\001\001\000" +
                    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                    "\001\000\012\046\051\047\033\050\034\051\047\001\001" +
                    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                    "\001\001\000\002\001\001\000\010\046\054\047\033\050" +
                    "\034\001\001\000\002\001\001\000\002\001\001\000\004" +
                    "\023\057\001\001\000\030\010\062\012\063\013\021\015" +
                    "\064\016\014\017\066\024\065\025\060\026\061\052\016" +
                    "\056\005\001\001\000\002\001\001\000\030\010\062\012" +
                    "\063\013\021\015\064\016\014\017\066\024\220\025\060" +
                    "\026\061\052\016\056\005\001\001\000\002\001\001\000" +
                    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                    "\001\001\000\002\001\001\000\004\020\075\001\001\000" +
                    "\012\013\072\016\071\052\016\056\005\001\001\000\002" +
                    "\001\001\000\002\001\001\000\010\046\074\047\033\050" +
                    "\034\001\001\000\002\001\001\000\004\031\105\001\001" +
                    "\000\012\016\100\021\077\052\016\056\005\001\001\000" +
                    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
                    "\016\104\052\016\056\005\001\001\000\002\001\001\000" +
                    "\002\001\001\000\002\001\001\000\066\010\062\012\121" +
                    "\013\021\015\064\016\130\027\111\030\133\031\136\032" +
                    "\125\033\116\034\117\037\123\040\122\042\113\044\135" +
                    "\045\127\046\134\047\033\050\034\052\016\053\110\056" +
                    "\005\057\114\060\107\061\131\062\126\001\001\000\002" +
                    "\001\001\000\002\001\001\000\002\001\001\000\010\016" +
                    "\211\052\016\056\005\001\001\000\002\001\001\000\002" +
                    "\001\001\000\010\046\200\047\033\050\034\001\001\000" +
                    "\002\001\001\000\002\001\001\000\010\046\175\047\033" +
                    "\050\034\001\001\000\002\001\001\000\002\001\001\000" +
                    "\002\001\001\000\010\046\163\047\033\050\034\001\001" +
                    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                    "\002\001\001\000\002\001\001\000\010\046\152\047\033" +
                    "\050\034\001\001\000\066\010\062\012\121\013\021\015" +
                    "\064\016\130\027\151\030\133\031\136\032\125\033\116" +
                    "\034\117\037\123\040\122\042\113\044\135\045\127\046" +
                    "\134\047\033\050\034\052\016\053\110\056\005\057\114" +
                    "\060\107\061\131\062\126\001\001\000\004\035\141\001" +
                    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                    "\000\012\036\143\046\144\047\033\050\034\001\001\000" +
                    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                    "\001\001\000\002\001\001\000\010\046\150\047\033\050" +
                    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
                    "\001\001\000\004\031\153\001\001\000\002\001\001\000" +
                    "\002\001\001\000\004\053\161\001\001\000\010\046\157" +
                    "\047\033\050\034\001\001\000\002\001\001\000\002\001" +
                    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                    "\000\006\043\166\047\165\001\001\000\002\001\001\000" +
                    "\010\046\170\047\033\050\034\001\001\000\002\001\001" +
                    "\000\002\001\001\000\064\010\062\012\121\013\021\015" +
                    "\064\016\130\030\172\031\136\032\125\033\116\034\117" +
                    "\037\123\040\122\042\113\044\135\045\127\046\134\047" +
                    "\033\050\034\052\016\053\110\056\005\057\114\060\107" +
                    "\061\131\062\126\001\001\000\002\001\001\000\064\010" +
                    "\062\012\121\013\021\015\064\016\130\030\174\031\136" +
                    "\032\125\033\116\034\117\037\123\040\122\042\113\044" +
                    "\135\045\127\046\134\047\033\050\034\052\016\053\110" +
                    "\056\005\057\114\060\107\061\131\062\126\001\001\000" +
                    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                    "\001\001\000\004\031\201\001\001\000\004\041\203\001" +
                    "\001\000\006\031\205\040\204\001\001\000\002\001\001" +
                    "\000\002\001\001\000\002\001\001\000\010\046\207\047" +
                    "\033\050\034\001\001\000\002\001\001\000\002\001\001" +
                    "\000\002\001\001\000\010\046\213\047\033\050\034\001" +
                    "\001\000\004\031\214\001\001\000\002\001\001\000\002" +
                    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                    "\006\052\016\056\230\001\001\000\002\001\001\000\002" +
                    "\001\001\000\004\031\233\001\001\000\002\001\001\000" +
                    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SyntacticalAnalyser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SyntacticalAnalyser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SyntacticalAnalyser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    return analyser.next_token();

    }


    private LexicalAnalyser analyser = (LexicalAnalyser) getScanner();

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SyntacticalAnalyser$actions {


  private final SyntacticalAnalyser parser;

  /** Constructor */
  CUP$SyntacticalAnalyser$actions(SyntacticalAnalyser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SyntacticalAnalyser$do_action_part00000000(
    int                        CUP$SyntacticalAnalyser$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticalAnalyser$parser,
    java.util.Stack            CUP$SyntacticalAnalyser$stack,
    int                        CUP$SyntacticalAnalyser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SyntacticalAnalyser$result;

      /* select the action based on the action number */
      switch (CUP$SyntacticalAnalyser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= ImportList DeclarationList 
            {
              ProgramNode RESULT =null;
		List<String> imports = (List<String>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		DeclarationNode declarations = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ProgramNode(declarations, imports); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Program",0, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		RESULT = start_val;
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$SyntacticalAnalyser$parser.done_parsing();
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ImportList ::= ImportList Import 
            {
              List<String> RESULT =null;
		List<String> imports = (List<String>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		String file = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 imports.add(file); RESULT = imports; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ImportList",1, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ImportList ::= 
            {
              List<String> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ImportList",1, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Import ::= IMPORT FilePath END 
            {
              String RESULT =null;
		String path = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = path; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Import",2, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FilePath ::= FilePath DIV IDENTIFIER 
            {
              String RESULT =null;
		String path = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		String filename = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = path + "/" + filename; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FilePath",3, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FilePath ::= IDENTIFIER 
            {
              String RESULT =null;
		String filename = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = filename; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FilePath",3, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DeclarationList ::= Declaration DeclarationList 
            {
              DeclarationNode RESULT =null;
		DeclarationNode declaration = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		DeclarationNode declarations = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration.linkedTo(declarations); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("DeclarationList",4, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DeclarationList ::= 
            {
              DeclarationNode RESULT =null;
		 RESULT = null; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("DeclarationList",4, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Declaration ::= GlobalVarConstDeclaration 
            {
              DeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration",5, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Declaration ::= FunctionDeclaration 
            {
              DeclarationNode RESULT =null;
		FunctionDeclarationNode declaration = (FunctionDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration",5, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Declaration ::= ClassDeclaration 
            {
              DeclarationNode RESULT =null;
		ClassDeclarationNode declaration = (ClassDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration",5, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // GlobalVarConstDeclaration ::= VarDeclaration 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalVarConstDeclaration",7, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // GlobalVarConstDeclaration ::= GlobalConstDeclaration END 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalVarConstDeclaration",7, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VarConstDeclaration ::= VarDeclaration 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarConstDeclaration",8, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VarConstDeclaration ::= LocalConstDeclaration END 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarConstDeclaration",8, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VarDeclaration ::= BaseVarDeclaration END 
            {
              VarDeclarationNode RESULT =null;
		Name declaration = (Name)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new VarDeclarationNode(declaration); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclaration",6, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VarDeclaration ::= VarInitDeclaration END 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclaration",6, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BaseVarDeclaration ::= Type VarId 
            {
              Name RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new Name(id, type); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("BaseVarDeclaration",12, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarInitDeclaration ::= BaseVarDeclaration ASSIGNMENT Expression 
            {
              VarDeclarationNode RESULT =null;
		Name name = (Name)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		ExpressionNode initialValue = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new VarDeclarationNode(name, initialValue); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarInitDeclaration",9, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // GlobalConstDeclaration ::= CONST Type GlobalConstId ASSIGNMENT Expression 
            {
              VarDeclarationNode RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		ExpressionNode initialValue = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new VarDeclarationNode(new Name(id, type), initialValue, true, true); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalConstDeclaration",10, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LocalConstDeclaration ::= CONST VarInitDeclaration 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration.constant(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("LocalConstDeclaration",11, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FunctionDeclaration ::= BaseVarDeclaration FunctionParameters BlockStatement 
            {
              FunctionDeclarationNode RESULT =null;
		Name name = (Name)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		List<Name> parameters = (List<Name>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		BlockStatementNode block = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionDeclarationNode(name, parameters, block); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionDeclaration",13, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FunctionParameters ::= PARENTH_L PARENTH_R 
            {
              List<Name> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionParameters",14, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FunctionParameters ::= PARENTH_L ParameterList PARENTH_R 
            {
              List<Name> RESULT =null;
		List<Name> parameters = (List<Name>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = parameters; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionParameters",14, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ParameterList ::= BaseVarDeclaration 
          {
              List<Name> RESULT = null;
              Name parameter = (Name) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
              RESULT = new ArrayList<>(Collections.singletonList(parameter));
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ParameterList", 15, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ParameterList ::= ParameterList COMMA BaseVarDeclaration 
            {
              List<Name> RESULT =null;
		List<Name> parameters = (List<Name>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		Name parameter = (Name)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 parameters.add(parameter); RESULT = parameters; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ParameterList",15, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ClassDeclaration ::= CLASS TypeName ClassBlock 
            {
              ClassDeclarationNode RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		DeclarationNode block = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ClassDeclarationNode(name, block); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",16, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassBlock ::= CURLY_L ClassElementList CURLY_R 
            {
              DeclarationNode RESULT =null;
		DeclarationNode contents = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = contents; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassBlock",17, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassElementList ::= ClassElement ClassElementList 
            {
              DeclarationNode RESULT =null;
		DeclarationNode element = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		DeclarationNode elements = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = element.linkedTo(elements); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElementList",18, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassElementList ::= 
            {
              DeclarationNode RESULT =null;
		 RESULT = null; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElementList",18, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClassElement ::= VarConstDeclaration 
            {
              DeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement",19, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassElement ::= ConstructorDeclaration 
            {
              DeclarationNode RESULT =null;
		ConstructorDeclarationNode declaration = (ConstructorDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement",19, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassElement ::= FunctionDeclaration 
            {
              DeclarationNode RESULT =null;
		FunctionDeclarationNode declaration = (FunctionDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement",19, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ConstructorDeclaration ::= CONSTRUCTOR FunctionParameters BlockStatement 
            {
              ConstructorDeclarationNode RESULT =null;
		List<Name> parameters = (List<Name>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		BlockStatementNode block = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ConstructorDeclarationNode(parameters, block); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstructorDeclaration",20, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // StatementList ::= Statement StatementList 
            {
              StatementNode RESULT =null;
		StatementNode statement = (StatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		StatementNode statements = (StatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement.linkedTo(statements); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("StatementList",21, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // StatementList ::= 
            {
              StatementNode RESULT =null;
		 RESULT = null; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("StatementList",21, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Statement ::= VarDeclarationStatement 
            {
              StatementNode RESULT =null;
		VarDeclarationStatementNode statement = (VarDeclarationStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",22, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Statement ::= AssignmentStatement 
            {
              StatementNode RESULT =null;
		AssignmentStatementNode statement = (AssignmentStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",22, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Statement ::= FunctionCallStatement 
            {
              StatementNode RESULT =null;
		FunctionCallStatementNode statement = (FunctionCallStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",22, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Statement ::= ReturnStatement 
            {
              StatementNode RESULT =null;
		ReturnStatementNode statement = (ReturnStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",22, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Statement ::= IfElseStatement 
            {
              StatementNode RESULT =null;
		IfElseStatementNode statement = (IfElseStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",22, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Statement ::= SwitchStatement 
            {
              StatementNode RESULT =null;
		SwitchStatementNode statement = (SwitchStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",22, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Statement ::= WhileStatement 
            {
              StatementNode RESULT =null;
		WhileStatementNode statement = (WhileStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",22, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Statement ::= ForStatement 
            {
              StatementNode RESULT =null;
		ForStatementNode statement = (ForStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",22, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Statement ::= BlockStatement 
            {
              StatementNode RESULT =null;
		BlockStatementNode statement = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",22, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BlockStatement ::= CURLY_L StatementList CURLY_R 
            {
              BlockStatementNode RESULT =null;
		StatementNode root = (StatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new BlockStatementNode(root); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("BlockStatement",23, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VarDeclarationStatement ::= VarConstDeclaration 
            {
              VarDeclarationStatementNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration.asStatement(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclarationStatement",24, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // AssignmentStatement ::= Designator ASSIGNMENT Expression END 
            {
              AssignmentStatementNode RESULT =null;
		Designator designator = (Designator)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		ExpressionNode expression = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new AssignmentStatementNode(designator, expression); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AssignmentStatement",25, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FunctionCallStatement ::= Expression FunctionArguments END 
            {
              FunctionCallStatementNode RESULT =null;
		ExpressionNode function = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		List<ExpressionNode> arguments = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new FunctionCallStatementNode(function, arguments); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionCallStatement",26, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FunctionArguments ::= PARENTH_L PARENTH_R 
            {
              List<ExpressionNode> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionArguments",27, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FunctionArguments ::= PARENTH_L ArgumentList PARENTH_R 
            {
              List<ExpressionNode> RESULT =null;
		List<ExpressionNode> arguments = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = arguments; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionArguments",27, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ArgumentList ::= Expression 
          {
              List<ExpressionNode> RESULT = null;
              ExpressionNode argument = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
              RESULT = new ArrayList<>(Collections.singletonList(argument));
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ArgumentList", 28, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ArgumentList ::= ArgumentList COMMA Expression 
            {
              List<ExpressionNode> RESULT =null;
		List<ExpressionNode> arguments = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		ExpressionNode argument = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 arguments.add(argument); RESULT = arguments; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ArgumentList",28, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ReturnStatement ::= RETURN END 
            {
              ReturnStatementNode RESULT =null;
		 RESULT = new ReturnStatementNode(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",29, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ReturnStatement ::= RETURN Expression END 
            {
              ReturnStatementNode RESULT =null;
		ExpressionNode expression = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new ReturnStatementNode(expression); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",29, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IfElseStatement ::= IF Expression BlockStatement ElsePartStatement 
            {
              IfElseStatementNode RESULT =null;
		ExpressionNode condition = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		BlockStatementNode ifBlock = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		StatementNode elsePart = (StatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new IfElseStatementNode(condition, ifBlock, elsePart); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("IfElseStatement",30, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ElsePartStatement ::= ELSE BlockStatement 
            {
              StatementNode RESULT =null;
		BlockStatementNode elseBlock = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = elseBlock; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ElsePartStatement",31, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ElsePartStatement ::= ELSE IfElseStatement 
            {
              StatementNode RESULT =null;
		IfElseStatementNode ifElse = (IfElseStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = ifElse; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ElsePartStatement",31, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ElsePartStatement ::= 
            {
              StatementNode RESULT =null;
		 RESULT = null; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ElsePartStatement",31, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SwitchStatement ::= SWITCH Expression CURLY_L SwitchCasesStatement CURLY_R 
          {
              SwitchStatementNode RESULT = null;
              ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
              Map<ExpressionNode, StatementNode> cases = (Map<ExpressionNode, StatementNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
              RESULT = new SwitchStatementNode(expression, cases);
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("SwitchStatement", 32, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 61: // SwitchCasesStatement ::= ConstantExpression ARROW Statement
            {
                Map<ExpressionNode, StatementNode> RESULT = null;
                ConstantExpressionNode expression = (ConstantExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                StatementNode statement = (StatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new HashMap<>(Collections.singletonMap(expression, statement));
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("SwitchCasesStatement", 33, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SwitchCasesStatement ::= SwitchCasesStatement Expression ARROW Statement 
          {
              Map<ExpressionNode, StatementNode> RESULT = null;
              Map<ExpressionNode, StatementNode> cases = (Map<ExpressionNode, StatementNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
              ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
              StatementNode statement = (StatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
              cases.put(expression, statement);
              RESULT = cases;
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("SwitchCasesStatement", 33, RESULT);
          }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // WhileStatement ::= WHILE Expression BlockStatement 
            {
              WhileStatementNode RESULT =null;
		ExpressionNode condition = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		BlockStatementNode whileBlock = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new WhileStatementNode(condition, whileBlock); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("WhileStatement",34, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ForStatement ::= FOR BaseVarDeclaration IN Expression BlockStatement 
            {
              ForStatementNode RESULT =null;
		Name variable = (Name)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		ExpressionNode iterable = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		BlockStatementNode forBlock = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ForStatementNode(variable, iterable, forBlock); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ForStatement",35, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expression ::= IDENTIFIER 
            {
              ExpressionNode RESULT =null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression",36, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expression ::= ConstantExpression 
            {
              ExpressionNode RESULT =null;
		ConstantExpressionNode expression = (ConstantExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = expression; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression",36, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 67: // Expression ::= ListConstructorExpression
            {
                ExpressionNode RESULT = null;
                ListConstructorExpressionNode expression = (ListConstructorExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression", 36, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ConstantExpression ::= INT 
            {
              ConstantExpressionNode RESULT =null;
		String n = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = ConstantExpressionNode.fromInt(n); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression",37, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ConstantExpression ::= REAL 
            {
              ConstantExpressionNode RESULT =null;
		String x = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = ConstantExpressionNode.fromFloat(x); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression",37, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ConstantExpression ::= TRUE 
            {
              ConstantExpressionNode RESULT =null;
		String t = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = ConstantExpressionNode.fromBoolean(t); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression",37, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ConstantExpression ::= FALSE 
            {
              ConstantExpressionNode RESULT =null;
		String f = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = ConstantExpressionNode.fromBoolean(f); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression",37, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ConstantExpression ::= CHAR 
            {
              ConstantExpressionNode RESULT =null;
		String c = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = ConstantExpressionNode.fromChar(c); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression",37, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ConstantExpression ::= NOTHING 
            {
              ConstantExpressionNode RESULT =null;
		 RESULT = ConstantExpressionNode.ofNothing(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression",37, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ConstantExpression ::= NULL 
            {
              ConstantExpressionNode RESULT =null;
		 RESULT = ConstantExpressionNode.ofNull(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression",37, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 75: // ConstantExpression ::= UNDERSCORE
            {
                ConstantExpressionNode RESULT = null;
                RESULT = ConstantExpressionNode.ofNull();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression", 37, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 76: // ListConstructorExpression ::= STRING
            {
                ListConstructorExpressionNode RESULT = null;
                String str = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = ListConstructorExpressionNode.fromString(str);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListConstructorExpression", 38, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 77: // ListConstructorExpression ::= SQUARE_L SQUARE_R
            {
                ListConstructorExpressionNode RESULT = null;
                RESULT = new ListConstructorExpressionNode();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListConstructorExpression", 38, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 78: // ListConstructorExpression ::= SQUARE_L ListElements SQUARE_R
            {
                ListConstructorExpressionNode RESULT = null;
                List<ExpressionNode> elements = (List<ExpressionNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new ListConstructorExpressionNode(elements);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListConstructorExpression", 38, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 79: // ListElements ::= Expression
            {
                List<ExpressionNode> RESULT = null;
                ExpressionNode element = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ArrayList<>(Collections.singletonList(element));
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListElements", 39, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 80: // ListElements ::= ListElements COMMA Expression
            {
                List<ExpressionNode> RESULT = null;
                List<ExpressionNode> elements = (List<ExpressionNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode element = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                elements.add(element);
                RESULT = elements;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListElements", 39, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 81: // Type ::= TypeName
            {
                Type RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new Type(name);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Type", 44, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 82: // Type ::= TypeName LT Type GT
            {
              Type RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		Type param = (Type)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
                RESULT = new Type(name, param);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Type", 44, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 83: // TypeName ::= IDENTIFIER
            {
              String RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = id;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("TypeName", 40, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 84: // VarId ::= IDENTIFIER
            {
              String RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = id;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarId", 41, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 85: // GlobalConstId ::= IDENTIFIER
            {
              String RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = id;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalConstId", 42, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 86: // Designator ::= VarId
            {
              Designator RESULT =null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Designator", 45, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 87: // Designator ::= ArrayAccess
            {
              Designator RESULT =null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Designator", 45, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 88: // Designator ::= FieldAccess
            {
              Designator RESULT =null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Designator", 45, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 89: // ArrayAccess ::= DesignableExpression SQUARE_L Expression SQUARE_R
            {
              ExpressionNode RESULT =null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ArrayAccess", 46, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 90: // FieldAccess ::= DesignableExpression POINT VarId
            {
              ExpressionNode RESULT =null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FieldAccess", 47, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 91: // DesignableExpression ::= VarId
            {
              ExpressionNode RESULT =null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("DesignableExpression", 48, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SyntacticalAnalyser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SyntacticalAnalyser$do_action(
    int                        CUP$SyntacticalAnalyser$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticalAnalyser$parser,
    java.util.Stack            CUP$SyntacticalAnalyser$stack,
    int                        CUP$SyntacticalAnalyser$top)
    throws java.lang.Exception
    {
              return CUP$SyntacticalAnalyser$do_action_part00000000(
                               CUP$SyntacticalAnalyser$act_num,
                               CUP$SyntacticalAnalyser$parser,
                               CUP$SyntacticalAnalyser$stack,
                               CUP$SyntacticalAnalyser$top);
    }
}

