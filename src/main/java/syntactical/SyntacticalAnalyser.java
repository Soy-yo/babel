
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sat May 23 18:18:14 CEST 2020
//----------------------------------------------------

package syntactical;

import error.SyntacticalException;
import java_cup.runtime.Symbol;
import lexical.LexicalAnalyser;
import lexical.LexicalUnit;
import syntactical.ast.*;

import java.util.*;

/**
 * CUP v0.11b beta 20140220 generated parser.
 *
 * @version Sat May 23 18:18:14 CEST 2020
 */
public class SyntacticalAnalyser extends java_cup.runtime.lr_parser {

    /** Default constructor. */
    public SyntacticalAnalyser() {
        super();
    }

    /** Constructor which sets the default scanner. */
    public SyntacticalAnalyser(java_cup.runtime.Scanner s) {
        super(s);
    }

    /** Constructor which sets the default scanner. */
    public SyntacticalAnalyser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /** Production table. */
    protected static final short _production_table[][] =
            unpackFromStrings(new String[]{
                    "\000\257\000\002\002\004\000\002\002\004\000\002\003" +
                            "\004\000\002\003\002\000\002\004\005\000\002\004\005" +
                            "\000\002\005\005\000\002\005\003\000\002\006\003\000" +
                            "\002\006\003\000\002\006\003\000\002\007\004\000\002" +
                            "\007\002\000\002\010\003\000\002\010\003\000\002\010" +
                            "\003\000\002\010\004\000\002\010\004\000\002\012\003" +
                            "\000\002\012\003\000\002\013\003\000\002\013\003\000" +
                            "\002\011\004\000\002\011\004\000\002\020\004\000\002" +
                            "\014\005\000\002\014\004\000\002\015\010\000\002\015" +
                            "\006\000\002\015\007\000\002\016\004\000\002\016\007" +
                            "\000\002\017\004\000\002\066\003\000\002\066\003\000" +
                            "\002\022\003\000\002\022\003\000\002\022\004\000\002" +
                            "\021\003\000\002\021\003\000\002\021\004\000\002\023" +
                            "\005\000\002\024\004\000\002\024\005\000\002\025\003" +
                            "\000\002\025\005\000\002\025\003\000\002\025\005\000" +
                            "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
                            "\027\005\000\002\030\004\000\002\030\002\000\002\031" +
                            "\003\000\002\031\003\000\002\031\003\000\002\031\004" +
                            "\000\002\031\004\000\002\032\005\000\002\033\004\000" +
                            "\002\033\002\000\002\034\003\000\002\034\003\000\002" +
                            "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
                            "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
                            "\000\002\034\004\000\002\035\005\000\002\036\003\000" +
                            "\002\037\006\000\002\037\006\000\002\037\006\000\002" +
                            "\037\006\000\002\037\006\000\002\037\006\000\002\040" +
                            "\003\000\002\040\003\000\002\040\003\000\002\041\004" +
                            "\000\002\042\004\000\002\042\005\000\002\043\006\000" +
                            "\002\044\004\000\002\044\004\000\002\044\002\000\002" +
                            "\045\007\000\002\046\005\000\002\046\005\000\002\046" +
                            "\006\000\002\046\006\000\002\047\005\000\002\050\007" +
                            "\000\002\051\003\000\002\052\005\000\002\052\003\000" +
                            "\002\053\005\000\002\053\003\000\002\054\005\000\002" +
                            "\054\003\000\002\055\005\000\002\055\005\000\002\055" +
                            "\005\000\002\055\003\000\002\056\005\000\002\056\005" +
                            "\000\002\056\005\000\002\056\005\000\002\056\003\000" +
                            "\002\057\005\000\002\057\005\000\002\057\003\000\002" +
                            "\060\005\000\002\060\005\000\002\060\005\000\002\060" +
                            "\003\000\002\061\004\000\002\061\004\000\002\061\004" +
                            "\000\002\061\003\000\002\062\003\000\002\062\003\000" +
                            "\002\062\003\000\002\062\003\000\002\063\003\000\002" +
                            "\063\003\000\002\063\003\000\002\063\003\000\002\064" +
                            "\003\000\002\064\003\000\002\065\005\000\002\065\003" +
                            "\000\002\065\003\000\002\065\003\000\002\065\003\000" +
                            "\002\065\003\000\002\070\006\000\002\067\005\000\002" +
                            "\071\004\000\002\102\004\000\002\102\004\000\002\102" +
                            "\007\000\002\072\003\000\002\072\003\000\002\073\003" +
                            "\000\002\074\003\000\002\074\003\000\002\074\003\000" +
                            "\002\074\003\000\002\074\003\000\002\074\003\000\002" +
                            "\074\003\000\002\075\003\000\002\075\004\000\002\075" +
                            "\005\000\002\076\003\000\002\076\005\000\002\077\004" +
                            "\000\002\077\005\000\002\100\003\000\002\100\005\000" +
                            "\002\101\003\000\002\101\003\000\002\103\003\000\002" +
                            "\103\006\000\002\103\003\000\002\103\006\000\002\104" +
                            "\004\000\002\104\005\000\002\105\003\000\002\105\005" +
                            ""});

    /** Access to production table. */
    public short[][] production_table() {
        return _production_table;
    }

    /** Parse-action table. */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[]{
                    "\000\u012f\000\020\002\ufffe\003\ufffe\013\ufffe\014\ufffe\060" +
                            "\ufffe\062\ufffe\063\ufffe\001\002\000\004\002\u0131\001\002" +
                            "\000\020\002\ufff5\003\026\013\024\014\010\060\027\062" +
                            "\017\063\006\001\002\000\012\003\u0129\057\u012b\060\u0127" +
                            "\062\u012c\001\002\000\016\002\ufff2\003\ufff2\013\ufff2\014" +
                            "\ufff2\060\ufff2\062\ufff2\001\002\000\010\003\u0113\060\u0114" +
                            "\062\u0115\001\002\000\016\002\uffee\003\uffee\013\uffee\014" +
                            "\uffee\060\uffee\062\uffee\001\002\000\016\002\ufff5\003\026" +
                            "\013\024\014\010\060\027\062\017\001\002\000\010\017" +
                            "\255\052\235\056\256\001\002\000\004\056\253\001\002" +
                            "\000\010\003\242\057\243\062\244\001\002\000\020\002" +
                            "\uffff\003\uffff\013\uffff\014\uffff\060\uffff\062\uffff\063\uffff" +
                            "\001\002\000\016\003\uff5a\017\032\044\247\057\uff5a\060" +
                            "\uff5a\062\uff5a\001\002\000\004\002\001\001\002\000\016" +
                            "\002\ufff4\003\ufff4\013\ufff4\014\ufff4\060\ufff4\062\ufff4\001" +
                            "\002\000\016\002\uffef\003\uffef\013\uffef\014\uffef\060\uffef" +
                            "\062\uffef\001\002\000\010\003\242\057\243\062\244\001" +
                            "\002\000\006\060\027\062\017\001\002\000\016\002\ufff3" +
                            "\003\ufff3\013\ufff3\014\ufff3\060\ufff3\062\ufff3\001\002\000" +
                            "\006\024\203\056\202\001\002\000\016\003\uff58\017\032" +
                            "\044\030\057\uff58\060\uff58\062\uff58\001\002\000\006\060" +
                            "\164\062\165\001\002\000\072\003\uff71\017\uff71\020\uff71" +
                            "\021\uff71\022\uff71\023\uff71\024\uff71\026\uff71\027\uff71\030" +
                            "\uff71\032\uff71\034\uff71\036\uff71\040\uff71\042\uff71\043\uff71" +
                            "\044\uff71\045\uff71\046\uff71\047\uff71\050\uff71\051\uff71\054" +
                            "\uff71\055\uff71\056\uff71\057\uff71\060\uff71\062\uff71\001\002" +
                            "\000\050\003\050\017\102\020\101\021\064\032\044\034" +
                            "\037\053\041\057\103\060\055\061\045\062\042\064\035" +
                            "\065\070\066\033\067\076\070\047\071\100\072\077\073" +
                            "\052\001\002\000\064\017\uff68\020\uff68\021\uff68\022\uff68" +
                            "\023\uff68\024\uff68\025\uff68\026\uff68\027\uff68\030\uff68\032" +
                            "\uff68\034\uff68\036\uff68\040\uff68\042\uff68\043\uff68\044\uff68" +
                            "\045\uff68\046\uff68\047\uff68\050\uff68\051\uff68\054\uff68\055" +
                            "\uff68\056\uff68\001\002\000\006\020\176\030\175\001\002" +
                            "\000\064\017\uff6c\020\uff6c\021\uff6c\022\uff6c\023\uff6c\024" +
                            "\uff6c\025\uff6c\026\uff6c\027\uff6c\030\uff6c\032\uff6c\034\uff6c" +
                            "\036\uff6c\040\uff6c\042\uff6c\043\uff6c\044\uff6c\045\uff6c\046" +
                            "\uff6c\047\uff6c\050\uff6c\051\uff6c\054\uff6c\055\uff6c\056\uff6c" +
                            "\001\002\000\062\017\uff79\020\uff79\021\uff79\022\uff79\023" +
                            "\uff79\024\uff79\026\uff79\027\uff79\030\uff79\032\uff79\034\uff79" +
                            "\036\uff79\040\uff79\042\uff79\043\uff79\044\uff79\045\uff79\046" +
                            "\uff79\047\uff79\050\uff79\051\uff79\054\uff79\055\uff79\056\uff79" +
                            "\001\002\000\046\003\050\017\102\021\064\032\044\034" +
                            "\037\053\041\057\103\060\055\061\045\062\042\064\035" +
                            "\065\070\066\033\067\076\070\047\071\100\072\077\073" +
                            "\052\001\002\000\062\017\uff81\020\uff85\021\uff85\022\uff85" +
                            "\023\uff85\024\uff85\026\uff85\027\uff85\030\uff85\032\uff85\034" +
                            "\uff85\036\uff85\040\uff85\042\uff85\043\uff85\044\uff85\045\uff85" +
                            "\046\uff85\047\uff85\050\uff85\051\uff85\054\uff85\055\uff85\056" +
                            "\uff85\001\002\000\046\003\050\017\102\021\064\032\044" +
                            "\034\037\053\041\057\103\060\055\061\045\062\042\064" +
                            "\035\065\070\066\033\067\076\070\047\071\100\072\077" +
                            "\073\052\001\002\000\006\017\032\044\161\001\002\000" +
                            "\062\017\uff7f\020\uff83\021\uff83\022\uff83\023\uff83\024\uff83" +
                            "\026\uff83\027\uff83\030\uff83\032\uff83\034\uff83\036\uff83\040" +
                            "\uff83\042\uff83\043\uff83\044\uff83\045\uff83\046\uff83\047\uff83" +
                            "\050\uff83\051\uff83\054\uff83\055\uff83\056\uff83\001\002\000" +
                            "\046\003\050\017\102\021\064\032\044\034\037\053\041" +
                            "\057\103\060\055\061\045\062\042\064\035\065\070\066" +
                            "\033\067\076\070\047\071\100\072\077\073\052\001\002" +
                            "\000\076\017\uff6e\020\uff6e\021\uff6e\022\uff6e\023\uff6e\024" +
                            "\uff6e\026\uff6e\027\uff6e\030\uff6e\031\uff6e\032\uff6e\033\uff6e" +
                            "\034\uff6e\035\uff6e\036\uff6e\037\uff6e\040\uff6e\041\uff6e\042" +
                            "\uff6e\043\uff6e\044\uff6e\045\uff6e\046\uff6e\047\uff6e\050\uff6e" +
                            "\051\uff6e\052\uff6e\054\uff6e\055\uff6e\056\uff6e\001\002\000" +
                            "\062\017\uff7a\020\uff7a\021\uff7a\022\uff7a\023\uff7a\024\uff7a" +
                            "\026\uff7a\027\uff7a\030\uff7a\032\uff7a\034\uff7a\036\uff7a\040" +
                            "\uff7a\042\uff7a\043\uff7a\044\uff7a\045\uff7a\046\uff7a\047\uff7a" +
                            "\050\uff7a\051\uff7a\054\uff7a\055\uff7a\056\uff7a\001\002\000" +
                            "\064\017\uff6a\020\uff6a\021\uff6a\022\uff6a\023\uff6a\024\uff6a" +
                            "\025\uff6a\026\uff6a\027\uff6a\030\uff6a\032\uff6a\034\uff6a\036" +
                            "\uff6a\040\uff6a\042\uff6a\043\uff6a\044\uff6a\045\uff6a\046\uff6a" +
                            "\047\uff6a\050\uff6a\051\uff6a\054\uff6a\055\uff6a\056\uff6a\001" +
                            "\002\000\062\017\uff76\020\uff76\021\uff76\022\uff76\023\uff76" +
                            "\024\uff76\026\uff76\027\uff76\030\uff76\032\uff76\034\uff76\036" +
                            "\uff76\040\uff76\042\uff76\043\uff76\044\uff76\045\uff76\046\uff76" +
                            "\047\uff76\050\uff76\051\uff76\054\uff76\055\uff76\056\uff76\001" +
                            "\002\000\060\020\uff82\021\uff82\022\uff82\023\uff82\024\uff82" +
                            "\026\uff82\027\uff82\030\uff82\032\uff82\034\uff82\036\uff82\040" +
                            "\uff82\042\uff82\043\uff82\044\uff82\045\uff82\046\uff82\047\uff82" +
                            "\050\uff82\051\uff82\054\uff82\055\uff82\056\uff82\001\002\000" +
                            "\064\017\uff66\020\uff66\021\uff66\022\uff66\023\uff66\024\uff66" +
                            "\025\uff66\026\uff66\027\uff66\030\uff66\032\uff66\034\uff66\036" +
                            "\uff66\040\uff66\042\uff66\043\uff66\044\uff66\045\uff66\046\uff66" +
                            "\047\uff66\050\uff66\051\uff66\054\uff66\055\uff66\056\uff66\001" +
                            "\002\000\060\020\uff86\021\154\022\uff86\023\uff86\024\uff86" +
                            "\026\uff86\027\153\030\uff86\032\uff86\034\uff86\036\uff86\040" +
                            "\uff86\042\uff86\043\uff86\044\uff86\045\uff86\046\uff86\047\uff86" +
                            "\050\uff86\051\uff86\054\uff86\055\uff86\056\uff86\001\002\000" +
                            "\054\020\uff8a\022\uff8a\023\uff8a\024\uff8a\026\uff8a\030\uff8a" +
                            "\032\uff8a\034\uff8a\036\uff8a\040\uff8a\042\uff8a\043\uff8a\044" +
                            "\uff8a\045\uff8a\046\uff8a\047\uff8a\050\uff8a\051\uff8a\054\uff8a" +
                            "\055\uff8a\056\uff8a\001\002\000\062\017\032\020\uff6d\021" +
                            "\uff6d\022\uff6d\023\uff6d\024\uff6d\026\uff6d\027\uff6d\030\uff6d" +
                            "\032\uff6d\034\uff6d\036\uff6d\040\uff6d\042\uff6d\043\uff6d\044" +
                            "\uff6d\045\uff6d\046\uff6d\047\uff6d\050\uff6d\051\uff6d\054\uff6d" +
                            "\055\uff6d\056\uff6d\001\002\000\054\020\uff8e\022\uff8e\023" +
                            "\uff8e\024\uff8e\026\uff8e\030\uff8e\032\uff8e\034\uff8e\036\131" +
                            "\040\132\042\130\043\uff8e\044\uff8e\045\uff8e\046\uff8e\047" +
                            "\uff8e\050\uff8e\051\uff8e\054\uff8e\055\uff8e\056\uff8e\001\002" +
                            "\000\062\017\uff7e\020\uff7d\021\uff7d\022\uff7d\023\uff7d\024" +
                            "\uff7d\026\uff7d\027\uff7d\030\uff7d\032\uff7d\034\uff7d\036\uff7d" +
                            "\040\uff7d\042\uff7d\043\uff7d\044\uff7d\045\uff7d\046\uff7d\047" +
                            "\uff7d\050\uff7d\051\uff7d\054\uff7d\055\uff7d\056\uff7d\001\002" +
                            "\000\046\020\uff91\022\uff91\023\uff91\024\uff91\026\uff91\030" +
                            "\uff91\032\125\034\126\043\uff91\044\uff91\045\uff91\046\uff91" +
                            "\047\uff91\050\uff91\051\uff91\054\uff91\055\uff91\056\uff91\001" +
                            "\002\000\042\020\uff96\022\uff96\023\uff96\024\uff96\026\uff96" +
                            "\030\uff96\043\122\044\120\045\123\046\121\047\uff96\050" +
                            "\uff96\051\uff96\054\uff96\055\uff96\056\uff96\001\002\000\004" +
                            "\017\032\001\002\000\032\020\uff9a\022\uff9a\023\uff9a\024" +
                            "\uff9a\026\uff9a\030\uff9a\047\114\050\115\051\116\054\uff9a" +
                            "\055\uff9a\056\uff9a\001\002\000\050\003\050\017\102\021" +
                            "\064\022\144\032\044\034\037\053\041\057\103\060\055" +
                            "\061\045\062\042\064\035\065\070\066\033\067\076\070" +
                            "\047\071\100\072\077\073\052\001\002\000\024\020\uff9c" +
                            "\022\uff9c\023\uff9c\024\uff9c\026\uff9c\030\uff9c\054\112\055" +
                            "\uff9c\056\uff9c\001\002\000\062\017\uff78\020\uff78\021\uff78" +
                            "\022\uff78\023\uff78\024\uff78\026\uff78\027\uff78\030\uff78\032" +
                            "\uff78\034\uff78\036\uff78\040\uff78\042\uff78\043\uff78\044\uff78" +
                            "\045\uff78\046\uff78\047\uff78\050\uff78\051\uff78\054\uff78\055" +
                            "\uff78\056\uff78\001\002\000\022\020\uff9e\022\uff9e\023\uff9e" +
                            "\024\uff9e\026\uff9e\030\uff9e\055\110\056\uff9e\001\002\000" +
                            "\064\017\uff6b\020\uff6b\021\uff6b\022\uff6b\023\uff6b\024\uff6b" +
                            "\025\uff6b\026\uff6b\027\uff6b\030\uff6b\032\uff6b\034\uff6b\036" +
                            "\uff6b\040\uff6b\042\uff6b\043\uff6b\044\uff6b\045\uff6b\046\uff6b" +
                            "\047\uff6b\050\uff6b\051\uff6b\054\uff6b\055\uff6b\056\uff6b\001" +
                            "\002\000\020\020\uffa0\022\uffa0\023\uffa0\024\uffa0\026\105" +
                            "\030\uffa0\056\uffa0\001\002\000\062\017\uff80\020\uff84\021" +
                            "\uff84\022\uff84\023\uff84\024\uff84\026\uff84\027\uff84\030\uff84" +
                            "\032\uff84\034\uff84\036\uff84\040\uff84\042\uff84\043\uff84\044" +
                            "\uff84\045\uff84\046\uff84\047\uff84\050\uff84\051\uff84\054\uff84" +
                            "\055\uff84\056\uff84\001\002\000\060\020\uff7c\021\uff7c\022" +
                            "\uff7c\023\uff7c\024\uff7c\026\uff7c\027\uff7c\030\uff7c\032\uff7c" +
                            "\034\uff7c\036\uff7c\040\uff7c\042\uff7c\043\uff7c\044\uff7c\045" +
                            "\uff7c\046\uff7c\047\uff7c\050\uff7c\051\uff7c\054\uff7c\055\uff7c" +
                            "\056\uff7c\001\002\000\062\017\uff77\020\uff77\021\uff77\022" +
                            "\uff77\023\uff77\024\uff77\026\uff77\027\uff77\030\uff77\032\uff77" +
                            "\034\uff77\036\uff77\040\uff77\042\uff77\043\uff77\044\uff77\045" +
                            "\uff77\046\uff77\047\uff77\050\uff77\051\uff77\054\uff77\055\uff77" +
                            "\056\uff77\001\002\000\006\020\uff54\030\uff54\001\002\000" +
                            "\062\017\uff65\020\uff65\021\uff65\022\uff65\023\uff65\024\uff65" +
                            "\026\uff65\027\uff65\030\uff65\032\uff65\034\uff65\036\uff65\040" +
                            "\uff65\042\uff65\043\uff65\044\uff65\045\uff65\046\uff65\047\uff65" +
                            "\050\uff65\051\uff65\054\uff65\055\uff65\056\uff65\001\002\000" +
                            "\064\017\uff67\020\uff67\021\uff67\022\uff67\023\uff67\024\uff67" +
                            "\025\uff67\026\uff67\027\uff67\030\uff67\032\uff67\034\uff67\036" +
                            "\uff67\040\uff67\042\uff67\043\uff67\044\uff67\045\uff67\046\uff67" +
                            "\047\uff67\050\uff67\051\uff67\054\uff67\055\uff67\056\uff67\001" +
                            "\002\000\064\017\uff69\020\uff69\021\uff69\022\uff69\023\uff69" +
                            "\024\uff69\025\uff69\026\uff69\027\uff69\030\uff69\032\uff69\034" +
                            "\uff69\036\uff69\040\uff69\042\uff69\043\uff69\044\uff69\045\uff69" +
                            "\046\uff69\047\uff69\050\uff69\051\uff69\054\uff69\055\uff69\056" +
                            "\uff69\001\002\000\072\003\uff56\017\uff56\020\uff56\021\uff56" +
                            "\022\uff56\023\uff56\024\uff56\026\uff56\027\uff56\030\uff56\032" +
                            "\uff56\034\uff56\036\uff56\040\uff56\042\uff56\043\uff56\044\uff56" +
                            "\045\uff56\046\uff56\047\uff56\050\uff56\051\uff56\054\uff56\055" +
                            "\uff56\056\uff56\057\uff56\060\uff56\062\uff56\001\002\000\046" +
                            "\003\050\017\102\021\064\032\044\034\037\053\041\057" +
                            "\103\060\055\061\045\062\042\064\035\065\070\066\033" +
                            "\067\076\070\047\071\100\072\077\073\052\001\002\000" +
                            "\076\017\uff6f\020\uff6f\021\uff6f\022\uff6f\023\uff6f\024\uff6f" +
                            "\026\uff6f\027\uff6f\030\uff6f\031\uff6f\032\uff6f\033\uff6f\034" +
                            "\uff6f\035\uff6f\036\uff6f\037\uff6f\040\uff6f\041\uff6f\042\uff6f" +
                            "\043\uff6f\044\uff6f\045\uff6f\046\uff6f\047\uff6f\050\uff6f\051" +
                            "\uff6f\052\uff6f\054\uff6f\055\uff6f\056\uff6f\001\002\000\006" +
                            "\020\106\026\105\001\002\000\046\003\050\017\102\021" +
                            "\064\032\044\034\037\053\041\057\103\060\055\061\045" +
                            "\062\042\064\035\065\070\066\033\067\076\070\047\071" +
                            "\100\072\077\073\052\001\002\000\062\017\uff7b\020\uff7b" +
                            "\021\uff7b\022\uff7b\023\uff7b\024\uff7b\026\uff7b\027\uff7b\030" +
                            "\uff7b\032\uff7b\034\uff7b\036\uff7b\040\uff7b\042\uff7b\043\uff7b" +
                            "\044\uff7b\045\uff7b\046\uff7b\047\uff7b\050\uff7b\051\uff7b\054" +
                            "\uff7b\055\uff7b\056\uff7b\001\002\000\022\020\uff9f\022\uff9f" +
                            "\023\uff9f\024\uff9f\026\uff9f\030\uff9f\055\110\056\uff9f\001" +
                            "\002\000\046\003\050\017\102\021\064\032\044\034\037" +
                            "\053\041\057\103\060\055\061\045\062\042\064\035\065" +
                            "\070\066\033\067\076\070\047\071\100\072\077\073\052" +
                            "\001\002\000\024\020\uff9d\022\uff9d\023\uff9d\024\uff9d\026" +
                            "\uff9d\030\uff9d\054\112\055\uff9d\056\uff9d\001\002\000\046" +
                            "\003\050\017\102\021\064\032\044\034\037\053\041\057" +
                            "\103\060\055\061\045\062\042\064\035\065\070\066\033" +
                            "\067\076\070\047\071\100\072\077\073\052\001\002\000" +
                            "\032\020\uff9b\022\uff9b\023\uff9b\024\uff9b\026\uff9b\030\uff9b" +
                            "\047\114\050\115\051\116\054\uff9b\055\uff9b\056\uff9b\001" +
                            "\002\000\046\003\050\017\102\021\064\032\044\034\037" +
                            "\053\041\057\103\060\055\061\045\062\042\064\035\065" +
                            "\070\066\033\067\076\070\047\071\100\072\077\073\052" +
                            "\001\002\000\046\003\050\017\102\021\064\032\044\034" +
                            "\037\053\041\057\103\060\055\061\045\062\042\064\035" +
                            "\065\070\066\033\067\076\070\047\071\100\072\077\073" +
                            "\052\001\002\000\046\003\050\017\102\021\064\032\044" +
                            "\034\037\053\041\057\103\060\055\061\045\062\042\064" +
                            "\035\065\070\066\033\067\076\070\047\071\100\072\077" +
                            "\073\052\001\002\000\042\020\uff98\022\uff98\023\uff98\024" +
                            "\uff98\026\uff98\030\uff98\043\122\044\120\045\123\046\121" +
                            "\047\uff98\050\uff98\051\uff98\054\uff98\055\uff98\056\uff98\001" +
                            "\002\000\046\003\050\017\102\021\064\032\044\034\037" +
                            "\053\041\057\103\060\055\061\045\062\042\064\035\065" +
                            "\070\066\033\067\076\070\047\071\100\072\077\073\052" +
                            "\001\002\000\046\003\050\017\102\021\064\032\044\034" +
                            "\037\053\041\057\103\060\055\061\045\062\042\064\035" +
                            "\065\070\066\033\067\076\070\047\071\100\072\077\073" +
                            "\052\001\002\000\046\003\050\017\102\021\064\032\044" +
                            "\034\037\053\041\057\103\060\055\061\045\062\042\064" +
                            "\035\065\070\066\033\067\076\070\047\071\100\072\077" +
                            "\073\052\001\002\000\046\003\050\017\102\021\064\032" +
                            "\044\034\037\053\041\057\103\060\055\061\045\062\042" +
                            "\064\035\065\070\066\033\067\076\070\047\071\100\072" +
                            "\077\073\052\001\002\000\046\020\uff94\022\uff94\023\uff94" +
                            "\024\uff94\026\uff94\030\uff94\032\125\034\126\043\uff94\044" +
                            "\uff94\045\uff94\046\uff94\047\uff94\050\uff94\051\uff94\054\uff94" +
                            "\055\uff94\056\uff94\001\002\000\046\003\050\017\102\021" +
                            "\064\032\044\034\037\053\041\057\103\060\055\061\045" +
                            "\062\042\064\035\065\070\066\033\067\076\070\047\071" +
                            "\100\072\077\073\052\001\002\000\046\003\050\017\102" +
                            "\021\064\032\044\034\037\053\041\057\103\060\055\061" +
                            "\045\062\042\064\035\065\070\066\033\067\076\070\047" +
                            "\071\100\072\077\073\052\001\002\000\054\020\uff8f\022" +
                            "\uff8f\023\uff8f\024\uff8f\026\uff8f\030\uff8f\032\uff8f\034\uff8f" +
                            "\036\131\040\132\042\130\043\uff8f\044\uff8f\045\uff8f\046" +
                            "\uff8f\047\uff8f\050\uff8f\051\uff8f\054\uff8f\055\uff8f\056\uff8f" +
                            "\001\002\000\046\003\050\017\102\021\064\032\044\034" +
                            "\037\053\041\057\103\060\055\061\045\062\042\064\035" +
                            "\065\070\066\033\067\076\070\047\071\100\072\077\073" +
                            "\052\001\002\000\046\003\050\017\102\021\064\032\044" +
                            "\034\037\053\041\057\103\060\055\061\045\062\042\064" +
                            "\035\065\070\066\033\067\076\070\047\071\100\072\077" +
                            "\073\052\001\002\000\046\003\050\017\102\021\064\032" +
                            "\044\034\037\053\041\057\103\060\055\061\045\062\042" +
                            "\064\035\065\070\066\033\067\076\070\047\071\100\072" +
                            "\077\073\052\001\002\000\054\020\uff8c\022\uff8c\023\uff8c" +
                            "\024\uff8c\026\uff8c\030\uff8c\032\uff8c\034\uff8c\036\uff8c\040" +
                            "\uff8c\042\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c" +
                            "\050\uff8c\051\uff8c\054\uff8c\055\uff8c\056\uff8c\001\002\000" +
                            "\054\020\uff8d\022\uff8d\023\uff8d\024\uff8d\026\uff8d\030\uff8d" +
                            "\032\uff8d\034\uff8d\036\uff8d\040\uff8d\042\uff8d\043\uff8d\044" +
                            "\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d\051\uff8d\054\uff8d" +
                            "\055\uff8d\056\uff8d\001\002\000\054\020\uff8b\022\uff8b\023" +
                            "\uff8b\024\uff8b\026\uff8b\030\uff8b\032\uff8b\034\uff8b\036\uff8b" +
                            "\040\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b\047" +
                            "\uff8b\050\uff8b\051\uff8b\054\uff8b\055\uff8b\056\uff8b\001\002" +
                            "\000\054\020\uff90\022\uff90\023\uff90\024\uff90\026\uff90\030" +
                            "\uff90\032\uff90\034\uff90\036\131\040\132\042\130\043\uff90" +
                            "\044\uff90\045\uff90\046\uff90\047\uff90\050\uff90\051\uff90\054" +
                            "\uff90\055\uff90\056\uff90\001\002\000\046\020\uff92\022\uff92" +
                            "\023\uff92\024\uff92\026\uff92\030\uff92\032\125\034\126\043" +
                            "\uff92\044\uff92\045\uff92\046\uff92\047\uff92\050\uff92\051\uff92" +
                            "\054\uff92\055\uff92\056\uff92\001\002\000\046\020\uff95\022" +
                            "\uff95\023\uff95\024\uff95\026\uff95\030\uff95\032\125\034\126" +
                            "\043\uff95\044\uff95\045\uff95\046\uff95\047\uff95\050\uff95\051" +
                            "\uff95\054\uff95\055\uff95\056\uff95\001\002\000\046\020\uff93" +
                            "\022\uff93\023\uff93\024\uff93\026\uff93\030\uff93\032\125\034" +
                            "\126\043\uff93\044\uff93\045\uff93\046\uff93\047\uff93\050\uff93" +
                            "\051\uff93\054\uff93\055\uff93\056\uff93\001\002\000\042\020" +
                            "\uff99\022\uff99\023\uff99\024\uff99\026\uff99\030\uff99\043\122" +
                            "\044\120\045\123\046\121\047\uff99\050\uff99\051\uff99\054" +
                            "\uff99\055\uff99\056\uff99\001\002\000\042\020\uff97\022\uff97" +
                            "\023\uff97\024\uff97\026\uff97\030\uff97\043\122\044\120\045" +
                            "\123\046\121\047\uff97\050\uff97\051\uff97\054\uff97\055\uff97" +
                            "\056\uff97\001\002\000\062\017\uff64\020\uff64\021\uff64\022" +
                            "\uff64\023\uff64\024\uff64\026\uff64\027\uff64\030\uff64\032\uff64" +
                            "\034\uff64\036\uff64\040\uff64\042\uff64\043\uff64\044\uff64\045" +
                            "\uff64\046\uff64\047\uff64\050\uff64\051\uff64\054\uff64\055\uff64" +
                            "\056\uff64\001\002\000\006\022\150\030\147\001\002\000" +
                            "\006\022\uff62\030\uff62\001\002\000\046\003\050\017\102" +
                            "\021\064\032\044\034\037\053\041\057\103\060\055\061" +
                            "\045\062\042\064\035\065\070\066\033\067\076\070\047" +
                            "\071\100\072\077\073\052\001\002\000\062\017\uff63\020" +
                            "\uff63\021\uff63\022\uff63\023\uff63\024\uff63\026\uff63\027\uff63" +
                            "\030\uff63\032\uff63\034\uff63\036\uff63\040\uff63\042\uff63\043" +
                            "\uff63\044\uff63\045\uff63\046\uff63\047\uff63\050\uff63\051\uff63" +
                            "\054\uff63\055\uff63\056\uff63\001\002\000\006\022\uff61\030" +
                            "\uff61\001\002\000\062\017\uff73\020\uff73\021\uff73\022\uff73" +
                            "\023\uff73\024\uff73\026\uff73\027\uff73\030\uff73\032\uff73\034" +
                            "\uff73\036\uff73\040\uff73\042\uff73\043\uff73\044\uff73\045\uff73" +
                            "\046\uff73\047\uff73\050\uff73\051\uff73\054\uff73\055\uff73\056" +
                            "\uff73\001\002\000\004\057\157\001\002\000\046\003\050" +
                            "\017\102\021\064\032\044\034\037\053\041\057\103\060" +
                            "\055\061\045\062\042\064\035\065\070\066\033\067\076" +
                            "\070\047\071\100\072\077\073\052\001\002\000\004\022" +
                            "\156\001\002\000\076\017\uff75\020\uff75\021\uff75\022\uff75" +
                            "\023\uff75\024\uff75\026\uff75\027\uff75\030\uff75\031\uff75\032" +
                            "\uff75\033\uff75\034\uff75\035\uff75\036\uff75\037\uff75\040\uff75" +
                            "\041\uff75\042\uff75\043\uff75\044\uff75\045\uff75\046\uff75\047" +
                            "\uff75\050\uff75\051\uff75\052\uff75\054\uff75\055\uff75\056\uff75" +
                            "\001\002\000\076\017\uff74\020\uff74\021\uff74\022\uff74\023" +
                            "\uff74\024\uff74\026\uff74\027\uff74\030\uff74\031\uff74\032\uff74" +
                            "\033\uff74\034\uff74\035\uff74\036\uff74\037\uff74\040\uff74\041" +
                            "\uff74\042\uff74\043\uff74\044\uff74\045\uff74\046\uff74\047\uff74" +
                            "\050\uff74\051\uff74\052\uff74\054\uff74\055\uff74\056\uff74\001" +
                            "\002\000\054\020\uff89\022\uff89\023\uff89\024\uff89\026\uff89" +
                            "\030\uff89\032\uff89\034\uff89\036\uff89\040\uff89\042\uff89\043" +
                            "\uff89\044\uff89\045\uff89\046\uff89\047\uff89\050\uff89\051\uff89" +
                            "\054\uff89\055\uff89\056\uff89\001\002\000\006\060\164\062" +
                            "\165\001\002\000\072\003\uff72\017\uff72\020\uff72\021\uff72" +
                            "\022\uff72\023\uff72\024\uff72\026\uff72\027\uff72\030\uff72\032" +
                            "\uff72\034\uff72\036\uff72\040\uff72\042\uff72\043\uff72\044\uff72" +
                            "\045\uff72\046\uff72\047\uff72\050\uff72\051\uff72\054\uff72\055" +
                            "\uff72\056\uff72\057\uff72\060\uff72\062\uff72\001\002\000\004" +
                            "\046\171\001\002\000\014\003\uff58\044\030\046\uff58\057" +
                            "\uff58\062\uff58\001\002\000\014\003\uff5a\044\166\046\uff5a" +
                            "\057\uff5a\062\uff5a\001\002\000\006\060\164\062\165\001" +
                            "\002\000\004\046\170\001\002\000\012\003\uff59\046\uff59" +
                            "\057\uff59\062\uff59\001\002\000\004\017\032\001\002\000" +
                            "\072\003\uff70\017\uff70\020\uff70\021\uff70\022\uff70\023\uff70" +
                            "\024\uff70\026\uff70\027\uff70\030\uff70\032\uff70\034\uff70\036" +
                            "\uff70\040\uff70\042\uff70\043\uff70\044\uff70\045\uff70\046\uff70" +
                            "\047\uff70\050\uff70\051\uff70\054\uff70\055\uff70\056\uff70\057" +
                            "\uff70\060\uff70\062\uff70\001\002\000\054\020\uff87\022\uff87" +
                            "\023\uff87\024\uff87\026\uff87\030\uff87\032\uff87\034\uff87\036" +
                            "\uff87\040\uff87\042\uff87\043\uff87\044\uff87\045\uff87\046\uff87" +
                            "\047\uff87\050\uff87\051\uff87\054\uff87\055\uff87\056\uff87\001" +
                            "\002\000\054\020\uff88\022\uff88\023\uff88\024\uff88\026\uff88" +
                            "\030\uff88\032\uff88\034\uff88\036\uff88\040\uff88\042\uff88\043" +
                            "\uff88\044\uff88\045\uff88\046\uff88\047\uff88\050\uff88\051\uff88" +
                            "\054\uff88\055\uff88\056\uff88\001\002\000\046\003\050\017" +
                            "\102\021\064\032\044\034\037\053\041\057\103\060\055" +
                            "\061\045\062\042\064\035\065\070\066\033\067\076\070" +
                            "\047\071\100\072\077\073\052\001\002\000\072\003\uff55" +
                            "\017\uff55\020\uff55\021\uff55\022\uff55\023\uff55\024\uff55\026" +
                            "\uff55\027\uff55\030\uff55\032\uff55\034\uff55\036\uff55\040\uff55" +
                            "\042\uff55\043\uff55\044\uff55\045\uff55\046\uff55\047\uff55\050" +
                            "\uff55\051\uff55\054\uff55\055\uff55\056\uff55\057\uff55\060\uff55" +
                            "\062\uff55\001\002\000\006\020\uff53\030\uff53\001\002\000" +
                            "\004\046\201\001\002\000\014\003\uff57\046\uff57\057\uff57" +
                            "\060\uff57\062\uff57\001\002\000\016\002\ufff1\003\ufff1\013" +
                            "\ufff1\014\ufff1\060\ufff1\062\ufff1\001\002\000\016\002\ufff0" +
                            "\003\ufff0\013\ufff0\014\ufff0\060\ufff0\062\ufff0\001\002\000" +
                            "\010\003\206\060\210\062\211\001\002\000\010\003\206" +
                            "\060\210\062\211\001\002\000\010\003\uffda\052\uffda\056" +
                            "\uffda\001\002\000\004\056\213\001\002\000\010\003\uffdb" +
                            "\052\uffdb\056\uffdb\001\002\000\004\003\212\001\002\000" +
                            "\010\003\uffd9\052\uffd9\056\uffd9\001\002\000\016\002\uffe5" +
                            "\003\uffe5\013\uffe5\014\uffe5\060\uffe5\062\uffe5\001\002\000" +
                            "\006\003\216\052\215\001\002\000\050\003\050\017\102" +
                            "\021\064\023\221\032\044\034\037\053\041\057\103\060" +
                            "\055\061\045\062\042\064\035\065\070\066\033\067\076" +
                            "\070\047\071\100\072\077\073\052\001\002\000\004\056" +
                            "\217\001\002\000\016\002\uffe4\003\uffe4\013\uffe4\014\uffe4" +
                            "\060\uffe4\062\uffe4\001\002\000\010\024\uffdf\030\uffdf\056" +
                            "\uffdf\001\002\000\012\013\233\024\226\060\027\062\017" +
                            "\001\002\000\004\056\224\001\002\000\010\024\uffe0\030" +
                            "\uffe0\056\uffe0\001\002\000\016\002\uffe6\003\uffe6\013\uffe6" +
                            "\014\uffe6\060\uffe6\062\uffe6\001\002\000\006\024\uff5e\030" +
                            "\240\001\002\000\010\024\uff60\030\uff60\056\uff60\001\002" +
                            "\000\004\024\237\001\002\000\004\052\235\001\002\000" +
                            "\006\024\uff5b\030\uff5b\001\002\000\006\024\uff5c\030\uff5c" +
                            "\001\002\000\006\060\027\062\017\001\002\000\010\024" +
                            "\uffe1\030\uffe1\056\uffe1\001\002\000\050\003\050\017\102" +
                            "\021\064\023\221\032\044\034\037\053\041\057\103\060" +
                            "\055\061\045\062\042\064\035\065\070\066\033\067\076" +
                            "\070\047\071\100\072\077\073\052\001\002\000\010\024" +
                            "\uffe8\030\uffe8\056\uffe8\001\002\000\010\024\uff5f\030\uff5f" +
                            "\056\uff5f\001\002\000\010\013\233\060\027\062\017\001" +
                            "\002\000\004\024\uff5d\001\002\000\022\003\uffdd\011\uffdd" +
                            "\017\uffdd\020\uffdd\024\uffdd\030\uffdd\052\uffdd\056\uffdd\001" +
                            "\002\000\022\003\uffde\011\uffde\017\uffde\020\uffde\024\uffde" +
                            "\030\uffde\052\uffde\056\uffde\001\002\000\004\003\246\001" +
                            "\002\000\010\024\uffe7\030\uffe7\056\uffe7\001\002\000\022" +
                            "\003\uffdc\011\uffdc\017\uffdc\020\uffdc\024\uffdc\030\uffdc\052" +
                            "\uffdc\056\uffdc\001\002\000\006\060\164\062\165\001\002" +
                            "\000\004\046\251\001\002\000\014\003\uff59\017\032\057" +
                            "\uff59\060\uff59\062\uff59\001\002\000\016\011\uffe9\017\uffe9" +
                            "\020\uffe9\030\uffe9\052\uffe9\056\uffe9\001\002\000\070\002" +
                            "\uffea\003\uffea\004\uffea\006\uffea\007\uffea\010\uffea\012\uffea" +
                            "\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\021\uffea\023" +
                            "\uffea\024\uffea\057\uffea\060\uffea\061\uffea\062\uffea\064\uffea" +
                            "\065\uffea\066\uffea\067\uffea\070\uffea\071\uffea\072\uffea\073" +
                            "\uffea\001\002\000\004\023\270\001\002\000\012\003\261" +
                            "\020\262\060\164\062\165\001\002\000\070\002\uffeb\003" +
                            "\uffeb\004\uffeb\006\uffeb\007\uffeb\010\uffeb\012\uffeb\013\uffeb" +
                            "\014\uffeb\015\uffeb\016\uffeb\017\uffeb\021\uffeb\023\uffeb\024" +
                            "\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\064\uffeb\065\uffeb" +
                            "\066\uffeb\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\001" +
                            "\002\000\006\020\264\030\263\001\002\000\006\020\uffd5" +
                            "\030\uffd5\001\002\000\006\020\uffd3\030\uffd3\001\002\000" +
                            "\004\023\uffd7\001\002\000\010\003\266\060\164\062\165" +
                            "\001\002\000\004\023\uffd6\001\002\000\006\020\uffd4\030" +
                            "\uffd4\001\002\000\006\020\uffd2\030\uffd2\001\002\000\022" +
                            "\002\uffd8\003\uffd8\013\uffd8\014\uffd8\015\uffd8\024\uffd8\060" +
                            "\uffd8\062\uffd8\001\002\000\060\003\307\004\301\006\314" +
                            "\007\274\010\321\012\305\013\272\017\102\021\064\023" +
                            "\270\024\uffc4\057\103\060\311\061\045\062\017\064\035" +
                            "\065\070\066\033\067\076\070\047\071\100\072\077\073" +
                            "\052\001\002\000\064\003\uffed\004\uffed\006\uffed\007\uffed" +
                            "\010\uffed\012\uffed\013\uffed\015\uffed\016\uffed\017\uffed\021" +
                            "\uffed\023\uffed\024\uffed\057\uffed\060\uffed\061\uffed\062\uffed" +
                            "\064\uffed\065\uffed\066\uffed\067\uffed\070\uffed\071\uffed\072" +
                            "\uffed\073\uffed\001\002\000\006\060\027\062\017\001\002" +
                            "\000\004\024\u010d\001\002\000\006\060\164\062\165\001" +
                            "\002\000\024\017\uff81\021\uff85\027\uff85\031\uffb0\033\uffb0" +
                            "\035\uffb0\037\uffb0\041\uffb0\052\uffb0\001\002\000\062\003" +
                            "\uffbe\004\uffbe\006\uffbe\007\uffbe\010\uffbe\012\uffbe\013\uffbe" +
                            "\016\uffbe\017\uffbe\021\uffbe\023\uffbe\024\uffbe\057\uffbe\060" +
                            "\uffbe\061\uffbe\062\uffbe\064\uffbe\065\uffbe\066\uffbe\067\uffbe" +
                            "\070\uffbe\071\uffbe\072\uffbe\073\uffbe\001\002\000\012\017" +
                            "\uff7f\021\uff83\027\uff83\056\u0108\001\002\000\016\031\371" +
                            "\033\367\035\372\037\366\041\373\052\370\001\002\000" +
                            "\046\003\050\017\102\021\064\032\044\034\037\053\041" +
                            "\057\103\060\055\061\045\062\042\064\035\065\070\066" +
                            "\033\067\076\070\047\071\100\072\077\073\052\001\002" +
                            "\000\062\003\uffc2\004\uffc2\006\uffc2\007\uffc2\010\uffc2\012" +
                            "\uffc2\013\uffc2\016\uffc2\017\uffc2\021\uffc2\023\uffc2\024\uffc2" +
                            "\057\uffc2\060\uffc2\061\uffc2\062\uffc2\064\uffc2\065\uffc2\066" +
                            "\uffc2\067\uffc2\070\uffc2\071\uffc2\072\uffc2\073\uffc2\001\002" +
                            "\000\062\003\uffc1\004\uffc1\006\uffc1\007\uffc1\010\uffc1\012" +
                            "\uffc1\013\uffc1\016\uffc1\017\uffc1\021\uffc1\023\uffc1\024\uffc1" +
                            "\057\uffc1\060\uffc1\061\uffc1\062\uffc1\064\uffc1\065\uffc1\066" +
                            "\uffc1\067\uffc1\070\uffc1\071\uffc1\072\uffc1\073\uffc1\001\002" +
                            "\000\024\017\uff7a\021\uff7a\027\uff7a\031\uffb1\033\uffb1\035" +
                            "\uffb1\037\uffb1\041\uffb1\052\uffb1\001\002\000\050\003\050" +
                            "\017\102\021\064\032\044\034\037\053\041\056\356\057" +
                            "\103\060\055\061\045\062\042\064\035\065\070\066\033" +
                            "\067\076\070\047\071\100\072\077\073\052\001\002\000" +
                            "\062\003\uffb8\004\uffb8\006\uffb8\007\uffb8\010\uffb8\012\uffb8" +
                            "\013\uffb8\016\uffb8\017\uffb8\021\uffb8\023\uffb8\024\uffb8\057" +
                            "\uffb8\060\uffb8\061\uffb8\062\uffb8\064\uffb8\065\uffb8\066\uffb8" +
                            "\067\uffb8\070\uffb8\071\uffb8\072\uffb8\073\uffb8\001\002\000" +
                            "\012\017\uff76\021\uff76\027\uff76\056\354\001\002\000\006" +
                            "\021\154\027\153\001\002\000\020\003\uff58\017\032\021" +
                            "\uff6d\027\uff6d\044\030\057\uff58\062\uff58\001\002\000\062" +
                            "\003\uffbf\004\uffbf\006\uffbf\007\uffbf\010\uffbf\012\uffbf\013" +
                            "\uffbf\016\uffbf\017\uffbf\021\uffbf\023\uffbf\024\uffbf\057\uffbf" +
                            "\060\uffbf\061\uffbf\062\uffbf\064\uffbf\065\uffbf\066\uffbf\067" +
                            "\uffbf\070\uffbf\071\uffbf\072\uffbf\073\uffbf\001\002\000\062" +
                            "\003\uffc0\004\uffc0\006\uffc0\007\uffc0\010\uffc0\012\uffc0\013" +
                            "\uffc0\016\uffc0\017\uffc0\021\uffc0\023\uffc0\024\uffc0\057\uffc0" +
                            "\060\uffc0\061\uffc0\062\uffc0\064\uffc0\065\uffc0\066\uffc0\067" +
                            "\uffc0\070\uffc0\071\uffc0\072\uffc0\073\uffc0\001\002\000\046" +
                            "\003\050\017\102\021\064\032\044\034\037\053\041\057" +
                            "\103\060\055\061\045\062\042\064\035\065\070\066\033" +
                            "\067\076\070\047\071\100\072\077\073\052\001\002\000" +
                            "\062\003\uffc3\004\uffc3\006\uffc3\007\uffc3\010\uffc3\012\uffc3" +
                            "\013\uffc3\016\uffc3\017\uffc3\021\uffc3\023\uffc3\024\uffc3\057" +
                            "\uffc3\060\uffc3\061\uffc3\062\uffc3\064\uffc3\065\uffc3\066\uffc3" +
                            "\067\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3\001\002\000" +
                            "\062\003\uffbc\004\uffbc\006\uffbc\007\uffbc\010\uffbc\012\uffbc" +
                            "\013\uffbc\016\uffbc\017\uffbc\021\uffbc\023\uffbc\024\uffbc\057" +
                            "\uffbc\060\uffbc\061\uffbc\062\uffbc\064\uffbc\065\uffbc\066\uffbc" +
                            "\067\uffbc\070\uffbc\071\uffbc\072\uffbc\073\uffbc\001\002\000" +
                            "\006\052\235\056\256\001\002\000\004\056\333\001\002" +
                            "\000\046\003\050\017\102\021\064\032\044\034\037\053" +
                            "\041\057\103\060\055\061\045\062\042\064\035\065\070" +
                            "\066\033\067\076\070\047\071\100\072\077\073\052\001" +
                            "\002\000\024\017\uff80\021\uff84\027\uff84\031\uffaf\033\uffaf" +
                            "\035\uffaf\037\uffaf\041\uffaf\052\uffaf\001\002\000\016\003" +
                            "\242\017\uff77\021\uff77\027\uff77\057\243\062\244\001\002" +
                            "\000\060\003\307\004\301\006\314\007\274\010\321\012" +
                            "\305\013\272\017\102\021\064\023\270\024\uffc4\057\103" +
                            "\060\311\061\045\062\017\064\035\065\070\066\033\067" +
                            "\076\070\047\071\100\072\077\073\052\001\002\000\062" +
                            "\003\uffbd\004\uffbd\006\uffbd\007\uffbd\010\uffbd\012\uffbd\013" +
                            "\uffbd\016\uffbd\017\uffbd\021\uffbd\023\uffbd\024\uffbd\057\uffbd" +
                            "\060\uffbd\061\uffbd\062\uffbd\064\uffbd\065\uffbd\066\uffbd\067" +
                            "\uffbd\070\uffbd\071\uffbd\072\uffbd\073\uffbd\001\002\000\062" +
                            "\003\uffbb\004\uffbb\006\uffbb\007\uffbb\010\uffbb\012\uffbb\013" +
                            "\uffbb\016\uffbb\017\uffbb\021\uffbb\023\uffbb\024\uffbb\057\uffbb" +
                            "\060\uffbb\061\uffbb\062\uffbb\064\uffbb\065\uffbb\066\uffbb\067" +
                            "\uffbb\070\uffbb\071\uffbb\072\uffbb\073\uffbb\001\002\000\064" +
                            "\003\uffec\004\uffec\006\uffec\007\uffec\010\uffec\012\uffec\013" +
                            "\uffec\015\uffec\016\uffec\017\uffec\021\uffec\023\uffec\024\uffec" +
                            "\057\uffec\060\uffec\061\uffec\062\uffec\064\uffec\065\uffec\066" +
                            "\uffec\067\uffec\070\uffec\071\uffec\072\uffec\073\uffec\001\002" +
                            "\000\004\024\uffc5\001\002\000\004\023\270\001\002\000" +
                            "\062\003\uffa2\004\uffa2\006\uffa2\007\uffa2\010\uffa2\012\uffa2" +
                            "\013\uffa2\016\uffa2\017\uffa2\021\uffa2\023\uffa2\024\uffa2\057" +
                            "\uffa2\060\uffa2\061\uffa2\062\uffa2\064\uffa2\065\uffa2\066\uffa2" +
                            "\067\uffa2\070\uffa2\071\uffa2\072\uffa2\073\uffa2\001\002\000" +
                            "\064\003\uffe3\004\uffe3\006\uffe3\007\uffe3\010\uffe3\012\uffe3" +
                            "\013\uffe3\015\uffe3\016\uffe3\017\uffe3\021\uffe3\023\uffe3\024" +
                            "\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\064\uffe3\065\uffe3" +
                            "\066\uffe3\067\uffe3\070\uffe3\071\uffe3\072\uffe3\073\uffe3\001" +
                            "\002\000\004\023\335\001\002\000\022\016\340\064\035" +
                            "\065\070\066\033\070\047\071\100\072\077\073\052\001" +
                            "\002\000\004\025\352\001\002\000\024\016\345\024\343" +
                            "\064\035\065\070\066\033\070\047\071\100\072\077\073" +
                            "\052\001\002\000\004\025\341\001\002\000\056\003\307" +
                            "\004\301\006\314\007\274\010\321\012\305\013\272\017" +
                            "\102\021\064\023\270\057\103\060\311\061\045\062\017" +
                            "\064\035\065\070\066\033\067\076\070\047\071\100\072" +
                            "\077\073\052\001\002\000\024\016\uffa5\024\uffa5\064\uffa5" +
                            "\065\uffa5\066\uffa5\070\uffa5\071\uffa5\072\uffa5\073\uffa5\001" +
                            "\002\000\062\003\uffa7\004\uffa7\006\uffa7\007\uffa7\010\uffa7" +
                            "\012\uffa7\013\uffa7\016\uffa7\017\uffa7\021\uffa7\023\uffa7\024" +
                            "\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\064\uffa7\065\uffa7" +
                            "\066\uffa7\067\uffa7\070\uffa7\071\uffa7\072\uffa7\073\uffa7\001" +
                            "\002\000\004\025\350\001\002\000\004\025\346\001\002" +
                            "\000\056\003\307\004\301\006\314\007\274\010\321\012" +
                            "\305\013\272\017\102\021\064\023\270\057\103\060\311" +
                            "\061\045\062\017\064\035\065\070\066\033\067\076\070" +
                            "\047\071\100\072\077\073\052\001\002\000\024\016\uffa3" +
                            "\024\uffa3\064\uffa3\065\uffa3\066\uffa3\070\uffa3\071\uffa3\072" +
                            "\uffa3\073\uffa3\001\002\000\056\003\307\004\301\006\314" +
                            "\007\274\010\321\012\305\013\272\017\102\021\064\023" +
                            "\270\057\103\060\311\061\045\062\017\064\035\065\070" +
                            "\066\033\067\076\070\047\071\100\072\077\073\052\001" +
                            "\002\000\024\016\uffa4\024\uffa4\064\uffa4\065\uffa4\066\uffa4" +
                            "\070\uffa4\071\uffa4\072\uffa4\073\uffa4\001\002\000\056\003" +
                            "\307\004\301\006\314\007\274\010\321\012\305\013\272" +
                            "\017\102\021\064\023\270\057\103\060\311\061\045\062" +
                            "\017\064\035\065\070\066\033\067\076\070\047\071\100" +
                            "\072\077\073\052\001\002\000\024\016\uffa6\024\uffa6\064" +
                            "\uffa6\065\uffa6\066\uffa6\070\uffa6\071\uffa6\072\uffa6\073\uffa6" +
                            "\001\002\000\062\003\uffba\004\uffba\006\uffba\007\uffba\010" +
                            "\uffba\012\uffba\013\uffba\016\uffba\017\uffba\021\uffba\023\uffba" +
                            "\024\uffba\057\uffba\060\uffba\061\uffba\062\uffba\064\uffba\065" +
                            "\uffba\066\uffba\067\uffba\070\uffba\071\uffba\072\uffba\073\uffba" +
                            "\001\002\000\004\056\357\001\002\000\062\003\uffad\004" +
                            "\uffad\006\uffad\007\uffad\010\uffad\012\uffad\013\uffad\016\uffad" +
                            "\017\uffad\021\uffad\023\uffad\024\uffad\057\uffad\060\uffad\061" +
                            "\uffad\062\uffad\064\uffad\065\uffad\066\uffad\067\uffad\070\uffad" +
                            "\071\uffad\072\uffad\073\uffad\001\002\000\062\003\uffac\004" +
                            "\uffac\006\uffac\007\uffac\010\uffac\012\uffac\013\uffac\016\uffac" +
                            "\017\uffac\021\uffac\023\uffac\024\uffac\057\uffac\060\uffac\061" +
                            "\uffac\062\uffac\064\uffac\065\uffac\066\uffac\067\uffac\070\uffac" +
                            "\071\uffac\072\uffac\073\uffac\001\002\000\004\023\270\001" +
                            "\002\000\064\003\uffa8\004\uffa8\005\362\006\uffa8\007\uffa8" +
                            "\010\uffa8\012\uffa8\013\uffa8\016\uffa8\017\uffa8\021\uffa8\023" +
                            "\uffa8\024\uffa8\057\uffa8\060\uffa8\061\uffa8\062\uffa8\064\uffa8" +
                            "\065\uffa8\066\uffa8\067\uffa8\070\uffa8\071\uffa8\072\uffa8\073" +
                            "\uffa8\001\002\000\006\004\301\023\270\001\002\000\062" +
                            "\003\uffab\004\uffab\006\uffab\007\uffab\010\uffab\012\uffab\013" +
                            "\uffab\016\uffab\017\uffab\021\uffab\023\uffab\024\uffab\057\uffab" +
                            "\060\uffab\061\uffab\062\uffab\064\uffab\065\uffab\066\uffab\067" +
                            "\uffab\070\uffab\071\uffab\072\uffab\073\uffab\001\002\000\062" +
                            "\003\uffa9\004\uffa9\006\uffa9\007\uffa9\010\uffa9\012\uffa9\013" +
                            "\uffa9\016\uffa9\017\uffa9\021\uffa9\023\uffa9\024\uffa9\057\uffa9" +
                            "\060\uffa9\061\uffa9\062\uffa9\064\uffa9\065\uffa9\066\uffa9\067" +
                            "\uffa9\070\uffa9\071\uffa9\072\uffa9\073\uffa9\001\002\000\062" +
                            "\003\uffaa\004\uffaa\006\uffaa\007\uffaa\010\uffaa\012\uffaa\013" +
                            "\uffaa\016\uffaa\017\uffaa\021\uffaa\023\uffaa\024\uffaa\057\uffaa" +
                            "\060\uffaa\061\uffaa\062\uffaa\064\uffaa\065\uffaa\066\uffaa\067" +
                            "\uffaa\070\uffaa\071\uffaa\072\uffaa\073\uffaa\001\002\000\046" +
                            "\003\050\017\102\021\064\032\044\034\037\053\041\057" +
                            "\103\060\055\061\045\062\042\064\035\065\070\066\033" +
                            "\067\076\070\047\071\100\072\077\073\052\001\002\000" +
                            "\046\003\050\017\102\021\064\032\044\034\037\053\041" +
                            "\057\103\060\055\061\045\062\042\064\035\065\070\066" +
                            "\033\067\076\070\047\071\100\072\077\073\052\001\002" +
                            "\000\046\003\050\017\102\021\064\032\044\034\037\053" +
                            "\041\057\103\060\055\061\045\062\042\064\035\065\070" +
                            "\066\033\067\076\070\047\071\100\072\077\073\052\001" +
                            "\002\000\046\003\050\017\102\021\064\032\044\034\037" +
                            "\053\041\057\103\060\055\061\045\062\042\064\035\065" +
                            "\070\066\033\067\076\070\047\071\100\072\077\073\052" +
                            "\001\002\000\046\003\050\017\102\021\064\032\044\034" +
                            "\037\053\041\057\103\060\055\061\045\062\042\064\035" +
                            "\065\070\066\033\067\076\070\047\071\100\072\077\073" +
                            "\052\001\002\000\046\003\050\017\102\021\064\032\044" +
                            "\034\037\053\041\057\103\060\055\061\045\062\042\064" +
                            "\035\065\070\066\033\067\076\070\047\071\100\072\077" +
                            "\073\052\001\002\000\004\056\375\001\002\000\062\003" +
                            "\uffb2\004\uffb2\006\uffb2\007\uffb2\010\uffb2\012\uffb2\013\uffb2" +
                            "\016\uffb2\017\uffb2\021\uffb2\023\uffb2\024\uffb2\057\uffb2\060" +
                            "\uffb2\061\uffb2\062\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2" +
                            "\070\uffb2\071\uffb2\072\uffb2\073\uffb2\001\002\000\004\056" +
                            "\377\001\002\000\062\003\uffb4\004\uffb4\006\uffb4\007\uffb4" +
                            "\010\uffb4\012\uffb4\013\uffb4\016\uffb4\017\uffb4\021\uffb4\023" +
                            "\uffb4\024\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\064\uffb4" +
                            "\065\uffb4\066\uffb4\067\uffb4\070\uffb4\071\uffb4\072\uffb4\073" +
                            "\uffb4\001\002\000\004\056\u0101\001\002\000\062\003\uffb6" +
                            "\004\uffb6\006\uffb6\007\uffb6\010\uffb6\012\uffb6\013\uffb6\016" +
                            "\uffb6\017\uffb6\021\uffb6\023\uffb6\024\uffb6\057\uffb6\060\uffb6" +
                            "\061\uffb6\062\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6\070" +
                            "\uffb6\071\uffb6\072\uffb6\073\uffb6\001\002\000\004\056\u0103" +
                            "\001\002\000\062\003\uffb7\004\uffb7\006\uffb7\007\uffb7\010" +
                            "\uffb7\012\uffb7\013\uffb7\016\uffb7\017\uffb7\021\uffb7\023\uffb7" +
                            "\024\uffb7\057\uffb7\060\uffb7\061\uffb7\062\uffb7\064\uffb7\065" +
                            "\uffb7\066\uffb7\067\uffb7\070\uffb7\071\uffb7\072\uffb7\073\uffb7" +
                            "\001\002\000\004\056\u0105\001\002\000\062\003\uffb5\004" +
                            "\uffb5\006\uffb5\007\uffb5\010\uffb5\012\uffb5\013\uffb5\016\uffb5" +
                            "\017\uffb5\021\uffb5\023\uffb5\024\uffb5\057\uffb5\060\uffb5\061" +
                            "\uffb5\062\uffb5\064\uffb5\065\uffb5\066\uffb5\067\uffb5\070\uffb5" +
                            "\071\uffb5\072\uffb5\073\uffb5\001\002\000\004\056\u0107\001" +
                            "\002\000\062\003\uffb3\004\uffb3\006\uffb3\007\uffb3\010\uffb3" +
                            "\012\uffb3\013\uffb3\016\uffb3\017\uffb3\021\uffb3\023\uffb3\024" +
                            "\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\064\uffb3\065\uffb3" +
                            "\066\uffb3\067\uffb3\070\uffb3\071\uffb3\072\uffb3\073\uffb3\001" +
                            "\002\000\062\003\uffae\004\uffae\006\uffae\007\uffae\010\uffae" +
                            "\012\uffae\013\uffae\016\uffae\017\uffae\021\uffae\023\uffae\024" +
                            "\uffae\057\uffae\060\uffae\061\uffae\062\uffae\064\uffae\065\uffae" +
                            "\066\uffae\067\uffae\070\uffae\071\uffae\072\uffae\073\uffae\001" +
                            "\002\000\004\011\u010a\001\002\000\046\003\050\017\102" +
                            "\021\064\032\044\034\037\053\041\057\103\060\055\061" +
                            "\045\062\042\064\035\065\070\066\033\067\076\070\047" +
                            "\071\100\072\077\073\052\001\002\000\004\023\270\001" +
                            "\002\000\062\003\uffa1\004\uffa1\006\uffa1\007\uffa1\010\uffa1" +
                            "\012\uffa1\013\uffa1\016\uffa1\017\uffa1\021\uffa1\023\uffa1\024" +
                            "\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1\064\uffa1\065\uffa1" +
                            "\066\uffa1\067\uffa1\070\uffa1\071\uffa1\072\uffa1\073\uffa1\001" +
                            "\002\000\072\002\uffb9\003\uffb9\004\uffb9\005\uffb9\006\uffb9" +
                            "\007\uffb9\010\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016" +
                            "\uffb9\017\uffb9\021\uffb9\023\uffb9\024\uffb9\057\uffb9\060\uffb9" +
                            "\061\uffb9\062\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070" +
                            "\uffb9\071\uffb9\072\uffb9\073\uffb9\001\002\000\010\003\242" +
                            "\057\243\062\244\001\002\000\006\003\u0110\052\uffe9\001" +
                            "\002\000\004\056\u0111\001\002\000\064\003\uffe2\004\uffe2" +
                            "\006\uffe2\007\uffe2\010\uffe2\012\uffe2\013\uffe2\015\uffe2\016" +
                            "\uffe2\017\uffe2\021\uffe2\023\uffe2\024\uffe2\057\uffe2\060\uffe2" +
                            "\061\uffe2\062\uffe2\064\uffe2\065\uffe2\066\uffe2\067\uffe2\070" +
                            "\uffe2\071\uffe2\072\uffe2\073\uffe2\001\002\000\004\002\ufff6" +
                            "\001\002\000\004\023\u0116\001\002\000\004\023\u0116\001" +
                            "\002\000\004\023\u0116\001\002\000\016\003\u011c\013\272" +
                            "\015\u011e\024\uffcc\060\027\062\017\001\002\000\016\002" +
                            "\uffd1\003\uffd1\013\uffd1\014\uffd1\060\uffd1\062\uffd1\001\002" +
                            "\000\016\003\u011c\013\272\015\u011e\024\uffcc\060\027\062" +
                            "\017\001\002\000\016\003\uffca\013\uffca\015\uffca\024\uffca" +
                            "\060\uffca\062\uffca\001\002\000\016\003\uffcb\013\uffcb\015" +
                            "\uffcb\024\uffcb\060\uffcb\062\uffcb\001\002\000\004\024\u0123" +
                            "\001\002\000\006\024\u0122\056\u0121\001\002\000\016\003" +
                            "\uffc9\013\uffc9\015\uffc9\024\uffc9\060\uffc9\062\uffc9\001\002" +
                            "\000\004\017\255\001\002\000\004\023\270\001\002\000" +
                            "\016\003\uffc6\013\uffc6\015\uffc6\024\uffc6\060\uffc6\062\uffc6" +
                            "\001\002\000\016\003\uffc8\013\uffc8\015\uffc8\024\uffc8\060" +
                            "\uffc8\062\uffc8\001\002\000\016\003\uffc7\013\uffc7\015\uffc7" +
                            "\024\uffc7\060\uffc7\062\uffc7\001\002\000\016\002\uffce\003" +
                            "\uffce\013\uffce\014\uffce\060\uffce\062\uffce\001\002\000\004" +
                            "\024\uffcd\001\002\000\016\002\uffd0\003\uffd0\013\uffd0\014" +
                            "\uffd0\060\uffd0\062\uffd0\001\002\000\016\002\uffcf\003\uffcf" +
                            "\013\uffcf\014\uffcf\060\uffcf\062\uffcf\001\002\000\006\040" +
                            "\ufff8\056\ufff8\001\002\000\006\040\ufffa\056\ufffa\001\002" +
                            "\000\004\056\u0130\001\002\000\006\040\u012d\056\u012e\001" +
                            "\002\000\006\040\ufff9\056\ufff9\001\002\000\006\040\ufff7" +
                            "\056\ufff7\001\002\000\010\057\u012b\060\u0127\062\u012c\001" +
                            "\002\000\020\002\ufffd\003\ufffd\013\ufffd\014\ufffd\060\ufffd" +
                            "\062\ufffd\063\ufffd\001\002\000\006\040\ufffb\056\ufffb\001" +
                            "\002\000\020\002\ufffc\003\ufffc\013\ufffc\014\ufffc\060\ufffc" +
                            "\062\ufffc\063\ufffc\001\002\000\004\002\000\001\002"});

    /** Access to parse-action table. */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table. */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[]{
                    "\000\u012f\000\006\002\003\003\004\001\001\000\002\001" +
                            "\001\000\032\004\015\007\017\010\011\011\021\012\020" +
                            "\014\013\015\010\020\012\023\024\026\006\102\022\103" +
                            "\014\001\001\000\006\005\u0129\006\u0127\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\030\007" +
                            "\u0111\010\011\011\021\012\020\014\013\015\010\020\012" +
                            "\023\024\026\006\102\022\103\014\001\001\000\004\024" +
                            "\253\001\001\000\002\001\001\000\004\022\251\001\001" +
                            "\000\002\001\001\000\004\104\161\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\004\022\244" +
                            "\001\001\000\006\102\204\103\203\001\001\000\002\001" +
                            "\001\000\002\001\001\000\004\104\030\001\001\000\004" +
                            "\103\177\001\001\000\002\001\001\000\056\051\074\052" +
                            "\070\053\066\054\064\055\062\056\060\057\057\060\055" +
                            "\061\053\062\052\063\061\064\050\065\056\067\037\070" +
                            "\071\071\042\072\045\073\072\074\035\075\065\102\073" +
                            "\105\033\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\034\061\173\062\052" +
                            "\063\061\064\050\065\056\067\037\070\071\071\042\072" +
                            "\045\073\072\074\035\075\065\102\073\001\001\000\002" +
                            "\001\001\000\034\061\172\062\052\063\061\064\050\065" +
                            "\056\067\037\070\071\071\042\072\045\073\072\074\035" +
                            "\075\065\102\073\001\001\000\004\104\161\001\001\000" +
                            "\002\001\001\000\034\061\157\062\052\063\061\064\050" +
                            "\065\056\067\037\070\071\071\042\072\045\073\072\074" +
                            "\035\075\065\102\073\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\004\104\030\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\004\104\151" +
                            "\001\001\000\002\001\001\000\056\051\145\052\070\053" +
                            "\066\054\064\055\062\056\060\057\057\060\055\061\053" +
                            "\062\052\063\061\064\050\065\056\067\037\070\071\071" +
                            "\042\072\045\073\072\074\035\075\065\076\144\102\073" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\052\052\103\053\066\054\064\055\062\056" +
                            "\060\057\057\060\055\061\053\062\052\063\061\064\050" +
                            "\065\056\067\037\070\071\071\042\072\045\073\072\074" +
                            "\035\075\065\102\073\001\001\000\002\001\001\000\002" +
                            "\001\001\000\050\053\106\054\064\055\062\056\060\057" +
                            "\057\060\055\061\053\062\052\063\061\064\050\065\056" +
                            "\067\037\070\071\071\042\072\045\073\072\074\035\075" +
                            "\065\102\073\001\001\000\002\001\001\000\002\001\001" +
                            "\000\046\054\110\055\062\056\060\057\057\060\055\061" +
                            "\053\062\052\063\061\064\050\065\056\067\037\070\071" +
                            "\071\042\072\045\073\072\074\035\075\065\102\073\001" +
                            "\001\000\002\001\001\000\044\055\112\056\060\057\057" +
                            "\060\055\061\053\062\052\063\061\064\050\065\056\067" +
                            "\037\070\071\071\042\072\045\073\072\074\035\075\065" +
                            "\102\073\001\001\000\002\001\001\000\042\056\142\057" +
                            "\057\060\055\061\053\062\052\063\061\064\050\065\056" +
                            "\067\037\070\071\071\042\072\045\073\072\074\035\075" +
                            "\065\102\073\001\001\000\042\056\141\057\057\060\055" +
                            "\061\053\062\052\063\061\064\050\065\056\067\037\070" +
                            "\071\071\042\072\045\073\072\074\035\075\065\102\073" +
                            "\001\001\000\042\056\116\057\057\060\055\061\053\062" +
                            "\052\063\061\064\050\065\056\067\037\070\071\071\042" +
                            "\072\045\073\072\074\035\075\065\102\073\001\001\000" +
                            "\002\001\001\000\040\057\140\060\055\061\053\062\052" +
                            "\063\061\064\050\065\056\067\037\070\071\071\042\072" +
                            "\045\073\072\074\035\075\065\102\073\001\001\000\040" +
                            "\057\137\060\055\061\053\062\052\063\061\064\050\065" +
                            "\056\067\037\070\071\071\042\072\045\073\072\074\035" +
                            "\075\065\102\073\001\001\000\040\057\136\060\055\061" +
                            "\053\062\052\063\061\064\050\065\056\067\037\070\071" +
                            "\071\042\072\045\073\072\074\035\075\065\102\073\001" +
                            "\001\000\040\057\123\060\055\061\053\062\052\063\061" +
                            "\064\050\065\056\067\037\070\071\071\042\072\045\073" +
                            "\072\074\035\075\065\102\073\001\001\000\002\001\001" +
                            "\000\036\060\135\061\053\062\052\063\061\064\050\065" +
                            "\056\067\037\070\071\071\042\072\045\073\072\074\035" +
                            "\075\065\102\073\001\001\000\036\060\126\061\053\062" +
                            "\052\063\061\064\050\065\056\067\037\070\071\071\042" +
                            "\072\045\073\072\074\035\075\065\102\073\001\001\000" +
                            "\002\001\001\000\034\061\134\062\052\063\061\064\050" +
                            "\065\056\067\037\070\071\071\042\072\045\073\072\074" +
                            "\035\075\065\102\073\001\001\000\034\061\133\062\052" +
                            "\063\061\064\050\065\056\067\037\070\071\071\042\072" +
                            "\045\073\072\074\035\075\065\102\073\001\001\000\034" +
                            "\061\132\062\052\063\061\064\050\065\056\067\037\070" +
                            "\071\071\042\072\045\073\072\074\035\075\065\102\073" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\054" +
                            "\051\150\052\070\053\066\054\064\055\062\056\060\057" +
                            "\057\060\055\061\053\062\052\063\061\064\050\065\056" +
                            "\067\037\070\071\071\042\072\045\073\072\074\035\075" +
                            "\065\102\073\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\054\051\154\052" +
                            "\070\053\066\054\064\055\062\056\060\057\057\060\055" +
                            "\061\053\062\052\063\061\064\050\065\056\067\037\070" +
                            "\071\071\042\072\045\073\072\074\035\075\065\102\073" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\004\103\162\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\004\103\166\001\001\000\002\001\001\000\002" +
                            "\001\001\000\004\104\171\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\054\051\176\052\070" +
                            "\053\066\054\064\055\062\056\060\057\057\060\055\061" +
                            "\053\062\052\063\061\064\050\065\056\067\037\070\071" +
                            "\071\042\072\045\073\072\074\035\075\065\102\073\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\004\021\213\001\001\000\004\021\206\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\060\051\222\052\070\053\066\054\064\055\062\056" +
                            "\060\057\057\060\055\061\053\062\052\063\061\064\050" +
                            "\065\056\066\221\067\037\070\071\071\042\072\045\073" +
                            "\072\074\035\075\065\077\217\102\073\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\020\014" +
                            "\231\017\230\020\227\100\226\101\224\102\022\103\014" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\012\014\233\020\227\102\022\103\014\001\001\000\002" +
                            "\001\001\000\060\051\222\052\070\053\066\054\064\055" +
                            "\062\056\060\057\057\060\055\061\053\062\052\063\061" +
                            "\064\050\065\056\066\235\067\037\070\071\071\042\072" +
                            "\045\073\072\074\035\075\065\077\217\102\073\001\001" +
                            "\000\002\001\001\000\002\001\001\000\020\014\231\017" +
                            "\230\020\227\100\240\101\224\102\022\103\014\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
                            "\103\247\001\001\000\002\001\001\000\004\104\171\001" +
                            "\001\000\002\001\001\000\002\001\001\000\004\035\266" +
                            "\001\001\000\010\020\257\025\256\103\014\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\006\020\264\103\014\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\100\011\270\013\305\014\013\016" +
                            "\326\017\317\020\316\033\272\034\323\035\325\036\314" +
                            "\037\301\040\277\041\302\042\312\043\311\045\275\047" +
                            "\324\050\315\062\307\063\061\064\050\065\056\067\274" +
                            "\070\321\071\276\072\303\073\072\074\035\075\065\102" +
                            "\322\103\014\001\001\000\002\001\001\000\012\014\233" +
                            "\020\227\102\022\103\u010d\001\001\000\002\001\001\000" +
                            "\006\020\u0108\103\014\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\054\051" +
                            "\357\052\070\053\066\054\064\055\062\056\060\057\057" +
                            "\060\055\061\053\062\052\063\061\064\050\065\056\067" +
                            "\037\070\071\071\042\072\045\073\072\074\035\075\065" +
                            "\102\073\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\054\051\354\052\070\053\066\054\064" +
                            "\055\062\056\060\057\057\060\055\061\053\062\052\063" +
                            "\061\064\050\065\056\067\037\070\071\071\042\072\045" +
                            "\073\072\074\035\075\065\102\073\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\004\104\030" +
                            "\001\001\000\002\001\001\000\002\001\001\000\054\051" +
                            "\333\052\070\053\066\054\064\055\062\056\060\057\057" +
                            "\060\055\061\053\062\052\063\061\064\050\065\056\067" +
                            "\037\070\071\071\042\072\045\073\072\074\035\075\065" +
                            "\102\073\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\054\051\330\052\070" +
                            "\053\066\054\064\055\062\056\060\057\057\060\055\061" +
                            "\053\062\052\063\061\064\050\065\056\067\037\070\071" +
                            "\071\042\072\045\073\072\074\035\075\065\102\073\001" +
                            "\001\000\002\001\001\000\004\022\244\001\001\000\100" +
                            "\011\270\013\305\014\013\016\326\017\317\020\316\033" +
                            "\327\034\323\035\325\036\314\037\301\040\277\041\302" +
                            "\042\312\043\311\045\275\047\324\050\315\062\307\063" +
                            "\061\064\050\065\056\067\274\070\321\071\276\072\303" +
                            "\073\072\074\035\075\065\102\322\103\014\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\004\035\331\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\006\046\336\074\335" +
                            "\001\001\000\002\001\001\000\004\074\343\001\001\000" +
                            "\002\001\001\000\076\011\270\013\305\014\013\016\326" +
                            "\017\317\020\316\034\341\035\325\036\314\037\301\040" +
                            "\277\041\302\042\312\043\311\045\275\047\324\050\315" +
                            "\062\307\063\061\064\050\065\056\067\274\070\321\071" +
                            "\276\072\303\073\072\074\035\075\065\102\322\103\014" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\076\011\270\013\305\014\013" +
                            "\016\326\017\317\020\316\034\346\035\325\036\314\037" +
                            "\301\040\277\041\302\042\312\043\311\045\275\047\324" +
                            "\050\315\062\307\063\061\064\050\065\056\067\274\070" +
                            "\321\071\276\072\303\073\072\074\035\075\065\102\322" +
                            "\103\014\001\001\000\002\001\001\000\076\011\270\013" +
                            "\305\014\013\016\326\017\317\020\316\034\350\035\325" +
                            "\036\314\037\301\040\277\041\302\042\312\043\311\045" +
                            "\275\047\324\050\315\062\307\063\061\064\050\065\056" +
                            "\067\274\070\321\071\276\072\303\073\072\074\035\075" +
                            "\065\102\322\103\014\001\001\000\002\001\001\000\076" +
                            "\011\270\013\305\014\013\016\326\017\317\020\316\034" +
                            "\352\035\325\036\314\037\301\040\277\041\302\042\312" +
                            "\043\311\045\275\047\324\050\315\062\307\063\061\064" +
                            "\050\065\056\067\274\070\321\071\276\072\303\073\072" +
                            "\074\035\075\065\102\322\103\014\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\004\035\360\001\001\000\004\044" +
                            "\362\001\001\000\006\035\364\043\363\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\054\051" +
                            "\u0105\052\070\053\066\054\064\055\062\056\060\057\057" +
                            "\060\055\061\053\062\052\063\061\064\050\065\056\067" +
                            "\037\070\071\071\042\072\045\073\072\074\035\075\065" +
                            "\102\073\001\001\000\054\051\u0103\052\070\053\066\054" +
                            "\064\055\062\056\060\057\057\060\055\061\053\062\052" +
                            "\063\061\064\050\065\056\067\037\070\071\071\042\072" +
                            "\045\073\072\074\035\075\065\102\073\001\001\000\054" +
                            "\051\u0101\052\070\053\066\054\064\055\062\056\060\057" +
                            "\057\060\055\061\053\062\052\063\061\064\050\065\056" +
                            "\067\037\070\071\071\042\072\045\073\072\074\035\075" +
                            "\065\102\073\001\001\000\054\051\377\052\070\053\066" +
                            "\054\064\055\062\056\060\057\057\060\055\061\053\062" +
                            "\052\063\061\064\050\065\056\067\037\070\071\071\042" +
                            "\072\045\073\072\074\035\075\065\102\073\001\001\000" +
                            "\054\051\375\052\070\053\066\054\064\055\062\056\060" +
                            "\057\057\060\055\061\053\062\052\063\061\064\050\065" +
                            "\056\067\037\070\071\071\042\072\045\073\072\074\035" +
                            "\075\065\102\073\001\001\000\054\051\373\052\070\053" +
                            "\066\054\064\055\062\056\060\057\057\060\055\061\053" +
                            "\062\052\063\061\064\050\065\056\067\037\070\071\071" +
                            "\042\072\045\073\072\074\035\075\065\102\073\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\054\051\u010a\052\070\053\066\054" +
                            "\064\055\062\056\060\057\057\060\055\061\053\062\052" +
                            "\063\061\064\050\065\056\067\037\070\071\071\042\072" +
                            "\045\073\072\074\035\075\065\102\073\001\001\000\004" +
                            "\035\u010b\001\001\000\002\001\001\000\002\001\001\000" +
                            "\004\022\u010e\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\004\027\u0125\001" +
                            "\001\000\004\027\u0124\001\001\000\004\027\u0116\001\001" +
                            "\000\032\011\270\013\u0119\014\013\016\326\017\317\020" +
                            "\012\023\u011c\030\u011a\031\u0117\032\u0118\102\022\103\014" +
                            "\001\001\000\002\001\001\000\032\011\270\013\u0119\014" +
                            "\013\016\326\017\317\020\012\023\u011c\030\u0123\031\u0117" +
                            "\032\u0118\102\022\103\014\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\004\024\u011e\001\001\000\004\035\u011f\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\004\006\u012e\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001"});

    /** Access to <code>reduce_goto</code> table. */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /** Instance of action encapsulation class. */
    protected CUP$SyntacticalAnalyser$actions action_obj;

    /** Action encapsulation object initializer. */
    protected void init_actions() {
        action_obj = new CUP$SyntacticalAnalyser$actions(this);
    }

    /** Invoke a user supplied parse action. */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$SyntacticalAnalyser$do_action(act_num, parser, stack, top);
    }

    /** Indicates start state. */
    public int start_state() {
        return 0;
    }

    /** Indicates start production. */
    public int start_production() {
        return 1;
    }

    /** <code>EOF</code> Symbol index. */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index. */
    public int error_sym() {
        return 1;
    }


    /** User initialization code. */
    public void user_init() throws java.lang.Exception {

    }

    /** Scan to get the next Symbol. */
    public java_cup.runtime.Symbol scan()
            throws java.lang.Exception {

        return analyser.next_token();

    }


    private LexicalAnalyser analyser = (LexicalAnalyser) getScanner();
    private int errors = 0;
    private Deque<SyntacticalException> pendingErrors = new ArrayDeque<>();
    private Map<SyntacticalException, String> reportedErrors = new HashMap<>();

    public int errors() {
        return errors;
    }

    @Override
    public void syntax_error(Symbol token) {
        errors++;
        SyntacticalException e = new SyntacticalException((LexicalUnit) token);
        pendingErrors.push(e);
    }

    @Override
    public void report_error(String message, Object info) {
        SyntacticalException error = pendingErrors.pop();
        reportedErrors.put(error, message);
        if (pendingErrors.isEmpty()) {
            displayErrors();
        }
    }

    @Override
    public void unrecovered_syntax_error(Symbol token) {
        SyntacticalException e = new SyntacticalException((LexicalUnit) token);
        report_fatal_error("Couldn't repair and continue parse", e);
    }

    @Override
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
        if (info instanceof SyntacticalException) {
            throw (SyntacticalException) info;
        } else {
            throw new IllegalStateException("Can't recover from previous error(s)");
        }
    }

    @Override
    public void done_parsing() {
        while (!pendingErrors.isEmpty()) {
            report_error("Unknown cause", null);
        }
        super.done_parsing();
    }

    private void displayErrors() {
        reportedErrors.entrySet().stream()
                .sorted(Comparator.<Map.Entry<SyntacticalException, String>>
                        comparingInt(e -> e.getKey().getLexicalUnit().getRow())
                        .thenComparingInt(e -> e.getKey().getLexicalUnit().getColumn())
                ).forEach(e -> System.err.println("[ERROR] " + e.getKey().getMessage() + " - " + e.getValue()));
        System.err.flush();
        reportedErrors.clear();
    }

}

/**
 * Cup generated class to encapsulate user supplied action code.
 */
class CUP$SyntacticalAnalyser$actions {


    private IdGenerator nextId = new IdGenerator();

    private final SyntacticalAnalyser parser;

    /** Constructor */
    CUP$SyntacticalAnalyser$actions(SyntacticalAnalyser parser) {
        this.parser = parser;
    }

    /** Method 0 with the actual generated action code for actions 0 to 300. */
    public final java_cup.runtime.Symbol CUP$SyntacticalAnalyser$do_action_part00000000(
            int CUP$SyntacticalAnalyser$act_num,
            java_cup.runtime.lr_parser CUP$SyntacticalAnalyser$parser,
            java.util.Stack CUP$SyntacticalAnalyser$stack,
            int CUP$SyntacticalAnalyser$top)
            throws java.lang.Exception {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$SyntacticalAnalyser$result;

        /* select the action based on the action number */
        switch (CUP$SyntacticalAnalyser$act_num) {
            /*. . . . . . . . . . . . . . . . . . . .*/
            case 0: // Program ::= ImportList DeclarationList
            {
                ProgramNode RESULT = null;
                List<String> imports = (List<String>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                DeclarationNode declarations = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ProgramNode(nextId, declarations, imports);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Program", 0, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 1: // $START ::= Program EOF
            {
                Object RESULT = null;
                ProgramNode start_val = (ProgramNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = start_val;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("$START", 0, RESULT);
            }
            /* ACCEPT */
            CUP$SyntacticalAnalyser$parser.done_parsing();
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 2: // ImportList ::= ImportList Import
            {
                List<String> RESULT = null;
                List<String> imports = (List<String>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                String file = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                imports.add(file);
                RESULT = imports;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ImportList", 1, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 3: // ImportList ::=
            {
                List<String> RESULT = null;
                RESULT = new ArrayList<>();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ImportList", 1, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 4: // Import ::= IMPORT FilePath END
            {
                String RESULT = null;
                String path = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = path;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Import", 2, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 5: // Import ::= IMPORT error END
            {
                String RESULT = null;
                parser.report_error("Expected a path to a file", null);
                RESULT = "";
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Import", 2, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 6: // FilePath ::= FilePath DIV Filename
            {
                String RESULT = null;
                String path = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                String filename = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = path + "/" + filename;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FilePath", 3, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 7: // FilePath ::= Filename
            {
                String RESULT = null;
                String filename = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = filename;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FilePath", 3, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 8: // Filename ::= IDENTIFIER
            {
                String RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = name;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Filename", 4, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 9: // Filename ::= GLOBAL
            {
                String RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = name;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Filename", 4, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 10: // Filename ::= TYPE
            {
                String RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = name;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Filename", 4, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 11: // DeclarationList ::= Declaration DeclarationList
            {
                DeclarationNode RESULT = null;
                DeclarationNode declaration = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                DeclarationNode declarations = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration.linkedTo(declarations);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("DeclarationList", 5, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 12: // DeclarationList ::=
            {
                DeclarationNode RESULT = null;
                RESULT = null;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("DeclarationList", 5, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 13: // Declaration ::= GlobalVarConstDeclaration
            {
                DeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration", 6, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 14: // Declaration ::= FunctionDeclaration
            {
                DeclarationNode RESULT = null;
                FunctionDeclarationNode declaration = (FunctionDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration", 6, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 15: // Declaration ::= ClassDeclaration
            {
                DeclarationNode RESULT = null;
                ClassDeclarationNode declaration = (ClassDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration", 6, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 16: // Declaration ::= error END
            {
                DeclarationNode RESULT = null;
                parser.report_error("Expected a declaration", null);
                RESULT = new ErrorDeclarationNode(nextId);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration", 6, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 17: // Declaration ::= error CURLY_R
            {
                DeclarationNode RESULT = null;
                parser.report_error("Expected a declaration", null);
                RESULT = new ErrorDeclarationNode(nextId);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration", 6, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 18: // GlobalVarConstDeclaration ::= VarDeclaration
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalVarConstDeclaration", 8, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 19: // GlobalVarConstDeclaration ::= GlobalConstDeclaration
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalVarConstDeclaration", 8, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 20: // VarConstDeclaration ::= VarDeclaration
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarConstDeclaration", 9, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 21: // VarConstDeclaration ::= LocalConstDeclarationEnd
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarConstDeclaration", 9, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 22: // VarDeclaration ::= BaseVarDeclaration END
            {
                VarDeclarationNode RESULT = null;
                Name declaration = (Name) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new VarDeclarationNode(nextId, declaration);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclaration", 7, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 23: // VarDeclaration ::= VarInitDeclaration END
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclaration", 7, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 24: // BaseVarDeclaration ::= Type Identifier
            {
                Name RESULT = null;
                Type type = (Type) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new Name(id, type);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("BaseVarDeclaration", 14, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 25: // VarInitDeclaration ::= BaseVarDeclaration ASSIGNMENT InitialValueExpression
            {
                VarDeclarationNode RESULT = null;
                Name name = (Name) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode initialValue = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new VarDeclarationNode(nextId, name, initialValue);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarInitDeclaration", 10, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 26: // VarInitDeclaration ::= ConstructorCallExpression Identifier
            {
                VarDeclarationNode RESULT = null;
                ConstructorCallExpressionNode constructor = (ConstructorCallExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = VarDeclarationNode.fromConstructor(nextId, constructor, id);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarInitDeclaration", 10, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 27: // GlobalConstDeclaration ::= CONST Type Global ASSIGNMENT InitialValueExpression END
            {
                VarDeclarationNode RESULT = null;
                Type type = (Type) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 4)).value;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                ExpressionNode initialValue = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new VarDeclarationNode(nextId, new Name(id, type), initialValue, true);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalConstDeclaration", 11, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 28: // GlobalConstDeclaration ::= CONST ConstructorCallExpression Global END
            {
                VarDeclarationNode RESULT = null;
                ConstructorCallExpressionNode constructor = (ConstructorCallExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = VarDeclarationNode.fromConstructor(nextId, constructor, id).constant();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalConstDeclaration", 11, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 29: // GlobalConstDeclaration ::= CONST Type Global error END
            {
                VarDeclarationNode RESULT = null;
                Type type = (Type) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                parser.report_error("Constants must be initialized", null);
                RESULT = new VarDeclarationNode(
                        nextId, new Name(id, type), new ErrorExpressionNode(nextId), true
                );

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalConstDeclaration", 11, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 30: // LocalConstDeclarationEnd ::= LocalConstDeclaration END
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("LocalConstDeclarationEnd", 12, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 31: // LocalConstDeclarationEnd ::= CONST Type Identifier error END
            {
                VarDeclarationNode RESULT = null;
                Type type = (Type) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                parser.report_error("Constants must be initialized", null);
                RESULT = new VarDeclarationNode(
                        nextId, new Name(id, type), new ErrorExpressionNode(nextId), true
                );

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("LocalConstDeclarationEnd", 12, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 32: // LocalConstDeclaration ::= CONST VarInitDeclaration
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration.constant();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("LocalConstDeclaration", 13, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 33: // InitialValueExpression ::= Expression
            {
                ExpressionNode RESULT = null;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("InitialValueExpression", 52, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 34: // InitialValueExpression ::= AnonymousObjectConstructorExpression
            {
                ExpressionNode RESULT = null;
                AnonymousObjectConstructorExpressionNode expression = (AnonymousObjectConstructorExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("InitialValueExpression", 52, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 35: // Identifier ::= IDENTIFIER
            {
                String RESULT = null;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = id;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Identifier", 16, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 36: // Identifier ::= error
            {
                String RESULT = null;
                parser.report_error("Expected a non uppercase identifier", null);
                RESULT = null;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Identifier", 16, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 37: // Identifier ::= TYPE error
            {
                String RESULT = null;
                parser.report_error("Expected a non uppercase identifier", null);
                RESULT = null;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Identifier", 16, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 38: // Global ::= GLOBAL
            {
                String RESULT = null;
                String global = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = global;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Global", 15, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 39: // Global ::= error
            {
                String RESULT = null;
                parser.report_error("Expected an uppercase identifier", null);
                RESULT = null;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Global", 15, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 40: // Global ::= TYPE error
            {
                String RESULT = null;
                parser.report_error("Expected an uppercase identifier", null);
                RESULT = null;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Global", 15, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 41: // FunctionDeclaration ::= BaseVarDeclaration FunctionParameters BlockStatement
            {
                FunctionDeclarationNode RESULT = null;
                Name name = (Name) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                List<Name> parameters = (List<Name>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                BlockStatementNode block = (BlockStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new FunctionDeclarationNode(nextId, name, parameters, block);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionDeclaration", 17, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 42: // FunctionParameters ::= PARENTH_L PARENTH_R
            {
                List<Name> RESULT = null;
                RESULT = new ArrayList<>();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionParameters", 18, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 43: // FunctionParameters ::= PARENTH_L ParameterList PARENTH_R
            {
                List<Name> RESULT = null;
                List<Name> parameters = (List<Name>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = parameters;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionParameters", 18, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 44: // ParameterList ::= BaseVarDeclaration
            {
                List<Name> RESULT = null;
                Name parameter = (Name) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ArrayList<>(Collections.singletonList(parameter));
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ParameterList", 19, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 45: // ParameterList ::= ParameterList COMMA BaseVarDeclaration
            {
                List<Name> RESULT = null;
                List<Name> parameters = (List<Name>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                Name parameter = (Name) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                parameters.add(parameter);
                RESULT = parameters;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ParameterList", 19, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 46: // ParameterList ::= error
            {
                List<Name> RESULT = null;
                parser.report_error("Expected a variable declaration", null);
                RESULT = new ArrayList<>(Collections.singletonList(new Name("", new Type(null))));
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ParameterList", 19, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 47: // ParameterList ::= ParameterList COMMA error
            {
                List<Name> RESULT = null;
                List<Name> parameters = (List<Name>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                parser.report_error("Expected a variable declaration", null);
                parameters.add(new Name("", new Type(null)));
                RESULT = parameters;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ParameterList", 19, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 48: // ClassDeclaration ::= CLASS TYPE ClassBlock
            {
                ClassDeclarationNode RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                DeclarationNode block = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ClassDeclarationNode(nextId, name, block);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration", 20, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 49: // ClassDeclaration ::= CLASS GLOBAL ClassBlock
            {
                ClassDeclarationNode RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                DeclarationNode block = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ClassDeclarationNode(nextId, name, block);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration", 20, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 50: // ClassDeclaration ::= CLASS error ClassBlock
            {
                ClassDeclarationNode RESULT = null;
                DeclarationNode block = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                parser.report_error("Expected a type name", null);
                RESULT = new ClassDeclarationNode(nextId, "", block);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration", 20, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 51: // ClassBlock ::= CURLY_L ClassElementList CURLY_R
            {
                DeclarationNode RESULT = null;
                DeclarationNode contents = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = contents;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassBlock", 21, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 52: // ClassElementList ::= ClassElement ClassElementList
            {
                DeclarationNode RESULT = null;
                DeclarationNode element = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                DeclarationNode elements = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = element.linkedTo(elements);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElementList", 22, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 53: // ClassElementList ::=
            {
                DeclarationNode RESULT = null;
                RESULT = null;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElementList", 22, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 54: // ClassElement ::= VarConstDeclaration
            {
                DeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement", 23, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 55: // ClassElement ::= ConstructorDeclaration
            {
                DeclarationNode RESULT = null;
                ConstructorDeclarationNode declaration = (ConstructorDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement", 23, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 56: // ClassElement ::= FunctionDeclaration
            {
                DeclarationNode RESULT = null;
                FunctionDeclarationNode declaration = (FunctionDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement", 23, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 57: // ClassElement ::= error END
            {
                DeclarationNode RESULT = null;
                parser.report_error("Expected a declaration", null);
                RESULT = new ErrorDeclarationNode(nextId);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement", 23, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 58: // ClassElement ::= error CURLY_R
            {
                DeclarationNode RESULT = null;
                parser.report_error("Expected a declaration", null);
                RESULT = new ErrorDeclarationNode(nextId);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement", 23, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 59: // ConstructorDeclaration ::= CONSTRUCTOR FunctionParameters BlockStatement
            {
                ConstructorDeclarationNode RESULT = null;
                List<Name> parameters = (List<Name>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                BlockStatementNode block = (BlockStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ConstructorDeclarationNode(nextId, parameters, block);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstructorDeclaration", 24, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 60: // StatementList ::= Statement StatementList
            {
                StatementNode RESULT = null;
                StatementNode statement = (StatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                StatementNode statements = (StatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = statement.linkedTo(statements);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("StatementList", 25, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 61: // StatementList ::=
            {
                StatementNode RESULT = null;
                RESULT = null;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("StatementList", 25, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 62: // Statement ::= VarDeclarationStatement
            {
                StatementNode RESULT = null;
                VarDeclarationStatementNode statement = (VarDeclarationStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = statement;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement", 26, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 63: // Statement ::= AssignmentStatement
            {
                StatementNode RESULT = null;
                AssignmentStatementNode statement = (AssignmentStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = statement;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement", 26, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 64: // Statement ::= FunctionCallStatement
            {
                StatementNode RESULT = null;
                FunctionCallStatementNode statement = (FunctionCallStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = statement;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement", 26, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 65: // Statement ::= ReturnStatement
            {
                StatementNode RESULT = null;
                ReturnStatementNode statement = (ReturnStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = statement;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement", 26, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 66: // Statement ::= IfElseStatement
            {
                StatementNode RESULT = null;
                IfElseStatementNode statement = (IfElseStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = statement;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement", 26, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 67: // Statement ::= SwitchStatement
            {
                StatementNode RESULT = null;
                SwitchStatementNode statement = (SwitchStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = statement;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement", 26, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 68: // Statement ::= WhileStatement
            {
                StatementNode RESULT = null;
                WhileStatementNode statement = (WhileStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = statement;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement", 26, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 69: // Statement ::= ForStatement
            {
                StatementNode RESULT = null;
                ForStatementNode statement = (ForStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = statement;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement", 26, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 70: // Statement ::= BlockStatement
            {
                StatementNode RESULT = null;
                BlockStatementNode statement = (BlockStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = statement;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement", 26, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 71: // Statement ::= error END
            {
                StatementNode RESULT = null;
                parser.report_error("Expected a statement", null);
                RESULT = new ErrorStatementNode(nextId);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement", 26, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 72: // BlockStatement ::= CURLY_L StatementList CURLY_R
            {
                BlockStatementNode RESULT = null;
                StatementNode root = (StatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new BlockStatementNode(nextId, root);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("BlockStatement", 27, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 73: // VarDeclarationStatement ::= VarConstDeclaration
            {
                VarDeclarationStatementNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration.asStatement();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclarationStatement", 28, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 74: // AssignmentStatement ::= Designator ASSIGNMENT Expression END
            {
                AssignmentStatementNode RESULT = null;
                Designator designator = (Designator) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new AssignmentStatementNode(nextId, designator, expression);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AssignmentStatement", 29, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 75: // AssignmentStatement ::= Designator PLUS_ASSIGN Expression END
            {
                AssignmentStatementNode RESULT = null;
                Designator designator = (Designator) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = AssignmentStatementNode.fromSyntacticSugar(
                        nextId, designator, OperatorOverloadConstants._PLUS, expression);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AssignmentStatement", 29, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 76: // AssignmentStatement ::= Designator MINUS_ASSIGN Expression END
            {
                AssignmentStatementNode RESULT = null;
                Designator designator = (Designator) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = AssignmentStatementNode.fromSyntacticSugar(
                        nextId, designator, OperatorOverloadConstants._MINUS, expression);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AssignmentStatement", 29, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 77: // AssignmentStatement ::= Designator MULT_ASSIGN Expression END
            {
                AssignmentStatementNode RESULT = null;
                Designator designator = (Designator) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = AssignmentStatementNode.fromSyntacticSugar(
                        nextId, designator, OperatorOverloadConstants._MULT, expression);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AssignmentStatement", 29, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 78: // AssignmentStatement ::= Designator DIV_ASSIGN Expression END
            {
                AssignmentStatementNode RESULT = null;
                Designator designator = (Designator) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = AssignmentStatementNode.fromSyntacticSugar(
                        nextId, designator, OperatorOverloadConstants._DIV, expression);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AssignmentStatement", 29, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 79: // AssignmentStatement ::= Designator MOD_ASSIGN Expression END
            {
                AssignmentStatementNode RESULT = null;
                Designator designator = (Designator) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = AssignmentStatementNode.fromSyntacticSugar(
                        nextId, designator, OperatorOverloadConstants._MOD, expression);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AssignmentStatement", 29, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 80: // Designator ::= VariableExpression
            {
                Designator RESULT = null;
                VariableExpressionNode expression = (VariableExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = Designator.ofVar(expression);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Designator", 30, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 81: // Designator ::= FieldAccessExpression
            {
                Designator RESULT = null;
                PointExpressionNode expression = (PointExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = Designator.ofField(expression);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Designator", 30, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 82: // Designator ::= ArrayAccessExpression
            {
                Designator RESULT = null;
                ArrayAccessExpressionNode expression = (ArrayAccessExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = Designator.ofArray(expression);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Designator", 30, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 83: // FunctionCallStatement ::= FunctionCallExpression END
            {
                FunctionCallStatementNode RESULT = null;
                FunctionCallExpressionNode function = (FunctionCallExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = function.asStatement();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionCallStatement", 31, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 84: // ReturnStatement ::= RETURN END
            {
                ReturnStatementNode RESULT = null;
                RESULT = new ReturnStatementNode(nextId);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ReturnStatement", 32, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 85: // ReturnStatement ::= RETURN Expression END
            {
                ReturnStatementNode RESULT = null;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new ReturnStatementNode(nextId, expression);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ReturnStatement", 32, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 86: // IfElseStatement ::= IF Expression BlockStatement ElsePartStatement
            {
                IfElseStatementNode RESULT = null;
                ExpressionNode condition = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                BlockStatementNode ifBlock = (BlockStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                StatementNode elsePart = (StatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new IfElseStatementNode(nextId, condition, ifBlock, elsePart);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("IfElseStatement", 33, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 87: // ElsePartStatement ::= ELSE BlockStatement
            {
                StatementNode RESULT = null;
                BlockStatementNode elseBlock = (BlockStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = elseBlock;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ElsePartStatement", 34, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 88: // ElsePartStatement ::= ELSE IfElseStatement
            {
                StatementNode RESULT = null;
                IfElseStatementNode ifElse = (IfElseStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = ifElse;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ElsePartStatement", 34, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 89: // ElsePartStatement ::=
            {
                StatementNode RESULT = null;
                RESULT = null;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ElsePartStatement", 34, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 90: // SwitchStatement ::= SWITCH Expression CURLY_L SwitchCasesStatement CURLY_R
            {
                SwitchStatementNode RESULT = null;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                Map<ConstantExpressionNode, StatementNode> cases = (Map<ConstantExpressionNode, StatementNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new SwitchStatementNode(nextId, expression, cases);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("SwitchStatement", 35, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 91: // SwitchCasesStatement ::= ConstantExpression ARROW Statement
            {
                Map<ConstantExpressionNode, StatementNode> RESULT = null;
                ConstantExpressionNode expression = (ConstantExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                StatementNode statement = (StatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new HashMap<>(Collections.singletonMap(expression, statement));
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("SwitchCasesStatement", 36, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 92: // SwitchCasesStatement ::= UNDERSCORE ARROW Statement
            {
                Map<ConstantExpressionNode, StatementNode> RESULT = null;
                StatementNode statement = (StatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new HashMap<>(Collections.singletonMap(
                        ConstantExpressionNode.special(nextId, "<default>", new Type("~Default")), statement));

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("SwitchCasesStatement", 36, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 93: // SwitchCasesStatement ::= SwitchCasesStatement ConstantExpression ARROW Statement
            {
                Map<ConstantExpressionNode, StatementNode> RESULT = null;
                Map<ConstantExpressionNode, StatementNode> cases = (Map<ConstantExpressionNode, StatementNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                ConstantExpressionNode expression = (ConstantExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                StatementNode statement = (StatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                cases.put(expression, statement);
                RESULT = cases;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("SwitchCasesStatement", 36, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 94: // SwitchCasesStatement ::= SwitchCasesStatement UNDERSCORE ARROW Statement
            {
                Map<ConstantExpressionNode, StatementNode> RESULT = null;
                Map<ConstantExpressionNode, StatementNode> cases = (Map<ConstantExpressionNode, StatementNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                StatementNode statement = (StatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                cases.put(
                        ConstantExpressionNode.special(nextId, "<default>", new Type("~Default")), statement
                );
                RESULT = cases;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("SwitchCasesStatement", 36, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 95: // WhileStatement ::= WHILE Expression BlockStatement
            {
                WhileStatementNode RESULT = null;
                ExpressionNode condition = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                BlockStatementNode whileBlock = (BlockStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new WhileStatementNode(nextId, condition, whileBlock);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("WhileStatement", 37, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 96: // ForStatement ::= FOR BaseVarDeclaration IN Expression BlockStatement
            {
                ForStatementNode RESULT = null;
                Name variable = (Name) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                ExpressionNode iterable = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                BlockStatementNode forBlock = (BlockStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ForStatementNode(nextId, variable, iterable, forBlock);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ForStatement", 38, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 97: // Expression ::= Expression0
            {
                ExpressionNode RESULT = null;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression", 39, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 98: // Expression0 ::= Expression0 ELLIPSIS Expression1
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(nextId, first, OperatorOverloadConstants._TO, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression0", 40, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 99: // Expression0 ::= Expression1
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = first;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression0", 40, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 100: // Expression1 ::= Expression1 OR Expression2
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(nextId, first, OperatorOverloadConstants._OR, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression1", 41, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 101: // Expression1 ::= Expression2
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = first;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression1", 41, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 102: // Expression2 ::= Expression2 AND Expression3
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(nextId, first, OperatorOverloadConstants._AND, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression2", 42, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 103: // Expression2 ::= Expression3
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = first;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression2", 42, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 104: // Expression3 ::= Expression3 EQUALS Expression4
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;

                RESULT = FunctionCallExpressionNode.operator(nextId, first, OperatorOverloadConstants._EQUALS, last);

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression3", 43, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 105: // Expression3 ::= Expression3 NEQ Expression4
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(nextId, first, OperatorOverloadConstants._NEQ, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression3", 43, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 106: // Expression3 ::= Expression3 IDENTITY Expression4
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(nextId, first, OperatorOverloadConstants._ID, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression3", 43, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 107: // Expression3 ::= Expression4
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = first;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression3", 43, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 108: // Expression4 ::= Expression4 GT Expression5
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(nextId, first, OperatorOverloadConstants._GT, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression4", 44, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 109: // Expression4 ::= Expression4 GE Expression5
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(nextId, first, OperatorOverloadConstants._GE, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression4", 44, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 110: // Expression4 ::= Expression4 LT Expression5
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(nextId, first, OperatorOverloadConstants._LT, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression4", 44, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 111: // Expression4 ::= Expression4 LE Expression5
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(nextId, first, OperatorOverloadConstants._LE, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression4", 44, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 112: // Expression4 ::= Expression5
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = first;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression4", 44, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 113: // Expression5 ::= Expression5 PLUS Expression6
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(nextId, first, OperatorOverloadConstants._PLUS, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression5", 45, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 114: // Expression5 ::= Expression5 MINUS Expression6
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;

                RESULT = FunctionCallExpressionNode.operator(nextId, first, OperatorOverloadConstants._MINUS, last);

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression5", 45, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 115: // Expression5 ::= Expression6
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = first;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression5", 45, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 116: // Expression6 ::= Expression6 MULT Expression7
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;

                RESULT = FunctionCallExpressionNode.operator(nextId, first, OperatorOverloadConstants._MULT, last);

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression6", 46, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 117: // Expression6 ::= Expression6 DIV Expression7
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(nextId, first, OperatorOverloadConstants._DIV, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression6", 46, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 118: // Expression6 ::= Expression6 MOD Expression7
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(nextId, first, OperatorOverloadConstants._MOD, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression6", 46, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 119: // Expression6 ::= Expression7
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = first;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression6", 46, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 120: // Expression7 ::= PLUS Expression7
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(nextId, OperatorOverloadConstants._PLUS, first);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression7", 47, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 121: // Expression7 ::= MINUS Expression7
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(nextId, OperatorOverloadConstants._MINUS, first);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression7", 47, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 122: // Expression7 ::= NOT Expression7
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(nextId, OperatorOverloadConstants._NOT, first);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression7", 47, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 123: // Expression7 ::= Expression8
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = first;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression7", 47, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 124: // Expression8 ::= FieldAccessExpression
            {
                ExpressionNode RESULT = null;
                PointExpressionNode expression = (PointExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression8", 48, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 125: // Expression8 ::= ArrayAccessExpression
            {
                ExpressionNode RESULT = null;
                ArrayAccessExpressionNode expression = (ArrayAccessExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression8", 48, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 126: // Expression8 ::= FunctionCallExpression
            {
                ExpressionNode RESULT = null;
                FunctionCallExpressionNode expression = (FunctionCallExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression8", 48, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 127: // Expression8 ::= Expression9
            {
                ExpressionNode RESULT = null;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression8", 48, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 128: // Expr8 ::= FieldAccessExpression
            {
                ExpressionNode RESULT = null;
                PointExpressionNode expression = (PointExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expr8", 49, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 129: // Expr8 ::= ArrayAccessExpression
            {
                ExpressionNode RESULT = null;
                ArrayAccessExpressionNode expression = (ArrayAccessExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expr8", 49, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 130: // Expr8 ::= FunctionCallExpression
            {
                ExpressionNode RESULT = null;
                FunctionCallExpressionNode expression = (FunctionCallExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expr8", 49, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 131: // Expr8 ::= Expr9
            {
                ExpressionNode RESULT = null;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expr8", 49, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 132: // Expression9 ::= Expr9
            {
                ExpressionNode RESULT = null;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression9", 50, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 133: // Expression9 ::= GlobalConstExpression
            {
                ExpressionNode RESULT = null;
                VariableExpressionNode expression = (VariableExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression9", 50, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 134: // Expr9 ::= PARENTH_L Expression0 PARENTH_R
            {
                ExpressionNode RESULT = null;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expr9", 51, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 135: // Expr9 ::= VariableExpression
            {
                ExpressionNode RESULT = null;
                VariableExpressionNode expression = (VariableExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expr9", 51, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 136: // Expr9 ::= ConstantExpression
            {
                ExpressionNode RESULT = null;
                ConstantExpressionNode expression = (ConstantExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expr9", 51, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 137: // Expr9 ::= ListConstructorExpression
            {
                ExpressionNode RESULT = null;
                ListConstructorExpressionNode expression = (ListConstructorExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expr9", 51, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 138: // Expr9 ::= ConstructorCallExpression
            {
                ExpressionNode RESULT = null;
                ConstructorCallExpressionNode expression = (ConstructorCallExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expr9", 51, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 139: // Expr9 ::= error
            {
                ExpressionNode RESULT = null;
                parser.report_error("Expected an expression", null);
                RESULT = new ErrorExpressionNode(nextId);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expr9", 51, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 140: // ArrayAccessExpression ::= Expression8 SQUARE_L Expression SQUARE_R
            {
                ArrayAccessExpressionNode RESULT = null;
                ExpressionNode array = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                ExpressionNode index = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new ArrayAccessExpressionNode(nextId, array, index);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ArrayAccessExpression", 54, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 141: // FieldAccessExpression ::= Expression8 POINT IDENTIFIER
            {
                PointExpressionNode RESULT = null;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                String identifier = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new PointExpressionNode(nextId, expression, identifier);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FieldAccessExpression", 53, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 142: // FunctionCallExpression ::= Expr8 Arguments
            {
                FunctionCallExpressionNode RESULT = null;
                ExpressionNode function = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                List<ExpressionNode> arguments = (List<ExpressionNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new FunctionCallExpressionNode(nextId, function, arguments);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionCallExpression", 55, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 143: // ConstructorCallExpression ::= TYPE Arguments
            {
                ConstructorCallExpressionNode RESULT = null;
                String type = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                List<ExpressionNode> arguments = (List<ExpressionNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ConstructorCallExpressionNode(nextId, new Type(type), arguments);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstructorCallExpression", 64, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 144: // ConstructorCallExpression ::= GLOBAL Arguments
            {
                ConstructorCallExpressionNode RESULT = null;
                String type = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                List<ExpressionNode> arguments = (List<ExpressionNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ConstructorCallExpressionNode(nextId, new Type(type), arguments);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstructorCallExpression", 64, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 145: // ConstructorCallExpression ::= TYPE LT Type GT Arguments
            {
                ConstructorCallExpressionNode RESULT = null;
                String type = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 4)).value;
                Type qualified = (Type) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                List<ExpressionNode> arguments = (List<ExpressionNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ConstructorCallExpressionNode(
                        nextId, new Type(type, qualified), arguments);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstructorCallExpression", 64, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 146: // VariableExpression ::= IDENTIFIER
            {
                VariableExpressionNode RESULT = null;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new VariableExpressionNode(nextId, id);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VariableExpression", 56, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 147: // VariableExpression ::= THIS
            {
                VariableExpressionNode RESULT = null;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new VariableExpressionNode(nextId, id);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VariableExpression", 56, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 148: // GlobalConstExpression ::= GLOBAL
            {
                VariableExpressionNode RESULT = null;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new VariableExpressionNode(nextId, id);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalConstExpression", 57, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 149: // ConstantExpression ::= INT
            {
                ConstantExpressionNode RESULT = null;
                String n = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = ConstantExpressionNode.fromInt(nextId, n);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression", 58, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 150: // ConstantExpression ::= REAL
            {
                ConstantExpressionNode RESULT = null;
                String x = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = ConstantExpressionNode.fromFloat(nextId, x);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression", 58, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 151: // ConstantExpression ::= TRUE
            {
                ConstantExpressionNode RESULT = null;
                String t = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = ConstantExpressionNode.fromBoolean(nextId, t);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression", 58, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 152: // ConstantExpression ::= FALSE
            {
                ConstantExpressionNode RESULT = null;
                String f = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = ConstantExpressionNode.fromBoolean(nextId, f);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression", 58, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 153: // ConstantExpression ::= CHAR
            {
                ConstantExpressionNode RESULT = null;
                String c = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = ConstantExpressionNode.fromChar(nextId, c);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression", 58, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 154: // ConstantExpression ::= NOTHING
            {
                ConstantExpressionNode RESULT = null;
                RESULT = ConstantExpressionNode.ofNothing(nextId);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression", 58, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 155: // ConstantExpression ::= NULL
            {
                ConstantExpressionNode RESULT = null;
                RESULT = ConstantExpressionNode.ofNull(nextId);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression", 58, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 156: // ListConstructorExpression ::= STRING
            {
                ListConstructorExpressionNode RESULT = null;
                String str = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = ListConstructorExpressionNode.fromString(nextId, str);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListConstructorExpression", 59, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 157: // ListConstructorExpression ::= SQUARE_L SQUARE_R
            {
                ListConstructorExpressionNode RESULT = null;
                RESULT = new ListConstructorExpressionNode(nextId);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListConstructorExpression", 59, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 158: // ListConstructorExpression ::= SQUARE_L ListElements SQUARE_R
            {
                ListConstructorExpressionNode RESULT = null;
                List<ExpressionNode> elements = (List<ExpressionNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new ListConstructorExpressionNode(nextId, elements);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListConstructorExpression", 59, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 159: // ListElements ::= Expression
            {
                List<ExpressionNode> RESULT = null;
                ExpressionNode element = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ArrayList<>(Collections.singletonList(element));
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListElements", 60, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 160: // ListElements ::= ListElements COMMA Expression
            {
                List<ExpressionNode> RESULT = null;
                List<ExpressionNode> elements = (List<ExpressionNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode element = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                elements.add(element);
                RESULT = elements;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListElements", 60, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 161: // AnonymousObjectConstructorExpression ::= CURLY_L CURLY_R
            {
                AnonymousObjectConstructorExpressionNode RESULT = null;
                RESULT = new AnonymousObjectConstructorExpressionNode(nextId);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectConstructorExpression", 61, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 162: // AnonymousObjectConstructorExpression ::= CURLY_L AnonymousObjectFields CURLY_R
            {
                AnonymousObjectConstructorExpressionNode RESULT = null;
                VarDeclarationNode fields = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new AnonymousObjectConstructorExpressionNode(nextId, fields);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectConstructorExpression", 61, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 163: // AnonymousObjectFields ::= AnonymousObjectField
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode field = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = field;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectFields", 62, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 164: // AnonymousObjectFields ::= AnonymousObjectField COMMA AnonymousObjectFields
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode field = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                VarDeclarationNode fields = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                field.linkedTo(fields);
                RESULT = field;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectFields", 62, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 165: // AnonymousObjectField ::= VarInitDeclaration
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode field = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = field;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectField", 63, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 166: // AnonymousObjectField ::= LocalConstDeclaration
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode field = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = field;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectField", 63, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 167: // Type ::= TYPE
            {
                Type RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new Type(name);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Type", 65, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 168: // Type ::= TYPE LT Type GT
            {
                Type RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                Type param = (Type) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new Type(name, param);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Type", 65, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 169: // Type ::= GLOBAL
            {
                Type RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new Type(name);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Type", 65, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 170: // Type ::= GLOBAL LT Type GT
            {
                Type RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                Type param = (Type) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new Type(name, param);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Type", 65, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 171: // Arguments ::= PARENTH_L PARENTH_R
            {
                List<ExpressionNode> RESULT = null;
                RESULT = new ArrayList<>();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Arguments", 66, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 172: // Arguments ::= PARENTH_L ArgumentList PARENTH_R
            {
                List<ExpressionNode> RESULT = null;
                List<ExpressionNode> arguments = (List<ExpressionNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = arguments;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Arguments", 66, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 173: // ArgumentList ::= Expression
            {
                List<ExpressionNode> RESULT = null;
                ExpressionNode argument = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ArrayList<>(Collections.singletonList(argument));
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ArgumentList", 67, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 174: // ArgumentList ::= ArgumentList COMMA Expression
            {
                List<ExpressionNode> RESULT = null;
                List<ExpressionNode> arguments = (List<ExpressionNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode argument = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                arguments.add(argument);
                RESULT = arguments;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ArgumentList", 67, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /* . . . . . .*/
            default:
                throw new Exception(
                        "Invalid action number " + CUP$SyntacticalAnalyser$act_num + "found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$SyntacticalAnalyser$do_action(
            int CUP$SyntacticalAnalyser$act_num,
            java_cup.runtime.lr_parser CUP$SyntacticalAnalyser$parser,
            java.util.Stack CUP$SyntacticalAnalyser$stack,
            int CUP$SyntacticalAnalyser$top)
            throws java.lang.Exception {
        return CUP$SyntacticalAnalyser$do_action_part00000000(
                CUP$SyntacticalAnalyser$act_num,
                CUP$SyntacticalAnalyser$parser,
                CUP$SyntacticalAnalyser$stack,
                CUP$SyntacticalAnalyser$top);
    }
}

