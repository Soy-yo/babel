package syntactical;

import java_cup.runtime.*;
import lexical.LexicalAnalyser;
import lexical.LexicalUnit;

import java.util.*;

scan with {:  return getScanner().next_token(); :}
action code {: /* TODO tree root declaration */ :}
parser code {: /* TODO ?? */ :}
init with {:
    LexicalAnalyser analyser = (LexicalAnalyser) getScanner();
:}

// TODO types etc

terminal INT, REAL, CHAR, STRING, IF, ELSE, SWITCH, FOR, WHILE, IN, RETURN,
         TRUE, FALSE, NOTHING, NULL, CONST, IMPORT, CLASS, CONSTRUCTOR,
         THIS, UNDERSCORE, IDENTIFIER, PARENTH_L, PARENTH_R, SQUARE_L, SQUARE_R,
         CURLY_L, CURLY_R, ARROW, ELLIPSIS, POINT, COMMA, PLUS_ASSIGN, PLUS,
         MINUS_ASSIGN, MINUS, MULT_ASSIGN, MULT, DIV_ASSIGN, DIV, MOD_ASSIGN, MOD,
         LE, LT, GE, GT, IDENTITY, EQUALS, NEQ, ASSIGNMENT, NOT, AND, OR, END;

// Program
nonterminal Program;
// Imports
nonterminal ImportList;
// Declarations
nonterminal DeclarationList, Declaration;
// Variables
nonterminal VarDeclaration, GlobalVarConstDeclaration, VarConstDeclaration, BaseVarDeclaration, VarInitDeclaration,
            GlobalConstDeclaration, LocalConstDeclaration;
// Functions
nonterminal FunctionDeclaration, FunctionParameters, ParameterList;
// Classes
nonterminal ClassDeclaration, ClassBlock, ConstructorDeclaration, ClassElementList, ClassElement;
// Blocks
nonterminal Block;
// Statements
nonterminal StatementList, Statement;
nonterminal VarDeclarationStatement, IfElseStatement, IfStatement, ElseStatement;
// Expressions
nonterminal Expression;
// Other (to check case)
nonterminal Type, VarId, GlobalConstId;

// TODO Statement, Expression

// Program
Program ::= ImportList DeclarationList;

// Imports
ImportList ::= IMPORT END ImportList
             | ;

// Declarations
DeclarationList ::= DeclarationList Declaration
                  | ;
Declaration     ::= GlobalVarConstDeclaration
                  | FunctionDeclaration
                  | ClassDeclaration;

// Variables
VarDeclaration            ::= BaseVarDeclaration END
                            | VarInitDeclaration END;
GlobalVarConstDeclaration ::= VarDeclaration
                            | GlobalConstDeclaration END;
VarConstDeclaration       ::= VarDeclaration
                            | LocalConstDeclaration END;
BaseVarDeclaration        ::= Type VarId;
VarInitDeclaration        ::= BaseVarDeclaration ASSIGNMENT Expression;
GlobalConstDeclaration    ::= CONST GlobalConstId ASSIGNMENT Expression;
LocalConstDeclaration     ::= CONST VarInitDeclaration;

// Functions
FunctionDeclaration ::= BaseVarDeclaration FunctionParameters Block;
FunctionParameters  ::= PARENTH_L PARENTH_R
                      | PARENTH_L ParameterList PARENTH_R;
ParameterList       ::= BaseVarDeclaration
                      | ParameterList COMMA BaseVarDeclaration;

// Classes
ClassDeclaration       ::= CLASS Type ClassBlock;
ClassBlock             ::= CURLY_L ClassElementList CURLY_R;
ClassElementList       ::= ClassElement ClassElementList
                         | ;
ClassElement           ::= VarConstDeclaration
                         | ConstructorDeclaration
                         | FunctionDeclaration;
ConstructorDeclaration ::= CONSTRUCTOR FunctionParameters Block;

// Blocks
Block ::= CURLY_L StatementList CURLY_R;

// Statements
StatementList           ::= Statement StatementList
                          | ;
Statement               ::= VarDeclarationStatement
                          | IfElseStatement;
VarDeclarationStatement ::= VarConstDeclaration;
IfElseStatement         ::= IfStatement ElseStatement;
IfStatement             ::= IF Expression Block;
ElseStatement           ::= ELSE Block
                          | ELSE IfElseStatement;

// Other
Type          ::= IDENTIFIER;
VarId         ::= IDENTIFIER;
GlobalConstId ::= IDENTIFIER;