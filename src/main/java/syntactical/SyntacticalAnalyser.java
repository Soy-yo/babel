
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Tue May 19 21:42:52 CEST 2020
//----------------------------------------------------

package syntactical;

import error.SyntacticalException;
import java_cup.runtime.Symbol;
import lexical.LexicalAnalyser;
import lexical.LexicalUnit;
import syntactical.ast.*;

import java.util.*;

/**
 * CUP v0.11b beta 20140220 generated parser.
 *
 * @version Tue May 19 21:42:52 CEST 2020
 */
public class SyntacticalAnalyser extends java_cup.runtime.lr_parser {

    /** Default constructor. */
    public SyntacticalAnalyser() {
        super();
    }

    /** Constructor which sets the default scanner. */
    public SyntacticalAnalyser(java_cup.runtime.Scanner s) {
        super(s);
    }

    /** Constructor which sets the default scanner. */
    public SyntacticalAnalyser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /** Production table. */
    protected static final short _production_table[][] =
            unpackFromStrings(new String[]{
                    "\000\244\000\002\002\004\000\002\002\004\000\002\003" +
                            "\004\000\002\003\002\000\002\004\005\000\002\004\005" +
                            "\000\002\005\005\000\002\005\003\000\002\006\003\000" +
                            "\002\006\003\000\002\006\003\000\002\007\004\000\002" +
                            "\007\002\000\002\010\003\000\002\010\003\000\002\010" +
                            "\003\000\002\012\003\000\002\012\004\000\002\013\003" +
                            "\000\002\013\004\000\002\011\004\000\002\011\004\000" +
                            "\002\017\004\000\002\017\004\000\002\014\005\000\002" +
                            "\014\004\000\002\015\007\000\002\015\005\000\002\016" +
                            "\004\000\002\064\003\000\002\064\003\000\002\020\003" +
                            "\000\002\020\003\000\002\021\005\000\002\022\004\000" +
                            "\002\022\005\000\002\023\003\000\002\023\005\000\002" +
                            "\023\003\000\002\023\005\000\002\024\005\000\002\024" +
                            "\005\000\002\024\005\000\002\025\005\000\002\026\004" +
                            "\000\002\026\002\000\002\027\003\000\002\027\003\000" +
                            "\002\027\003\000\002\030\005\000\002\031\004\000\002" +
                            "\031\002\000\002\032\003\000\002\032\003\000\002\032" +
                            "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
                            "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
                            "\002\033\005\000\002\034\003\000\002\035\006\000\002" +
                            "\035\006\000\002\035\006\000\002\035\006\000\002\035" +
                            "\006\000\002\035\006\000\002\036\003\000\002\036\003" +
                            "\000\002\036\003\000\002\037\004\000\002\040\004\000" +
                            "\002\040\005\000\002\041\006\000\002\042\004\000\002" +
                            "\042\004\000\002\042\002\000\002\043\007\000\002\044" +
                            "\005\000\002\044\005\000\002\044\006\000\002\044\006" +
                            "\000\002\045\005\000\002\046\007\000\002\047\003\000" +
                            "\002\050\005\000\002\050\003\000\002\051\005\000\002" +
                            "\051\003\000\002\052\005\000\002\052\003\000\002\053" +
                            "\005\000\002\053\005\000\002\053\005\000\002\053\003" +
                            "\000\002\054\005\000\002\054\005\000\002\054\005\000" +
                            "\002\054\005\000\002\054\003\000\002\055\005\000\002" +
                            "\055\005\000\002\055\003\000\002\056\005\000\002\056" +
                            "\005\000\002\056\005\000\002\056\003\000\002\057\004" +
                            "\000\002\057\004\000\002\057\004\000\002\057\003\000" +
                            "\002\060\003\000\002\060\003\000\002\060\003\000\002" +
                            "\060\003\000\002\061\003\000\002\061\003\000\002\061" +
                            "\003\000\002\061\003\000\002\062\003\000\002\062\003" +
                            "\000\002\063\005\000\002\063\003\000\002\063\003\000" +
                            "\002\063\003\000\002\063\003\000\002\063\003\000\002" +
                            "\066\006\000\002\065\005\000\002\067\004\000\002\100" +
                            "\004\000\002\100\004\000\002\100\007\000\002\070\003" +
                            "\000\002\070\003\000\002\071\003\000\002\072\003\000" +
                            "\002\072\003\000\002\072\003\000\002\072\003\000\002" +
                            "\072\003\000\002\072\003\000\002\072\003\000\002\073" +
                            "\003\000\002\073\004\000\002\073\005\000\002\074\003" +
                            "\000\002\074\005\000\002\075\004\000\002\075\005\000" +
                            "\002\076\003\000\002\076\005\000\002\077\003\000\002" +
                            "\077\003\000\002\101\003\000\002\101\006\000\002\101" +
                            "\003\000\002\101\006\000\002\102\004\000\002\102\005" +
                            "\000\002\103\003\000\002\103\005"});

    /** Access to production table. */
    public short[][] production_table() {
        return _production_table;
    }

    /** Parse-action table. */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[]{
                    "\000\u0119\000\016\002\ufffe\013\ufffe\014\ufffe\060\ufffe\062" +
                            "\ufffe\063\ufffe\001\002\000\004\002\u011b\001\002\000\016" +
                            "\002\ufff5\013\025\014\026\060\023\062\017\063\024\001" +
                            "\002\000\006\003\u0119\057\u011a\001\002\000\016\002\uffff" +
                            "\013\uffff\014\uffff\060\uffff\062\uffff\063\uffff\001\002\000" +
                            "\004\056\u0118\001\002\000\014\002\ufff5\013\025\014\026" +
                            "\060\023\062\017\001\002\000\014\002\ufff2\013\ufff2\014" +
                            "\ufff2\060\ufff2\062\ufff2\001\002\000\014\002\ufff1\013\ufff1" +
                            "\014\ufff1\060\ufff1\062\ufff1\001\002\000\004\002\001\001" +
                            "\002\000\010\017\237\052\047\056\310\001\002\000\014" +
                            "\002\ufff4\013\ufff4\014\ufff4\060\ufff4\062\ufff4\001\002\000" +
                            "\014\003\uff65\017\200\044\u0112\057\uff65\060\uff65\001\002" +
                            "\000\014\002\ufff3\013\ufff3\014\ufff3\060\ufff3\062\ufff3\001" +
                            "\002\000\004\057\305\001\002\000\004\056\u0111\001\002" +
                            "\000\014\003\uff63\017\200\044\227\057\uff63\060\uff63\001" +
                            "\002\000\012\003\u0109\057\u010b\060\u0107\062\u010c\001\002" +
                            "\000\006\060\023\062\017\001\002\000\010\003\030\060" +
                            "\027\062\031\001\002\000\004\023\032\001\002\000\004" +
                            "\023\032\001\002\000\004\023\032\001\002\000\014\013" +
                            "\044\015\043\024\uffd4\060\023\062\017\001\002\000\014" +
                            "\002\uffd9\013\uffd9\014\uffd9\060\uffd9\062\uffd9\001\002\000" +
                            "\014\013\044\015\043\024\uffd4\060\023\062\017\001\002" +
                            "\000\014\013\uffd2\015\uffd2\024\uffd2\060\uffd2\062\uffd2\001" +
                            "\002\000\014\013\uffd3\015\uffd3\024\uffd3\060\uffd3\062\uffd3" +
                            "\001\002\000\064\003\uffef\004\uffef\006\uffef\007\uffef\010" +
                            "\uffef\012\uffef\013\uffef\015\uffef\016\uffef\017\uffef\021\uffef" +
                            "\023\uffef\024\uffef\057\uffef\060\uffef\061\uffef\062\uffef\064" +
                            "\uffef\065\uffef\066\uffef\067\uffef\070\uffef\071\uffef\072\uffef" +
                            "\073\uffef\001\002\000\004\056\373\001\002\000\004\024" +
                            "\372\001\002\000\014\013\uffd1\015\uffd1\024\uffd1\060\uffd1" +
                            "\062\uffd1\001\002\000\004\017\237\001\002\000\006\060" +
                            "\023\062\017\001\002\000\004\052\047\001\002\000\010" +
                            "\024\uffe5\030\uffe5\056\uffe5\001\002\000\050\003\065\017" +
                            "\120\021\101\023\107\032\061\034\054\053\056\057\121" +
                            "\060\072\061\062\062\057\064\051\065\105\066\050\067" +
                            "\115\070\064\071\117\072\116\073\067\001\002\000\064" +
                            "\017\uff73\020\uff73\021\uff73\022\uff73\023\uff73\024\uff73\025" +
                            "\uff73\026\uff73\027\uff73\030\uff73\032\uff73\034\uff73\036\uff73" +
                            "\040\uff73\042\uff73\043\uff73\044\uff73\045\uff73\046\uff73\047" +
                            "\uff73\050\uff73\051\uff73\054\uff73\055\uff73\056\uff73\001\002" +
                            "\000\064\017\uff77\020\uff77\021\uff77\022\uff77\023\uff77\024" +
                            "\uff77\025\uff77\026\uff77\027\uff77\030\uff77\032\uff77\034\uff77" +
                            "\036\uff77\040\uff77\042\uff77\043\uff77\044\uff77\045\uff77\046" +
                            "\uff77\047\uff77\050\uff77\051\uff77\054\uff77\055\uff77\056\uff77" +
                            "\001\002\000\010\024\uffe3\030\uffe3\056\uffe3\001\002\000" +
                            "\062\017\uff84\020\uff84\021\uff84\022\uff84\023\uff84\024\uff84" +
                            "\026\uff84\027\uff84\030\uff84\032\uff84\034\uff84\036\uff84\040" +
                            "\uff84\042\uff84\043\uff84\044\uff84\045\uff84\046\uff84\047\uff84" +
                            "\050\uff84\051\uff84\054\uff84\055\uff84\056\uff84\001\002\000" +
                            "\046\003\065\017\120\021\101\032\061\034\054\053\056" +
                            "\057\121\060\072\061\062\062\057\064\051\065\105\066" +
                            "\050\067\115\070\064\071\117\072\116\073\067\001\002" +
                            "\000\062\017\uff8c\020\uff90\021\uff90\022\uff90\023\uff90\024" +
                            "\uff90\026\uff90\027\uff90\030\uff90\032\uff90\034\uff90\036\uff90" +
                            "\040\uff90\042\uff90\043\uff90\044\uff90\045\uff90\046\uff90\047" +
                            "\uff90\050\uff90\051\uff90\054\uff90\055\uff90\056\uff90\001\002" +
                            "\000\046\003\065\017\120\021\101\032\061\034\054\053" +
                            "\056\057\121\060\072\061\062\062\057\064\051\065\105" +
                            "\066\050\067\115\070\064\071\117\072\116\073\067\001" +
                            "\002\000\006\017\200\044\217\001\002\000\062\017\uff8a" +
                            "\020\uff8e\021\uff8e\022\uff8e\023\uff8e\024\uff8e\026\uff8e\027" +
                            "\uff8e\030\uff8e\032\uff8e\034\uff8e\036\uff8e\040\uff8e\042\uff8e" +
                            "\043\uff8e\044\uff8e\045\uff8e\046\uff8e\047\uff8e\050\uff8e\051" +
                            "\uff8e\054\uff8e\055\uff8e\056\uff8e\001\002\000\046\003\065" +
                            "\017\120\021\101\032\061\034\054\053\056\057\121\060" +
                            "\072\061\062\062\057\064\051\065\105\066\050\067\115" +
                            "\070\064\071\117\072\116\073\067\001\002\000\076\017" +
                            "\uff79\020\uff79\021\uff79\022\uff79\023\uff79\024\uff79\026\uff79" +
                            "\027\uff79\030\uff79\031\uff79\032\uff79\033\uff79\034\uff79\035" +
                            "\uff79\036\uff79\037\uff79\040\uff79\041\uff79\042\uff79\043\uff79" +
                            "\044\uff79\045\uff79\046\uff79\047\uff79\050\uff79\051\uff79\052" +
                            "\uff79\054\uff79\055\uff79\056\uff79\001\002\000\062\017\uff85" +
                            "\020\uff85\021\uff85\022\uff85\023\uff85\024\uff85\026\uff85\027" +
                            "\uff85\030\uff85\032\uff85\034\uff85\036\uff85\040\uff85\042\uff85" +
                            "\043\uff85\044\uff85\045\uff85\046\uff85\047\uff85\050\uff85\051" +
                            "\uff85\054\uff85\055\uff85\056\uff85\001\002\000\064\017\uff75" +
                            "\020\uff75\021\uff75\022\uff75\023\uff75\024\uff75\025\uff75\026" +
                            "\uff75\027\uff75\030\uff75\032\uff75\034\uff75\036\uff75\040\uff75" +
                            "\042\uff75\043\uff75\044\uff75\045\uff75\046\uff75\047\uff75\050" +
                            "\uff75\051\uff75\054\uff75\055\uff75\056\uff75\001\002\000\062" +
                            "\017\uff81\020\uff81\021\uff81\022\uff81\023\uff81\024\uff81\026" +
                            "\uff81\027\uff81\030\uff81\032\uff81\034\uff81\036\uff81\040\uff81" +
                            "\042\uff81\043\uff81\044\uff81\045\uff81\046\uff81\047\uff81\050" +
                            "\uff81\051\uff81\054\uff81\055\uff81\056\uff81\001\002\000\060" +
                            "\020\uff8d\021\uff8d\022\uff8d\023\uff8d\024\uff8d\026\uff8d\027" +
                            "\uff8d\030\uff8d\032\uff8d\034\uff8d\036\uff8d\040\uff8d\042\uff8d" +
                            "\043\uff8d\044\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d\051" +
                            "\uff8d\054\uff8d\055\uff8d\056\uff8d\001\002\000\064\017\uff71" +
                            "\020\uff71\021\uff71\022\uff71\023\uff71\024\uff71\025\uff71\026" +
                            "\uff71\027\uff71\030\uff71\032\uff71\034\uff71\036\uff71\040\uff71" +
                            "\042\uff71\043\uff71\044\uff71\045\uff71\046\uff71\047\uff71\050" +
                            "\uff71\051\uff71\054\uff71\055\uff71\056\uff71\001\002\000\060" +
                            "\020\uff91\021\212\022\uff91\023\uff91\024\uff91\026\uff91\027" +
                            "\211\030\uff91\032\uff91\034\uff91\036\uff91\040\uff91\042\uff91" +
                            "\043\uff91\044\uff91\045\uff91\046\uff91\047\uff91\050\uff91\051" +
                            "\uff91\054\uff91\055\uff91\056\uff91\001\002\000\054\020\uff95" +
                            "\022\uff95\023\uff95\024\uff95\026\uff95\030\uff95\032\uff95\034" +
                            "\uff95\036\uff95\040\uff95\042\uff95\043\uff95\044\uff95\045\uff95" +
                            "\046\uff95\047\uff95\050\uff95\051\uff95\054\uff95\055\uff95\056" +
                            "\uff95\001\002\000\062\017\200\020\uff78\021\uff78\022\uff78" +
                            "\023\uff78\024\uff78\026\uff78\027\uff78\030\uff78\032\uff78\034" +
                            "\uff78\036\uff78\040\uff78\042\uff78\043\uff78\044\uff78\045\uff78" +
                            "\046\uff78\047\uff78\050\uff78\051\uff78\054\uff78\055\uff78\056" +
                            "\uff78\001\002\000\054\020\uff99\022\uff99\023\uff99\024\uff99" +
                            "\026\uff99\030\uff99\032\uff99\034\uff99\036\147\040\150\042" +
                            "\146\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99\050\uff99" +
                            "\051\uff99\054\uff99\055\uff99\056\uff99\001\002\000\062\017" +
                            "\uff89\020\uff88\021\uff88\022\uff88\023\uff88\024\uff88\026\uff88" +
                            "\027\uff88\030\uff88\032\uff88\034\uff88\036\uff88\040\uff88\042" +
                            "\uff88\043\uff88\044\uff88\045\uff88\046\uff88\047\uff88\050\uff88" +
                            "\051\uff88\054\uff88\055\uff88\056\uff88\001\002\000\046\020" +
                            "\uff9c\022\uff9c\023\uff9c\024\uff9c\026\uff9c\030\uff9c\032\143" +
                            "\034\144\043\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050" +
                            "\uff9c\051\uff9c\054\uff9c\055\uff9c\056\uff9c\001\002\000\004" +
                            "\017\200\001\002\000\042\020\uffa1\022\uffa1\023\uffa1\024" +
                            "\uffa1\026\uffa1\030\uffa1\043\140\044\136\045\141\046\137" +
                            "\047\uffa1\050\uffa1\051\uffa1\054\uffa1\055\uffa1\056\uffa1\001" +
                            "\002\000\032\020\uffa5\022\uffa5\023\uffa5\024\uffa5\026\uffa5" +
                            "\030\uffa5\047\132\050\133\051\134\054\uffa5\055\uffa5\056" +
                            "\uffa5\001\002\000\050\003\065\017\120\021\101\022\172" +
                            "\032\061\034\054\053\056\057\121\060\072\061\062\062" +
                            "\057\064\051\065\105\066\050\067\115\070\064\071\117" +
                            "\072\116\073\067\001\002\000\024\020\uffa7\022\uffa7\023" +
                            "\uffa7\024\uffa7\026\uffa7\030\uffa7\054\130\055\uffa7\056\uffa7" +
                            "\001\002\000\062\017\uff83\020\uff83\021\uff83\022\uff83\023" +
                            "\uff83\024\uff83\026\uff83\027\uff83\030\uff83\032\uff83\034\uff83" +
                            "\036\uff83\040\uff83\042\uff83\043\uff83\044\uff83\045\uff83\046" +
                            "\uff83\047\uff83\050\uff83\051\uff83\054\uff83\055\uff83\056\uff83" +
                            "\001\002\000\022\020\uffa9\022\uffa9\023\uffa9\024\uffa9\026" +
                            "\uffa9\030\uffa9\055\126\056\uffa9\001\002\000\064\017\uff76" +
                            "\020\uff76\021\uff76\022\uff76\023\uff76\024\uff76\025\uff76\026" +
                            "\uff76\027\uff76\030\uff76\032\uff76\034\uff76\036\uff76\040\uff76" +
                            "\042\uff76\043\uff76\044\uff76\045\uff76\046\uff76\047\uff76\050" +
                            "\uff76\051\uff76\054\uff76\055\uff76\056\uff76\001\002\000\020" +
                            "\020\uffab\022\uffab\023\uffab\024\uffab\026\123\030\uffab\056" +
                            "\uffab\001\002\000\012\013\044\024\163\060\023\062\017" +
                            "\001\002\000\062\017\uff8b\020\uff8f\021\uff8f\022\uff8f\023" +
                            "\uff8f\024\uff8f\026\uff8f\027\uff8f\030\uff8f\032\uff8f\034\uff8f" +
                            "\036\uff8f\040\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f\046" +
                            "\uff8f\047\uff8f\050\uff8f\051\uff8f\054\uff8f\055\uff8f\056\uff8f" +
                            "\001\002\000\060\020\uff87\021\uff87\022\uff87\023\uff87\024" +
                            "\uff87\026\uff87\027\uff87\030\uff87\032\uff87\034\uff87\036\uff87" +
                            "\040\uff87\042\uff87\043\uff87\044\uff87\045\uff87\046\uff87\047" +
                            "\uff87\050\uff87\051\uff87\054\uff87\055\uff87\056\uff87\001\002" +
                            "\000\010\024\uffe9\030\uffe9\056\uffe9\001\002\000\062\017" +
                            "\uff82\020\uff82\021\uff82\022\uff82\023\uff82\024\uff82\026\uff82" +
                            "\027\uff82\030\uff82\032\uff82\034\uff82\036\uff82\040\uff82\042" +
                            "\uff82\043\uff82\044\uff82\045\uff82\046\uff82\047\uff82\050\uff82" +
                            "\051\uff82\054\uff82\055\uff82\056\uff82\001\002\000\010\024" +
                            "\uffe4\030\uffe4\056\uffe4\001\002\000\062\017\uff70\020\uff70" +
                            "\021\uff70\022\uff70\023\uff70\024\uff70\026\uff70\027\uff70\030" +
                            "\uff70\032\uff70\034\uff70\036\uff70\040\uff70\042\uff70\043\uff70" +
                            "\044\uff70\045\uff70\046\uff70\047\uff70\050\uff70\051\uff70\054" +
                            "\uff70\055\uff70\056\uff70\001\002\000\064\017\uff72\020\uff72" +
                            "\021\uff72\022\uff72\023\uff72\024\uff72\025\uff72\026\uff72\027" +
                            "\uff72\030\uff72\032\uff72\034\uff72\036\uff72\040\uff72\042\uff72" +
                            "\043\uff72\044\uff72\045\uff72\046\uff72\047\uff72\050\uff72\051" +
                            "\uff72\054\uff72\055\uff72\056\uff72\001\002\000\064\017\uff74" +
                            "\020\uff74\021\uff74\022\uff74\023\uff74\024\uff74\025\uff74\026" +
                            "\uff74\027\uff74\030\uff74\032\uff74\034\uff74\036\uff74\040\uff74" +
                            "\042\uff74\043\uff74\044\uff74\045\uff74\046\uff74\047\uff74\050" +
                            "\uff74\051\uff74\054\uff74\055\uff74\056\uff74\001\002\000\046" +
                            "\003\065\017\120\021\101\032\061\034\054\053\056\057" +
                            "\121\060\072\061\062\062\057\064\051\065\105\066\050" +
                            "\067\115\070\064\071\117\072\116\073\067\001\002\000" +
                            "\076\017\uff7a\020\uff7a\021\uff7a\022\uff7a\023\uff7a\024\uff7a" +
                            "\026\uff7a\027\uff7a\030\uff7a\031\uff7a\032\uff7a\033\uff7a\034" +
                            "\uff7a\035\uff7a\036\uff7a\037\uff7a\040\uff7a\041\uff7a\042\uff7a" +
                            "\043\uff7a\044\uff7a\045\uff7a\046\uff7a\047\uff7a\050\uff7a\051" +
                            "\uff7a\052\uff7a\054\uff7a\055\uff7a\056\uff7a\001\002\000\006" +
                            "\020\124\026\123\001\002\000\046\003\065\017\120\021" +
                            "\101\032\061\034\054\053\056\057\121\060\072\061\062" +
                            "\062\057\064\051\065\105\066\050\067\115\070\064\071" +
                            "\117\072\116\073\067\001\002\000\062\017\uff86\020\uff86" +
                            "\021\uff86\022\uff86\023\uff86\024\uff86\026\uff86\027\uff86\030" +
                            "\uff86\032\uff86\034\uff86\036\uff86\040\uff86\042\uff86\043\uff86" +
                            "\044\uff86\045\uff86\046\uff86\047\uff86\050\uff86\051\uff86\054" +
                            "\uff86\055\uff86\056\uff86\001\002\000\022\020\uffaa\022\uffaa" +
                            "\023\uffaa\024\uffaa\026\uffaa\030\uffaa\055\126\056\uffaa\001" +
                            "\002\000\046\003\065\017\120\021\101\032\061\034\054" +
                            "\053\056\057\121\060\072\061\062\062\057\064\051\065" +
                            "\105\066\050\067\115\070\064\071\117\072\116\073\067" +
                            "\001\002\000\024\020\uffa8\022\uffa8\023\uffa8\024\uffa8\026" +
                            "\uffa8\030\uffa8\054\130\055\uffa8\056\uffa8\001\002\000\046" +
                            "\003\065\017\120\021\101\032\061\034\054\053\056\057" +
                            "\121\060\072\061\062\062\057\064\051\065\105\066\050" +
                            "\067\115\070\064\071\117\072\116\073\067\001\002\000" +
                            "\032\020\uffa6\022\uffa6\023\uffa6\024\uffa6\026\uffa6\030\uffa6" +
                            "\047\132\050\133\051\134\054\uffa6\055\uffa6\056\uffa6\001" +
                            "\002\000\046\003\065\017\120\021\101\032\061\034\054" +
                            "\053\056\057\121\060\072\061\062\062\057\064\051\065" +
                            "\105\066\050\067\115\070\064\071\117\072\116\073\067" +
                            "\001\002\000\046\003\065\017\120\021\101\032\061\034" +
                            "\054\053\056\057\121\060\072\061\062\062\057\064\051" +
                            "\065\105\066\050\067\115\070\064\071\117\072\116\073" +
                            "\067\001\002\000\046\003\065\017\120\021\101\032\061" +
                            "\034\054\053\056\057\121\060\072\061\062\062\057\064" +
                            "\051\065\105\066\050\067\115\070\064\071\117\072\116" +
                            "\073\067\001\002\000\042\020\uffa3\022\uffa3\023\uffa3\024" +
                            "\uffa3\026\uffa3\030\uffa3\043\140\044\136\045\141\046\137" +
                            "\047\uffa3\050\uffa3\051\uffa3\054\uffa3\055\uffa3\056\uffa3\001" +
                            "\002\000\046\003\065\017\120\021\101\032\061\034\054" +
                            "\053\056\057\121\060\072\061\062\062\057\064\051\065" +
                            "\105\066\050\067\115\070\064\071\117\072\116\073\067" +
                            "\001\002\000\046\003\065\017\120\021\101\032\061\034" +
                            "\054\053\056\057\121\060\072\061\062\062\057\064\051" +
                            "\065\105\066\050\067\115\070\064\071\117\072\116\073" +
                            "\067\001\002\000\046\003\065\017\120\021\101\032\061" +
                            "\034\054\053\056\057\121\060\072\061\062\062\057\064" +
                            "\051\065\105\066\050\067\115\070\064\071\117\072\116" +
                            "\073\067\001\002\000\046\003\065\017\120\021\101\032" +
                            "\061\034\054\053\056\057\121\060\072\061\062\062\057" +
                            "\064\051\065\105\066\050\067\115\070\064\071\117\072" +
                            "\116\073\067\001\002\000\046\020\uff9f\022\uff9f\023\uff9f" +
                            "\024\uff9f\026\uff9f\030\uff9f\032\143\034\144\043\uff9f\044" +
                            "\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\054\uff9f" +
                            "\055\uff9f\056\uff9f\001\002\000\046\003\065\017\120\021" +
                            "\101\032\061\034\054\053\056\057\121\060\072\061\062" +
                            "\062\057\064\051\065\105\066\050\067\115\070\064\071" +
                            "\117\072\116\073\067\001\002\000\046\003\065\017\120" +
                            "\021\101\032\061\034\054\053\056\057\121\060\072\061" +
                            "\062\062\057\064\051\065\105\066\050\067\115\070\064" +
                            "\071\117\072\116\073\067\001\002\000\054\020\uff9a\022" +
                            "\uff9a\023\uff9a\024\uff9a\026\uff9a\030\uff9a\032\uff9a\034\uff9a" +
                            "\036\147\040\150\042\146\043\uff9a\044\uff9a\045\uff9a\046" +
                            "\uff9a\047\uff9a\050\uff9a\051\uff9a\054\uff9a\055\uff9a\056\uff9a" +
                            "\001\002\000\046\003\065\017\120\021\101\032\061\034" +
                            "\054\053\056\057\121\060\072\061\062\062\057\064\051" +
                            "\065\105\066\050\067\115\070\064\071\117\072\116\073" +
                            "\067\001\002\000\046\003\065\017\120\021\101\032\061" +
                            "\034\054\053\056\057\121\060\072\061\062\062\057\064" +
                            "\051\065\105\066\050\067\115\070\064\071\117\072\116" +
                            "\073\067\001\002\000\046\003\065\017\120\021\101\032" +
                            "\061\034\054\053\056\057\121\060\072\061\062\062\057" +
                            "\064\051\065\105\066\050\067\115\070\064\071\117\072" +
                            "\116\073\067\001\002\000\054\020\uff97\022\uff97\023\uff97" +
                            "\024\uff97\026\uff97\030\uff97\032\uff97\034\uff97\036\uff97\040" +
                            "\uff97\042\uff97\043\uff97\044\uff97\045\uff97\046\uff97\047\uff97" +
                            "\050\uff97\051\uff97\054\uff97\055\uff97\056\uff97\001\002\000" +
                            "\054\020\uff98\022\uff98\023\uff98\024\uff98\026\uff98\030\uff98" +
                            "\032\uff98\034\uff98\036\uff98\040\uff98\042\uff98\043\uff98\044" +
                            "\uff98\045\uff98\046\uff98\047\uff98\050\uff98\051\uff98\054\uff98" +
                            "\055\uff98\056\uff98\001\002\000\054\020\uff96\022\uff96\023" +
                            "\uff96\024\uff96\026\uff96\030\uff96\032\uff96\034\uff96\036\uff96" +
                            "\040\uff96\042\uff96\043\uff96\044\uff96\045\uff96\046\uff96\047" +
                            "\uff96\050\uff96\051\uff96\054\uff96\055\uff96\056\uff96\001\002" +
                            "\000\054\020\uff9b\022\uff9b\023\uff9b\024\uff9b\026\uff9b\030" +
                            "\uff9b\032\uff9b\034\uff9b\036\147\040\150\042\146\043\uff9b" +
                            "\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\054" +
                            "\uff9b\055\uff9b\056\uff9b\001\002\000\046\020\uff9d\022\uff9d" +
                            "\023\uff9d\024\uff9d\026\uff9d\030\uff9d\032\143\034\144\043" +
                            "\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d" +
                            "\054\uff9d\055\uff9d\056\uff9d\001\002\000\046\020\uffa0\022" +
                            "\uffa0\023\uffa0\024\uffa0\026\uffa0\030\uffa0\032\143\034\144" +
                            "\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051" +
                            "\uffa0\054\uffa0\055\uffa0\056\uffa0\001\002\000\046\020\uff9e" +
                            "\022\uff9e\023\uff9e\024\uff9e\026\uff9e\030\uff9e\032\143\034" +
                            "\144\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e" +
                            "\051\uff9e\054\uff9e\055\uff9e\056\uff9e\001\002\000\042\020" +
                            "\uffa4\022\uffa4\023\uffa4\024\uffa4\026\uffa4\030\uffa4\043\140" +
                            "\044\136\045\141\046\137\047\uffa4\050\uffa4\051\uffa4\054" +
                            "\uffa4\055\uffa4\056\uffa4\001\002\000\042\020\uffa2\022\uffa2" +
                            "\023\uffa2\024\uffa2\026\uffa2\030\uffa2\043\140\044\136\045" +
                            "\141\046\137\047\uffa2\050\uffa2\051\uffa2\054\uffa2\055\uffa2" +
                            "\056\uffa2\001\002\000\006\024\uff69\030\170\001\002\000" +
                            "\010\024\uff6b\030\uff6b\056\uff6b\001\002\000\004\024\167" +
                            "\001\002\000\006\024\uff66\030\uff66\001\002\000\006\024" +
                            "\uff67\030\uff67\001\002\000\010\024\uff6a\030\uff6a\056\uff6a" +
                            "\001\002\000\010\013\044\060\023\062\017\001\002\000" +
                            "\004\024\uff68\001\002\000\062\017\uff6f\020\uff6f\021\uff6f" +
                            "\022\uff6f\023\uff6f\024\uff6f\026\uff6f\027\uff6f\030\uff6f\032" +
                            "\uff6f\034\uff6f\036\uff6f\040\uff6f\042\uff6f\043\uff6f\044\uff6f" +
                            "\045\uff6f\046\uff6f\047\uff6f\050\uff6f\051\uff6f\054\uff6f\055" +
                            "\uff6f\056\uff6f\001\002\000\006\022\176\030\175\001\002" +
                            "\000\006\022\uff6d\030\uff6d\001\002\000\046\003\065\017" +
                            "\120\021\101\032\061\034\054\053\056\057\121\060\072" +
                            "\061\062\062\057\064\051\065\105\066\050\067\115\070" +
                            "\064\071\117\072\116\073\067\001\002\000\062\017\uff6e" +
                            "\020\uff6e\021\uff6e\022\uff6e\023\uff6e\024\uff6e\026\uff6e\027" +
                            "\uff6e\030\uff6e\032\uff6e\034\uff6e\036\uff6e\040\uff6e\042\uff6e" +
                            "\043\uff6e\044\uff6e\045\uff6e\046\uff6e\047\uff6e\050\uff6e\051" +
                            "\uff6e\054\uff6e\055\uff6e\056\uff6e\001\002\000\006\022\uff6c" +
                            "\030\uff6c\001\002\000\050\003\065\017\120\020\204\021" +
                            "\101\032\061\034\054\053\056\057\121\060\072\061\062" +
                            "\062\057\064\051\065\105\066\050\067\115\070\064\071" +
                            "\117\072\116\073\067\001\002\000\062\017\uff7e\020\uff7e" +
                            "\021\uff7e\022\uff7e\023\uff7e\024\uff7e\026\uff7e\027\uff7e\030" +
                            "\uff7e\032\uff7e\034\uff7e\036\uff7e\040\uff7e\042\uff7e\043\uff7e" +
                            "\044\uff7e\045\uff7e\046\uff7e\047\uff7e\050\uff7e\051\uff7e\054" +
                            "\uff7e\055\uff7e\056\uff7e\001\002\000\006\020\206\030\205" +
                            "\001\002\000\006\020\uff5f\030\uff5f\001\002\000\070\003" +
                            "\uff61\017\uff61\020\uff61\021\uff61\022\uff61\023\uff61\024\uff61" +
                            "\026\uff61\027\uff61\030\uff61\032\uff61\034\uff61\036\uff61\040" +
                            "\uff61\042\uff61\043\uff61\044\uff61\045\uff61\046\uff61\047\uff61" +
                            "\050\uff61\051\uff61\054\uff61\055\uff61\056\uff61\057\uff61\060" +
                            "\uff61\001\002\000\046\003\065\017\120\021\101\032\061" +
                            "\034\054\053\056\057\121\060\072\061\062\062\057\064" +
                            "\051\065\105\066\050\067\115\070\064\071\117\072\116" +
                            "\073\067\001\002\000\070\003\uff60\017\uff60\020\uff60\021" +
                            "\uff60\022\uff60\023\uff60\024\uff60\026\uff60\027\uff60\030\uff60" +
                            "\032\uff60\034\uff60\036\uff60\040\uff60\042\uff60\043\uff60\044" +
                            "\uff60\045\uff60\046\uff60\047\uff60\050\uff60\051\uff60\054\uff60" +
                            "\055\uff60\056\uff60\057\uff60\060\uff60\001\002\000\006\020" +
                            "\uff5e\030\uff5e\001\002\000\070\003\uff7c\017\uff7c\020\uff7c" +
                            "\021\uff7c\022\uff7c\023\uff7c\024\uff7c\026\uff7c\027\uff7c\030" +
                            "\uff7c\032\uff7c\034\uff7c\036\uff7c\040\uff7c\042\uff7c\043\uff7c" +
                            "\044\uff7c\045\uff7c\046\uff7c\047\uff7c\050\uff7c\051\uff7c\054" +
                            "\uff7c\055\uff7c\056\uff7c\057\uff7c\060\uff7c\001\002\000\004" +
                            "\057\215\001\002\000\046\003\065\017\120\021\101\032" +
                            "\061\034\054\053\056\057\121\060\072\061\062\062\057" +
                            "\064\051\065\105\066\050\067\115\070\064\071\117\072" +
                            "\116\073\067\001\002\000\004\022\214\001\002\000\076" +
                            "\017\uff80\020\uff80\021\uff80\022\uff80\023\uff80\024\uff80\026" +
                            "\uff80\027\uff80\030\uff80\031\uff80\032\uff80\033\uff80\034\uff80" +
                            "\035\uff80\036\uff80\037\uff80\040\uff80\041\uff80\042\uff80\043" +
                            "\uff80\044\uff80\045\uff80\046\uff80\047\uff80\050\uff80\051\uff80" +
                            "\052\uff80\054\uff80\055\uff80\056\uff80\001\002\000\076\017" +
                            "\uff7f\020\uff7f\021\uff7f\022\uff7f\023\uff7f\024\uff7f\026\uff7f" +
                            "\027\uff7f\030\uff7f\031\uff7f\032\uff7f\033\uff7f\034\uff7f\035" +
                            "\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f\042\uff7f\043\uff7f" +
                            "\044\uff7f\045\uff7f\046\uff7f\047\uff7f\050\uff7f\051\uff7f\052" +
                            "\uff7f\054\uff7f\055\uff7f\056\uff7f\001\002\000\054\020\uff94" +
                            "\022\uff94\023\uff94\024\uff94\026\uff94\030\uff94\032\uff94\034" +
                            "\uff94\036\uff94\040\uff94\042\uff94\043\uff94\044\uff94\045\uff94" +
                            "\046\uff94\047\uff94\050\uff94\051\uff94\054\uff94\055\uff94\056" +
                            "\uff94\001\002\000\006\060\222\062\223\001\002\000\070" +
                            "\003\uff7d\017\uff7d\020\uff7d\021\uff7d\022\uff7d\023\uff7d\024" +
                            "\uff7d\026\uff7d\027\uff7d\030\uff7d\032\uff7d\034\uff7d\036\uff7d" +
                            "\040\uff7d\042\uff7d\043\uff7d\044\uff7d\045\uff7d\046\uff7d\047" +
                            "\uff7d\050\uff7d\051\uff7d\054\uff7d\055\uff7d\056\uff7d\057\uff7d" +
                            "\060\uff7d\001\002\000\004\046\232\001\002\000\012\003" +
                            "\uff63\044\227\046\uff63\057\uff63\001\002\000\012\003\uff65" +
                            "\044\224\046\uff65\057\uff65\001\002\000\006\060\222\062" +
                            "\223\001\002\000\004\046\226\001\002\000\010\003\uff64" +
                            "\046\uff64\057\uff64\001\002\000\006\060\222\062\223\001" +
                            "\002\000\004\046\231\001\002\000\012\003\uff62\046\uff62" +
                            "\057\uff62\060\uff62\001\002\000\004\017\200\001\002\000" +
                            "\070\003\uff7b\017\uff7b\020\uff7b\021\uff7b\022\uff7b\023\uff7b" +
                            "\024\uff7b\026\uff7b\027\uff7b\030\uff7b\032\uff7b\034\uff7b\036" +
                            "\uff7b\040\uff7b\042\uff7b\043\uff7b\044\uff7b\045\uff7b\046\uff7b" +
                            "\047\uff7b\050\uff7b\051\uff7b\054\uff7b\055\uff7b\056\uff7b\057" +
                            "\uff7b\060\uff7b\001\002\000\054\020\uff92\022\uff92\023\uff92" +
                            "\024\uff92\026\uff92\030\uff92\032\uff92\034\uff92\036\uff92\040" +
                            "\uff92\042\uff92\043\uff92\044\uff92\045\uff92\046\uff92\047\uff92" +
                            "\050\uff92\051\uff92\054\uff92\055\uff92\056\uff92\001\002\000" +
                            "\054\020\uff93\022\uff93\023\uff93\024\uff93\026\uff93\030\uff93" +
                            "\032\uff93\034\uff93\036\uff93\040\uff93\042\uff93\043\uff93\044" +
                            "\uff93\045\uff93\046\uff93\047\uff93\050\uff93\051\uff93\054\uff93" +
                            "\055\uff93\056\uff93\001\002\000\004\023\251\001\002\000" +
                            "\012\003\242\020\243\060\222\062\223\001\002\000\006" +
                            "\020\245\030\244\001\002\000\006\020\uffdd\030\uffdd\001" +
                            "\002\000\006\020\uffdb\030\uffdb\001\002\000\004\023\uffdf" +
                            "\001\002\000\010\003\247\060\222\062\223\001\002\000" +
                            "\004\023\uffde\001\002\000\006\020\uffdc\030\uffdc\001\002" +
                            "\000\006\020\uffda\030\uffda\001\002\000\014\013\uffd0\015" +
                            "\uffd0\024\uffd0\060\uffd0\062\uffd0\001\002\000\060\003\065" +
                            "\004\260\006\272\007\252\010\276\012\264\013\044\017" +
                            "\120\021\101\023\251\024\uffce\057\121\060\267\061\062" +
                            "\062\017\064\051\065\105\066\050\067\115\070\064\071" +
                            "\117\072\116\073\067\001\002\000\006\060\222\062\223" +
                            "\001\002\000\004\024\365\001\002\000\024\017\uff8c\021" +
                            "\uff90\027\uff90\031\uffbb\033\uffbb\035\uffbb\037\uffbb\041\uffbb" +
                            "\052\uffbb\001\002\000\062\003\uffc8\004\uffc8\006\uffc8\007" +
                            "\uffc8\010\uffc8\012\uffc8\013\uffc8\016\uffc8\017\uffc8\021\uffc8" +
                            "\023\uffc8\024\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\064" +
                            "\uffc8\065\uffc8\066\uffc8\067\uffc8\070\uffc8\071\uffc8\072\uffc8" +
                            "\073\uffc8\001\002\000\012\017\uff8a\021\uff8e\027\uff8e\056" +
                            "\364\001\002\000\016\031\345\033\343\035\346\037\342" +
                            "\041\347\052\344\001\002\000\046\003\065\017\120\021" +
                            "\101\032\061\034\054\053\056\057\121\060\072\061\062" +
                            "\062\057\064\051\065\105\066\050\067\115\070\064\071" +
                            "\117\072\116\073\067\001\002\000\062\003\uffcc\004\uffcc" +
                            "\006\uffcc\007\uffcc\010\uffcc\012\uffcc\013\uffcc\016\uffcc\017" +
                            "\uffcc\021\uffcc\023\uffcc\024\uffcc\057\uffcc\060\uffcc\061\uffcc" +
                            "\062\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc\070\uffcc\071" +
                            "\uffcc\072\uffcc\073\uffcc\001\002\000\062\003\uffcb\004\uffcb" +
                            "\006\uffcb\007\uffcb\010\uffcb\012\uffcb\013\uffcb\016\uffcb\017" +
                            "\uffcb\021\uffcb\023\uffcb\024\uffcb\057\uffcb\060\uffcb\061\uffcb" +
                            "\062\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb\070\uffcb\071" +
                            "\uffcb\072\uffcb\073\uffcb\001\002\000\024\017\uff85\021\uff85" +
                            "\027\uff85\031\uffbc\033\uffbc\035\uffbc\037\uffbc\041\uffbc\052" +
                            "\uffbc\001\002\000\050\003\065\017\120\021\101\032\061" +
                            "\034\054\053\056\056\332\057\121\060\072\061\062\062" +
                            "\057\064\051\065\105\066\050\067\115\070\064\071\117" +
                            "\072\116\073\067\001\002\000\062\003\uffc3\004\uffc3\006" +
                            "\uffc3\007\uffc3\010\uffc3\012\uffc3\013\uffc3\016\uffc3\017\uffc3" +
                            "\021\uffc3\023\uffc3\024\uffc3\057\uffc3\060\uffc3\061\uffc3\062" +
                            "\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3\070\uffc3\071\uffc3" +
                            "\072\uffc3\073\uffc3\001\002\000\006\021\212\027\211\001" +
                            "\002\000\016\003\uff63\017\200\021\uff78\027\uff78\044\227" +
                            "\057\uff63\001\002\000\062\003\uffc9\004\uffc9\006\uffc9\007" +
                            "\uffc9\010\uffc9\012\uffc9\013\uffc9\016\uffc9\017\uffc9\021\uffc9" +
                            "\023\uffc9\024\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9\064" +
                            "\uffc9\065\uffc9\066\uffc9\067\uffc9\070\uffc9\071\uffc9\072\uffc9" +
                            "\073\uffc9\001\002\000\062\003\uffca\004\uffca\006\uffca\007" +
                            "\uffca\010\uffca\012\uffca\013\uffca\016\uffca\017\uffca\021\uffca" +
                            "\023\uffca\024\uffca\057\uffca\060\uffca\061\uffca\062\uffca\064" +
                            "\uffca\065\uffca\066\uffca\067\uffca\070\uffca\071\uffca\072\uffca" +
                            "\073\uffca\001\002\000\046\003\065\017\120\021\101\032" +
                            "\061\034\054\053\056\057\121\060\072\061\062\062\057" +
                            "\064\051\065\105\066\050\067\115\070\064\071\117\072" +
                            "\116\073\067\001\002\000\062\003\uffcd\004\uffcd\006\uffcd" +
                            "\007\uffcd\010\uffcd\012\uffcd\013\uffcd\016\uffcd\017\uffcd\021" +
                            "\uffcd\023\uffcd\024\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd" +
                            "\064\uffcd\065\uffcd\066\uffcd\067\uffcd\070\uffcd\071\uffcd\072" +
                            "\uffcd\073\uffcd\001\002\000\062\003\uffc6\004\uffc6\006\uffc6" +
                            "\007\uffc6\010\uffc6\012\uffc6\013\uffc6\016\uffc6\017\uffc6\021" +
                            "\uffc6\023\uffc6\024\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6" +
                            "\064\uffc6\065\uffc6\066\uffc6\067\uffc6\070\uffc6\071\uffc6\072" +
                            "\uffc6\073\uffc6\001\002\000\006\052\047\056\310\001\002" +
                            "\000\046\003\065\017\120\021\101\032\061\034\054\053" +
                            "\056\057\121\060\072\061\062\062\057\064\051\065\105" +
                            "\066\050\067\115\070\064\071\117\072\116\073\067\001" +
                            "\002\000\024\017\uff8b\021\uff8f\027\uff8f\031\uffba\033\uffba" +
                            "\035\uffba\037\uffba\041\uffba\052\uffba\001\002\000\012\017" +
                            "\uff82\021\uff82\027\uff82\057\305\001\002\000\060\003\065" +
                            "\004\260\006\272\007\252\010\276\012\264\013\044\017" +
                            "\120\021\101\023\251\024\uffce\057\121\060\267\061\062" +
                            "\062\017\064\051\065\105\066\050\067\115\070\064\071" +
                            "\117\072\116\073\067\001\002\000\062\003\uffc7\004\uffc7" +
                            "\006\uffc7\007\uffc7\010\uffc7\012\uffc7\013\uffc7\016\uffc7\017" +
                            "\uffc7\021\uffc7\023\uffc7\024\uffc7\057\uffc7\060\uffc7\061\uffc7" +
                            "\062\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7\070\uffc7\071" +
                            "\uffc7\072\uffc7\073\uffc7\001\002\000\062\003\uffc5\004\uffc5" +
                            "\006\uffc5\007\uffc5\010\uffc5\012\uffc5\013\uffc5\016\uffc5\017" +
                            "\uffc5\021\uffc5\023\uffc5\024\uffc5\057\uffc5\060\uffc5\061\uffc5" +
                            "\062\uffc5\064\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\071" +
                            "\uffc5\072\uffc5\073\uffc5\001\002\000\004\024\uffcf\001\002" +
                            "\000\010\024\uffe8\030\uffe8\056\uffe8\001\002\000\004\023" +
                            "\251\001\002\000\062\003\uffad\004\uffad\006\uffad\007\uffad" +
                            "\010\uffad\012\uffad\013\uffad\016\uffad\017\uffad\021\uffad\023" +
                            "\uffad\024\uffad\057\uffad\060\uffad\061\uffad\062\uffad\064\uffad" +
                            "\065\uffad\066\uffad\067\uffad\070\uffad\071\uffad\072\uffad\073" +
                            "\uffad\001\002\000\070\002\uffed\003\uffed\004\uffed\006\uffed" +
                            "\007\uffed\010\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016" +
                            "\uffed\017\uffed\021\uffed\023\uffed\024\uffed\057\uffed\060\uffed" +
                            "\061\uffed\062\uffed\064\uffed\065\uffed\066\uffed\067\uffed\070" +
                            "\uffed\071\uffed\072\uffed\073\uffed\001\002\000\004\023\312" +
                            "\001\002\000\022\016\315\064\051\065\105\066\050\070" +
                            "\064\071\117\072\116\073\067\001\002\000\004\025\327" +
                            "\001\002\000\024\016\322\024\320\064\051\065\105\066" +
                            "\050\070\064\071\117\072\116\073\067\001\002\000\004" +
                            "\025\316\001\002\000\056\003\065\004\260\006\272\007" +
                            "\252\010\276\012\264\013\044\017\120\021\101\023\251" +
                            "\057\121\060\267\061\062\062\017\064\051\065\105\066" +
                            "\050\067\115\070\064\071\117\072\116\073\067\001\002" +
                            "\000\024\016\uffb0\024\uffb0\064\uffb0\065\uffb0\066\uffb0\070" +
                            "\uffb0\071\uffb0\072\uffb0\073\uffb0\001\002\000\062\003\uffb2" +
                            "\004\uffb2\006\uffb2\007\uffb2\010\uffb2\012\uffb2\013\uffb2\016" +
                            "\uffb2\017\uffb2\021\uffb2\023\uffb2\024\uffb2\057\uffb2\060\uffb2" +
                            "\061\uffb2\062\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2\070" +
                            "\uffb2\071\uffb2\072\uffb2\073\uffb2\001\002\000\004\025\325" +
                            "\001\002\000\004\025\323\001\002\000\056\003\065\004" +
                            "\260\006\272\007\252\010\276\012\264\013\044\017\120" +
                            "\021\101\023\251\057\121\060\267\061\062\062\017\064" +
                            "\051\065\105\066\050\067\115\070\064\071\117\072\116" +
                            "\073\067\001\002\000\024\016\uffae\024\uffae\064\uffae\065" +
                            "\uffae\066\uffae\070\uffae\071\uffae\072\uffae\073\uffae\001\002" +
                            "\000\056\003\065\004\260\006\272\007\252\010\276\012" +
                            "\264\013\044\017\120\021\101\023\251\057\121\060\267" +
                            "\061\062\062\017\064\051\065\105\066\050\067\115\070" +
                            "\064\071\117\072\116\073\067\001\002\000\024\016\uffaf" +
                            "\024\uffaf\064\uffaf\065\uffaf\066\uffaf\070\uffaf\071\uffaf\072" +
                            "\uffaf\073\uffaf\001\002\000\056\003\065\004\260\006\272" +
                            "\007\252\010\276\012\264\013\044\017\120\021\101\023" +
                            "\251\057\121\060\267\061\062\062\017\064\051\065\105" +
                            "\066\050\067\115\070\064\071\117\072\116\073\067\001" +
                            "\002\000\024\016\uffb1\024\uffb1\064\uffb1\065\uffb1\066\uffb1" +
                            "\070\uffb1\071\uffb1\072\uffb1\073\uffb1\001\002\000\004\056" +
                            "\333\001\002\000\062\003\uffb8\004\uffb8\006\uffb8\007\uffb8" +
                            "\010\uffb8\012\uffb8\013\uffb8\016\uffb8\017\uffb8\021\uffb8\023" +
                            "\uffb8\024\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\064\uffb8" +
                            "\065\uffb8\066\uffb8\067\uffb8\070\uffb8\071\uffb8\072\uffb8\073" +
                            "\uffb8\001\002\000\062\003\uffb7\004\uffb7\006\uffb7\007\uffb7" +
                            "\010\uffb7\012\uffb7\013\uffb7\016\uffb7\017\uffb7\021\uffb7\023" +
                            "\uffb7\024\uffb7\057\uffb7\060\uffb7\061\uffb7\062\uffb7\064\uffb7" +
                            "\065\uffb7\066\uffb7\067\uffb7\070\uffb7\071\uffb7\072\uffb7\073" +
                            "\uffb7\001\002\000\004\023\251\001\002\000\064\003\uffb3" +
                            "\004\uffb3\005\336\006\uffb3\007\uffb3\010\uffb3\012\uffb3\013" +
                            "\uffb3\016\uffb3\017\uffb3\021\uffb3\023\uffb3\024\uffb3\057\uffb3" +
                            "\060\uffb3\061\uffb3\062\uffb3\064\uffb3\065\uffb3\066\uffb3\067" +
                            "\uffb3\070\uffb3\071\uffb3\072\uffb3\073\uffb3\001\002\000\006" +
                            "\004\260\023\251\001\002\000\062\003\uffb6\004\uffb6\006" +
                            "\uffb6\007\uffb6\010\uffb6\012\uffb6\013\uffb6\016\uffb6\017\uffb6" +
                            "\021\uffb6\023\uffb6\024\uffb6\057\uffb6\060\uffb6\061\uffb6\062" +
                            "\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6\070\uffb6\071\uffb6" +
                            "\072\uffb6\073\uffb6\001\002\000\062\003\uffb4\004\uffb4\006" +
                            "\uffb4\007\uffb4\010\uffb4\012\uffb4\013\uffb4\016\uffb4\017\uffb4" +
                            "\021\uffb4\023\uffb4\024\uffb4\057\uffb4\060\uffb4\061\uffb4\062" +
                            "\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\070\uffb4\071\uffb4" +
                            "\072\uffb4\073\uffb4\001\002\000\062\003\uffb5\004\uffb5\006" +
                            "\uffb5\007\uffb5\010\uffb5\012\uffb5\013\uffb5\016\uffb5\017\uffb5" +
                            "\021\uffb5\023\uffb5\024\uffb5\057\uffb5\060\uffb5\061\uffb5\062" +
                            "\uffb5\064\uffb5\065\uffb5\066\uffb5\067\uffb5\070\uffb5\071\uffb5" +
                            "\072\uffb5\073\uffb5\001\002\000\046\003\065\017\120\021" +
                            "\101\032\061\034\054\053\056\057\121\060\072\061\062" +
                            "\062\057\064\051\065\105\066\050\067\115\070\064\071" +
                            "\117\072\116\073\067\001\002\000\046\003\065\017\120" +
                            "\021\101\032\061\034\054\053\056\057\121\060\072\061" +
                            "\062\062\057\064\051\065\105\066\050\067\115\070\064" +
                            "\071\117\072\116\073\067\001\002\000\046\003\065\017" +
                            "\120\021\101\032\061\034\054\053\056\057\121\060\072" +
                            "\061\062\062\057\064\051\065\105\066\050\067\115\070" +
                            "\064\071\117\072\116\073\067\001\002\000\046\003\065" +
                            "\017\120\021\101\032\061\034\054\053\056\057\121\060" +
                            "\072\061\062\062\057\064\051\065\105\066\050\067\115" +
                            "\070\064\071\117\072\116\073\067\001\002\000\046\003" +
                            "\065\017\120\021\101\032\061\034\054\053\056\057\121" +
                            "\060\072\061\062\062\057\064\051\065\105\066\050\067" +
                            "\115\070\064\071\117\072\116\073\067\001\002\000\046" +
                            "\003\065\017\120\021\101\032\061\034\054\053\056\057" +
                            "\121\060\072\061\062\062\057\064\051\065\105\066\050" +
                            "\067\115\070\064\071\117\072\116\073\067\001\002\000" +
                            "\004\056\351\001\002\000\062\003\uffbd\004\uffbd\006\uffbd" +
                            "\007\uffbd\010\uffbd\012\uffbd\013\uffbd\016\uffbd\017\uffbd\021" +
                            "\uffbd\023\uffbd\024\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd" +
                            "\064\uffbd\065\uffbd\066\uffbd\067\uffbd\070\uffbd\071\uffbd\072" +
                            "\uffbd\073\uffbd\001\002\000\004\056\353\001\002\000\062" +
                            "\003\uffbf\004\uffbf\006\uffbf\007\uffbf\010\uffbf\012\uffbf\013" +
                            "\uffbf\016\uffbf\017\uffbf\021\uffbf\023\uffbf\024\uffbf\057\uffbf" +
                            "\060\uffbf\061\uffbf\062\uffbf\064\uffbf\065\uffbf\066\uffbf\067" +
                            "\uffbf\070\uffbf\071\uffbf\072\uffbf\073\uffbf\001\002\000\004" +
                            "\056\355\001\002\000\062\003\uffc1\004\uffc1\006\uffc1\007" +
                            "\uffc1\010\uffc1\012\uffc1\013\uffc1\016\uffc1\017\uffc1\021\uffc1" +
                            "\023\uffc1\024\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\064" +
                            "\uffc1\065\uffc1\066\uffc1\067\uffc1\070\uffc1\071\uffc1\072\uffc1" +
                            "\073\uffc1\001\002\000\004\056\357\001\002\000\062\003" +
                            "\uffc2\004\uffc2\006\uffc2\007\uffc2\010\uffc2\012\uffc2\013\uffc2" +
                            "\016\uffc2\017\uffc2\021\uffc2\023\uffc2\024\uffc2\057\uffc2\060" +
                            "\uffc2\061\uffc2\062\uffc2\064\uffc2\065\uffc2\066\uffc2\067\uffc2" +
                            "\070\uffc2\071\uffc2\072\uffc2\073\uffc2\001\002\000\004\056" +
                            "\361\001\002\000\062\003\uffc0\004\uffc0\006\uffc0\007\uffc0" +
                            "\010\uffc0\012\uffc0\013\uffc0\016\uffc0\017\uffc0\021\uffc0\023" +
                            "\uffc0\024\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0\064\uffc0" +
                            "\065\uffc0\066\uffc0\067\uffc0\070\uffc0\071\uffc0\072\uffc0\073" +
                            "\uffc0\001\002\000\004\056\363\001\002\000\062\003\uffbe" +
                            "\004\uffbe\006\uffbe\007\uffbe\010\uffbe\012\uffbe\013\uffbe\016" +
                            "\uffbe\017\uffbe\021\uffbe\023\uffbe\024\uffbe\057\uffbe\060\uffbe" +
                            "\061\uffbe\062\uffbe\064\uffbe\065\uffbe\066\uffbe\067\uffbe\070" +
                            "\uffbe\071\uffbe\072\uffbe\073\uffbe\001\002\000\062\003\uffb9" +
                            "\004\uffb9\006\uffb9\007\uffb9\010\uffb9\012\uffb9\013\uffb9\016" +
                            "\uffb9\017\uffb9\021\uffb9\023\uffb9\024\uffb9\057\uffb9\060\uffb9" +
                            "\061\uffb9\062\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070" +
                            "\uffb9\071\uffb9\072\uffb9\073\uffb9\001\002\000\072\002\uffc4" +
                            "\003\uffc4\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\012" +
                            "\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\021\uffc4" +
                            "\023\uffc4\024\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4\064" +
                            "\uffc4\065\uffc4\066\uffc4\067\uffc4\070\uffc4\071\uffc4\072\uffc4" +
                            "\073\uffc4\001\002\000\004\011\367\001\002\000\046\003" +
                            "\065\017\120\021\101\032\061\034\054\053\056\057\121" +
                            "\060\072\061\062\062\057\064\051\065\105\066\050\067" +
                            "\115\070\064\071\117\072\116\073\067\001\002\000\004" +
                            "\023\251\001\002\000\062\003\uffac\004\uffac\006\uffac\007" +
                            "\uffac\010\uffac\012\uffac\013\uffac\016\uffac\017\uffac\021\uffac" +
                            "\023\uffac\024\uffac\057\uffac\060\uffac\061\uffac\062\uffac\064" +
                            "\uffac\065\uffac\066\uffac\067\uffac\070\uffac\071\uffac\072\uffac" +
                            "\073\uffac\001\002\000\014\002\uffd6\013\uffd6\014\uffd6\060" +
                            "\uffd6\062\uffd6\001\002\000\064\003\uffee\004\uffee\006\uffee" +
                            "\007\uffee\010\uffee\012\uffee\013\uffee\015\uffee\016\uffee\017" +
                            "\uffee\021\uffee\023\uffee\024\uffee\057\uffee\060\uffee\061\uffee" +
                            "\062\uffee\064\uffee\065\uffee\066\uffee\067\uffee\070\uffee\071" +
                            "\uffee\072\uffee\073\uffee\001\002\000\004\024\uffd5\001\002" +
                            "\000\014\002\uffd7\013\uffd7\014\uffd7\060\uffd7\062\uffd7\001" +
                            "\002\000\014\002\uffd8\013\uffd8\014\uffd8\060\uffd8\062\uffd8" +
                            "\001\002\000\006\003\u0103\060\u0102\001\002\000\006\003" +
                            "\u0103\060\u0102\001\002\000\004\056\uffe6\001\002\000\006" +
                            "\052\uffe2\056\uffe2\001\002\000\006\052\uffe1\056\uffe1\001" +
                            "\002\000\004\052\u0105\001\002\000\050\003\065\017\120" +
                            "\021\101\023\107\032\061\034\054\053\056\057\121\060" +
                            "\072\061\062\062\057\064\051\065\105\066\050\067\115" +
                            "\070\064\071\117\072\116\073\067\001\002\000\004\056" +
                            "\uffe7\001\002\000\006\040\ufff8\056\ufff8\001\002\000\006" +
                            "\040\ufffa\056\ufffa\001\002\000\004\056\u0110\001\002\000" +
                            "\006\040\u010d\056\u010e\001\002\000\006\040\ufff9\056\ufff9" +
                            "\001\002\000\006\040\ufff7\056\ufff7\001\002\000\010\057" +
                            "\u010b\060\u0107\062\u010c\001\002\000\016\002\ufffd\013\ufffd" +
                            "\014\ufffd\060\ufffd\062\ufffd\063\ufffd\001\002\000\006\040" +
                            "\ufffb\056\ufffb\001\002\000\016\002\ufffc\013\ufffc\014\ufffc" +
                            "\060\ufffc\062\ufffc\063\ufffc\001\002\000\070\002\uffec\003" +
                            "\uffec\004\uffec\006\uffec\007\uffec\010\uffec\012\uffec\013\uffec" +
                            "\014\uffec\015\uffec\016\uffec\017\uffec\021\uffec\023\uffec\024" +
                            "\uffec\057\uffec\060\uffec\061\uffec\062\uffec\064\uffec\065\uffec" +
                            "\066\uffec\067\uffec\070\uffec\071\uffec\072\uffec\073\uffec\001" +
                            "\002\000\006\060\222\062\223\001\002\000\004\046\u0114" +
                            "\001\002\000\012\003\uff64\017\200\057\uff64\060\uff64\001" +
                            "\002\000\004\023\251\001\002\000\020\002\uffe0\013\uffe0" +
                            "\014\uffe0\015\uffe0\024\uffe0\060\uffe0\062\uffe0\001\002\000" +
                            "\004\002\ufff6\001\002\000\014\002\ufff0\013\ufff0\014\ufff0" +
                            "\060\ufff0\062\ufff0\001\002\000\016\011\uffea\017\uffea\020" +
                            "\uffea\030\uffea\052\uffea\056\uffea\001\002\000\016\011\uffeb" +
                            "\017\uffeb\020\uffeb\030\uffeb\052\uffeb\056\uffeb\001\002\000" +
                            "\004\002\000\001\002"});

    /** Access to parse-action table. */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table. */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[]{
                    "\000\u0119\000\006\002\003\003\004\001\001\000\002\001" +
                            "\001\000\032\004\006\007\013\010\010\011\012\012\015" +
                            "\014\021\015\007\017\014\021\017\024\011\100\020\101" +
                            "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\030\007\u0116\010\010\011\012\012\015\014" +
                            "\021\015\007\017\014\021\017\024\011\100\020\101\005" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\004\022\u0114\001\001\000\002\001\001\000\004" +
                            "\102\217\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\004\102\207\001\001\000\006\005\u0109" +
                            "\006\u0107\001\001\000\006\100\377\101\376\001\001\000" +
                            "\002\001\001\000\004\025\375\001\001\000\004\025\374" +
                            "\001\001\000\004\025\032\001\001\000\030\011\036\013" +
                            "\035\014\021\016\037\017\014\021\041\026\040\027\033" +
                            "\030\034\100\020\101\005\001\001\000\002\001\001\000" +
                            "\030\011\036\013\035\014\021\016\037\017\014\021\041" +
                            "\026\373\027\033\030\034\100\020\101\005\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
                            "\235\001\001\000\012\014\045\017\044\100\020\101\005" +
                            "\001\001\000\002\001\001\000\002\001\001\000\060\047" +
                            "\113\050\105\051\103\052\101\053\077\054\076\055\074" +
                            "\056\072\057\070\060\067\061\075\062\065\063\073\064" +
                            "\111\065\054\066\107\067\057\070\062\071\110\072\052" +
                            "\073\102\075\051\100\112\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
                            "\057\234\060\067\061\075\062\065\063\073\065\054\066" +
                            "\107\067\057\070\062\071\110\072\052\073\102\100\112" +
                            "\001\001\000\002\001\001\000\034\057\233\060\067\061" +
                            "\075\062\065\063\073\065\054\066\107\067\057\070\062" +
                            "\071\110\072\052\073\102\100\112\001\001\000\004\102" +
                            "\217\001\001\000\002\001\001\000\034\057\215\060\067" +
                            "\061\075\062\065\063\073\065\054\066\107\067\057\070" +
                            "\062\071\110\072\052\073\102\100\112\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\004\102\207\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\004\102\200" +
                            "\001\001\000\002\001\001\000\002\001\001\000\056\047" +
                            "\173\050\105\051\103\052\101\053\077\054\076\055\074" +
                            "\056\072\057\070\060\067\061\075\062\065\063\073\065" +
                            "\054\066\107\067\057\070\062\071\110\072\052\073\102" +
                            "\074\172\100\112\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\020\014\165\016\164\017\044\076\163\077\161\100" +
                            "\020\101\005\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
                            "\050\121\051\103\052\101\053\077\054\076\055\074\056" +
                            "\072\057\070\060\067\061\075\062\065\063\073\065\054" +
                            "\066\107\067\057\070\062\071\110\072\052\073\102\100" +
                            "\112\001\001\000\002\001\001\000\002\001\001\000\050" +
                            "\051\124\052\101\053\077\054\076\055\074\056\072\057" +
                            "\070\060\067\061\075\062\065\063\073\065\054\066\107" +
                            "\067\057\070\062\071\110\072\052\073\102\100\112\001" +
                            "\001\000\002\001\001\000\002\001\001\000\046\052\126" +
                            "\053\077\054\076\055\074\056\072\057\070\060\067\061" +
                            "\075\062\065\063\073\065\054\066\107\067\057\070\062" +
                            "\071\110\072\052\073\102\100\112\001\001\000\002\001" +
                            "\001\000\044\053\130\054\076\055\074\056\072\057\070" +
                            "\060\067\061\075\062\065\063\073\065\054\066\107\067" +
                            "\057\070\062\071\110\072\052\073\102\100\112\001\001" +
                            "\000\002\001\001\000\042\054\160\055\074\056\072\057" +
                            "\070\060\067\061\075\062\065\063\073\065\054\066\107" +
                            "\067\057\070\062\071\110\072\052\073\102\100\112\001" +
                            "\001\000\042\054\157\055\074\056\072\057\070\060\067" +
                            "\061\075\062\065\063\073\065\054\066\107\067\057\070" +
                            "\062\071\110\072\052\073\102\100\112\001\001\000\042" +
                            "\054\134\055\074\056\072\057\070\060\067\061\075\062" +
                            "\065\063\073\065\054\066\107\067\057\070\062\071\110" +
                            "\072\052\073\102\100\112\001\001\000\002\001\001\000" +
                            "\040\055\156\056\072\057\070\060\067\061\075\062\065" +
                            "\063\073\065\054\066\107\067\057\070\062\071\110\072" +
                            "\052\073\102\100\112\001\001\000\040\055\155\056\072" +
                            "\057\070\060\067\061\075\062\065\063\073\065\054\066" +
                            "\107\067\057\070\062\071\110\072\052\073\102\100\112" +
                            "\001\001\000\040\055\154\056\072\057\070\060\067\061" +
                            "\075\062\065\063\073\065\054\066\107\067\057\070\062" +
                            "\071\110\072\052\073\102\100\112\001\001\000\040\055" +
                            "\141\056\072\057\070\060\067\061\075\062\065\063\073" +
                            "\065\054\066\107\067\057\070\062\071\110\072\052\073" +
                            "\102\100\112\001\001\000\002\001\001\000\036\056\153" +
                            "\057\070\060\067\061\075\062\065\063\073\065\054\066" +
                            "\107\067\057\070\062\071\110\072\052\073\102\100\112" +
                            "\001\001\000\036\056\144\057\070\060\067\061\075\062" +
                            "\065\063\073\065\054\066\107\067\057\070\062\071\110" +
                            "\072\052\073\102\100\112\001\001\000\002\001\001\000" +
                            "\034\057\152\060\067\061\075\062\065\063\073\065\054" +
                            "\066\107\067\057\070\062\071\110\072\052\073\102\100" +
                            "\112\001\001\000\034\057\151\060\067\061\075\062\065" +
                            "\063\073\065\054\066\107\067\057\070\062\071\110\072" +
                            "\052\073\102\100\112\001\001\000\034\057\150\060\067" +
                            "\061\075\062\065\063\073\065\054\066\107\067\057\070" +
                            "\062\071\110\072\052\073\102\100\112\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\020\014\165\016\164\017" +
                            "\044\076\170\077\161\100\020\101\005\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\054\047\176\050\105\051\103\052\101\053\077" +
                            "\054\076\055\074\056\072\057\070\060\067\061\075\062" +
                            "\065\063\073\065\054\066\107\067\057\070\062\071\110" +
                            "\072\052\073\102\100\112\001\001\000\002\001\001\000" +
                            "\002\001\001\000\056\047\202\050\105\051\103\052\101" +
                            "\053\077\054\076\055\074\056\072\057\070\060\067\061" +
                            "\075\062\065\063\073\065\054\066\107\067\057\070\062" +
                            "\071\110\072\052\073\102\100\112\103\201\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\054\047\206\050\105\051\103\052\101\053" +
                            "\077\054\076\055\074\056\072\057\070\060\067\061\075" +
                            "\062\065\063\073\065\054\066\107\067\057\070\062\071" +
                            "\110\072\052\073\102\100\112\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\054\047\212\050\105\051\103\052\101\053\077\054\076" +
                            "\055\074\056\072\057\070\060\067\061\075\062\065\063" +
                            "\073\065\054\066\107\067\057\070\062\071\110\072\052" +
                            "\073\102\100\112\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\004\101\220" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\004\101\224\001\001\000\002" +
                            "\001\001\000\002\001\001\000\004\101\227\001\001\000" +
                            "\002\001\001\000\002\001\001\000\004\102\232\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\004\033\247\001\001\000\010\017\240\023\237\101\005" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\006\017\245\101\005\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\076\011\036\013\264\014\021\016\037" +
                            "\017\274\031\252\032\300\033\302\034\272\035\260\036" +
                            "\256\037\261\040\270\041\267\043\254\045\301\046\273" +
                            "\060\265\061\075\062\065\063\073\065\253\066\276\067" +
                            "\255\070\262\071\110\072\052\073\102\100\277\101\005" +
                            "\001\001\000\006\017\365\101\005\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\054\047\333\050\105\051\103\052" +
                            "\101\053\077\054\076\055\074\056\072\057\070\060\067" +
                            "\061\075\062\065\063\073\065\054\066\107\067\057\070" +
                            "\062\071\110\072\052\073\102\100\112\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\054\047" +
                            "\330\050\105\051\103\052\101\053\077\054\076\055\074" +
                            "\056\072\057\070\060\067\061\075\062\065\063\073\065" +
                            "\054\066\107\067\057\070\062\071\110\072\052\073\102" +
                            "\100\112\001\001\000\002\001\001\000\002\001\001\000" +
                            "\004\102\207\001\001\000\002\001\001\000\002\001\001" +
                            "\000\054\047\310\050\105\051\103\052\101\053\077\054" +
                            "\076\055\074\056\072\057\070\060\067\061\075\062\065" +
                            "\063\073\065\054\066\107\067\057\070\062\071\110\072" +
                            "\052\073\102\100\112\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\054\047\305\050\105\051" +
                            "\103\052\101\053\077\054\076\055\074\056\072\057\070" +
                            "\060\067\061\075\062\065\063\073\065\054\066\107\067" +
                            "\057\070\062\071\110\072\052\073\102\100\112\001\001" +
                            "\000\002\001\001\000\002\001\001\000\076\011\036\013" +
                            "\264\014\021\016\037\017\274\031\303\032\300\033\302" +
                            "\034\272\035\260\036\256\037\261\040\270\041\267\043" +
                            "\254\045\301\046\273\060\265\061\075\062\065\063\073" +
                            "\065\253\066\276\067\255\070\262\071\110\072\052\073" +
                            "\102\100\277\101\005\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
                            "\306\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\006\044\313\072\312\001\001\000\002\001" +
                            "\001\000\004\072\320\001\001\000\002\001\001\000\074" +
                            "\011\036\013\264\014\021\016\037\017\274\032\316\033" +
                            "\302\034\272\035\260\036\256\037\261\040\270\041\267" +
                            "\043\254\045\301\046\273\060\265\061\075\062\065\063" +
                            "\073\065\253\066\276\067\255\070\262\071\110\072\052" +
                            "\073\102\100\277\101\005\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\074" +
                            "\011\036\013\264\014\021\016\037\017\274\032\323\033" +
                            "\302\034\272\035\260\036\256\037\261\040\270\041\267" +
                            "\043\254\045\301\046\273\060\265\061\075\062\065\063" +
                            "\073\065\253\066\276\067\255\070\262\071\110\072\052" +
                            "\073\102\100\277\101\005\001\001\000\002\001\001\000" +
                            "\074\011\036\013\264\014\021\016\037\017\274\032\325" +
                            "\033\302\034\272\035\260\036\256\037\261\040\270\041" +
                            "\267\043\254\045\301\046\273\060\265\061\075\062\065" +
                            "\063\073\065\253\066\276\067\255\070\262\071\110\072" +
                            "\052\073\102\100\277\101\005\001\001\000\002\001\001" +
                            "\000\074\011\036\013\264\014\021\016\037\017\274\032" +
                            "\327\033\302\034\272\035\260\036\256\037\261\040\270" +
                            "\041\267\043\254\045\301\046\273\060\265\061\075\062" +
                            "\065\063\073\065\253\066\276\067\255\070\262\071\110" +
                            "\072\052\073\102\100\277\101\005\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\004\033\334\001\001\000\004\042\336\001\001\000" +
                            "\006\033\340\041\337\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\054\047\361\050\105\051" +
                            "\103\052\101\053\077\054\076\055\074\056\072\057\070" +
                            "\060\067\061\075\062\065\063\073\065\054\066\107\067" +
                            "\057\070\062\071\110\072\052\073\102\100\112\001\001" +
                            "\000\054\047\357\050\105\051\103\052\101\053\077\054" +
                            "\076\055\074\056\072\057\070\060\067\061\075\062\065" +
                            "\063\073\065\054\066\107\067\057\070\062\071\110\072" +
                            "\052\073\102\100\112\001\001\000\054\047\355\050\105" +
                            "\051\103\052\101\053\077\054\076\055\074\056\072\057" +
                            "\070\060\067\061\075\062\065\063\073\065\054\066\107" +
                            "\067\057\070\062\071\110\072\052\073\102\100\112\001" +
                            "\001\000\054\047\353\050\105\051\103\052\101\053\077" +
                            "\054\076\055\074\056\072\057\070\060\067\061\075\062" +
                            "\065\063\073\065\054\066\107\067\057\070\062\071\110" +
                            "\072\052\073\102\100\112\001\001\000\054\047\351\050" +
                            "\105\051\103\052\101\053\077\054\076\055\074\056\072" +
                            "\057\070\060\067\061\075\062\065\063\073\065\054\066" +
                            "\107\067\057\070\062\071\110\072\052\073\102\100\112" +
                            "\001\001\000\054\047\347\050\105\051\103\052\101\053" +
                            "\077\054\076\055\074\056\072\057\070\060\067\061\075" +
                            "\062\065\063\073\065\054\066\107\067\057\070\062\071" +
                            "\110\072\052\073\102\100\112\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\054\047\367\050\105\051\103\052" +
                            "\101\053\077\054\076\055\074\056\072\057\070\060\067" +
                            "\061\075\062\065\063\073\065\054\066\107\067\057\070" +
                            "\062\071\110\072\052\073\102\100\112\001\001\000\004" +
                            "\033\370\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\004\020\u0103\001\001\000\004\020\u0100\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\060\047\113\050\105\051\103\052" +
                            "\101\053\077\054\076\055\074\056\072\057\070\060\067" +
                            "\061\075\062\065\063\073\064\u0105\065\054\066\107\067" +
                            "\057\070\062\071\110\072\052\073\102\075\051\100\112" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\004\006\u010e\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\004\101\u0112\001\001\000\002\001\001\000\004\102" +
                            "\232\001\001\000\004\033\u0115\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001"});

    /** Access to <code>reduce_goto</code> table. */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /** Instance of action encapsulation class. */
    protected CUP$SyntacticalAnalyser$actions action_obj;

    /** Action encapsulation object initializer. */
    protected void init_actions() {
        action_obj = new CUP$SyntacticalAnalyser$actions(this);
    }

    /** Invoke a user supplied parse action. */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$SyntacticalAnalyser$do_action(act_num, parser, stack, top);
    }

    /** Indicates start state. */
    public int start_state() {
        return 0;
    }

    /** Indicates start production. */
    public int start_production() {
        return 1;
    }

    /** <code>EOF</code> Symbol index. */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index. */
    public int error_sym() {
        return 1;
    }


    /** User initialization code. */
    public void user_init() throws java.lang.Exception {

    }

    /** Scan to get the next Symbol. */
    public java_cup.runtime.Symbol scan()
            throws java.lang.Exception {

        return analyser.next_token();

    }


    private LexicalAnalyser analyser = (LexicalAnalyser) getScanner();

    @Override
    public void syntax_error(Symbol token) {
        SyntacticalException e = new SyntacticalException((LexicalUnit) token);
        report_error(e.getMessage(), null);
    }

    @Override
    public void report_error(String message, Object info) {
        System.err.print(message);
        if (info instanceof Throwable) {
            System.err.print(" - " + ((Throwable) info).getMessage() + "\n");
        }
        System.err.flush();
    }

    @Override
    public void unrecovered_syntax_error(Symbol token) {
        SyntacticalException e = new SyntacticalException((LexicalUnit) token);
        report_fatal_error("Couldn't repair and continue parse", e);
    }

    @Override
    public void report_fatal_error(String message, Object info) {
        this.done_parsing();
        this.report_error(message, info);
        if (info instanceof SyntacticalException) {
            throw (SyntacticalException) info;
        } else {
            throw new IllegalStateException("Can't recover from previous error(s)");
        }
    }

}

/**
 * Cup generated class to encapsulate user supplied action code.
 */
class CUP$SyntacticalAnalyser$actions {


    private final SyntacticalAnalyser parser;

    /** Constructor */
    CUP$SyntacticalAnalyser$actions(SyntacticalAnalyser parser) {
        this.parser = parser;
    }

    /** Method 0 with the actual generated action code for actions 0 to 300. */
    public final java_cup.runtime.Symbol CUP$SyntacticalAnalyser$do_action_part00000000(
            int CUP$SyntacticalAnalyser$act_num,
            java_cup.runtime.lr_parser CUP$SyntacticalAnalyser$parser,
            java.util.Stack CUP$SyntacticalAnalyser$stack,
            int CUP$SyntacticalAnalyser$top)
            throws java.lang.Exception {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$SyntacticalAnalyser$result;

        /* select the action based on the action number */
        switch (CUP$SyntacticalAnalyser$act_num) {
            /*. . . . . . . . . . . . . . . . . . . .*/
            case 0: // Program ::= ImportList DeclarationList
            {
                ProgramNode RESULT = null;
                List<String> imports = (List<String>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                DeclarationNode declarations = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ProgramNode(declarations, imports);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Program", 0, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 1: // $START ::= Program EOF
            {
                Object RESULT = null;
                ProgramNode start_val = (ProgramNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = start_val;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("$START", 0, RESULT);
            }
            /* ACCEPT */
            CUP$SyntacticalAnalyser$parser.done_parsing();
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 2: // ImportList ::= ImportList Import
            {
                List<String> RESULT = null;
                List<String> imports = (List<String>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                String file = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                imports.add(file);
                RESULT = imports;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ImportList", 1, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 3: // ImportList ::=
            {
                List<String> RESULT = null;
                RESULT = new ArrayList<>();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ImportList", 1, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 4: // Import ::= IMPORT FilePath END
            {
                String RESULT = null;
                String path = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = path;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Import", 2, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 5: // Import ::= IMPORT error END
            {
                String RESULT = null;
                parser.report_error(" - Expected a path to a file\n", null);
                RESULT = "";
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Import", 2, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 6: // FilePath ::= FilePath DIV Filename
            {
                String RESULT = null;
                String path = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                String filename = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = path + "/" + filename;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FilePath", 3, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 7: // FilePath ::= Filename
            {
                String RESULT = null;
                String filename = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = filename;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FilePath", 3, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 8: // Filename ::= IDENTIFIER
            {
                String RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = name;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Filename", 4, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 9: // Filename ::= GLOBAL
            {
                String RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = name;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Filename", 4, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 10: // Filename ::= TYPE
            {
                String RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = name;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Filename", 4, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 11: // DeclarationList ::= Declaration DeclarationList
            {
                DeclarationNode RESULT = null;
                DeclarationNode declaration = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                DeclarationNode declarations = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration.linkedTo(declarations);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("DeclarationList", 5, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 12: // DeclarationList ::=
            {
                DeclarationNode RESULT = null;
                RESULT = null;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("DeclarationList", 5, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 13: // Declaration ::= GlobalVarConstDeclaration
            {
                DeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration", 6, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 14: // Declaration ::= FunctionDeclaration
            {
                DeclarationNode RESULT = null;
                FunctionDeclarationNode declaration = (FunctionDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration", 6, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 15: // Declaration ::= ClassDeclaration
            {
                DeclarationNode RESULT = null;
                ClassDeclarationNode declaration = (ClassDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration", 6, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 16: // GlobalVarConstDeclaration ::= VarDeclaration
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalVarConstDeclaration", 8, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 17: // GlobalVarConstDeclaration ::= GlobalConstDeclaration END
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalVarConstDeclaration", 8, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 18: // VarConstDeclaration ::= VarDeclaration
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarConstDeclaration", 9, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 19: // VarConstDeclaration ::= LocalConstDeclaration END
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarConstDeclaration", 9, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 20: // VarDeclaration ::= BaseVarDeclaration END
            {
                VarDeclarationNode RESULT = null;
                Name declaration = (Name) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new VarDeclarationNode(declaration);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclaration", 7, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 21: // VarDeclaration ::= VarInitDeclaration END
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclaration", 7, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 22: // BaseVarDeclaration ::= Type IDENTIFIER
            {
                Name RESULT = null;
                Type type = (Type) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new Name(id, type);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("BaseVarDeclaration", 13, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 23: // BaseVarDeclaration ::= Type error
            {
                Name RESULT = null;
                Type type = (Type) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                parser.report_error(" - Expected an identifier\n", null);
                RESULT = new Name(null, type);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("BaseVarDeclaration", 13, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 24: // VarInitDeclaration ::= BaseVarDeclaration ASSIGNMENT InitialValueExpression
            {
                VarDeclarationNode RESULT = null;
                Name name = (Name) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode initialValue = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new VarDeclarationNode(name, initialValue);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarInitDeclaration", 10, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 25: // VarInitDeclaration ::= ConstructorCallExpression IDENTIFIER
            {
                VarDeclarationNode RESULT = null;
                ConstructorCallExpressionNode constructor = (ConstructorCallExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = VarDeclarationNode.fromConstructor(constructor, id);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarInitDeclaration", 10, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 26: // GlobalConstDeclaration ::= CONST Type Global ASSIGNMENT InitialValueExpression
            {
                VarDeclarationNode RESULT = null;
                Type type = (Type) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode initialValue = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new VarDeclarationNode(new Name(id, type), initialValue, true);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalConstDeclaration", 11, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 27: // GlobalConstDeclaration ::= CONST ConstructorCallExpression Global
            {
                VarDeclarationNode RESULT = null;
                ConstructorCallExpressionNode constructor = (ConstructorCallExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = VarDeclarationNode.fromConstructor(constructor, id).constant();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalConstDeclaration", 11, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 28: // LocalConstDeclaration ::= CONST VarInitDeclaration
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration.constant();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("LocalConstDeclaration", 12, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 29: // InitialValueExpression ::= Expression
            {
                ExpressionNode RESULT = null;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("InitialValueExpression", 50, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 30: // InitialValueExpression ::= AnonymousObjectConstructorExpression
            {
                ExpressionNode RESULT = null;
                AnonymousObjectConstructorExpressionNode expression = (AnonymousObjectConstructorExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("InitialValueExpression", 50, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 31: // Global ::= GLOBAL
            {
                String RESULT = null;
                String global = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = global;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Global", 14, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 32: // Global ::= error
            {
                String RESULT = null;
                parser.report_error(" - Expected a global identifier\n", null);
                RESULT = null;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Global", 14, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 33: // FunctionDeclaration ::= BaseVarDeclaration FunctionParameters BlockStatement
            {
                FunctionDeclarationNode RESULT = null;
                Name name = (Name) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                List<Name> parameters = (List<Name>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                BlockStatementNode block = (BlockStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new FunctionDeclarationNode(name, parameters, block);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionDeclaration", 15, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 34: // FunctionParameters ::= PARENTH_L PARENTH_R
            {
                List<Name> RESULT = null;
                RESULT = new ArrayList<>();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionParameters", 16, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 35: // FunctionParameters ::= PARENTH_L ParameterList PARENTH_R
            {
                List<Name> RESULT = null;
                List<Name> parameters = (List<Name>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = parameters;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionParameters", 16, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 36: // ParameterList ::= BaseVarDeclaration
            {
                List<Name> RESULT = null;
                Name parameter = (Name) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ArrayList<>(Collections.singletonList(parameter));
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ParameterList", 17, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 37: // ParameterList ::= ParameterList COMMA BaseVarDeclaration
            {
                List<Name> RESULT = null;
                List<Name> parameters = (List<Name>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                Name parameter = (Name) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                parameters.add(parameter);
                RESULT = parameters;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ParameterList", 17, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 38: // ParameterList ::= error
            {
                List<Name> RESULT = null;
                parser.report_error(" - Expected a variable declaration\n", null);
                RESULT = new ArrayList<>(Collections.singletonList(new Name("", new Type(null))));
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ParameterList", 17, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 39: // ParameterList ::= ParameterList COMMA error
            {
                List<Name> RESULT = null;
                List<Name> parameters = (List<Name>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                parser.report_error(" - Expected a variable declaration\n", null);
                parameters.add(new Name("", new Type(null)));
                RESULT = parameters;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ParameterList", 17, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 40: // ClassDeclaration ::= CLASS TYPE ClassBlock
            {
                ClassDeclarationNode RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                DeclarationNode block = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ClassDeclarationNode(name, block);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration", 18, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 41: // ClassDeclaration ::= CLASS GLOBAL ClassBlock
            {
                ClassDeclarationNode RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                DeclarationNode block = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ClassDeclarationNode(name, block);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration", 18, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 42: // ClassDeclaration ::= CLASS error ClassBlock
            {
                ClassDeclarationNode RESULT = null;
                DeclarationNode block = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                parser.report_error(" - Expected a type name\n", null);
                RESULT = new ClassDeclarationNode("", block);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration", 18, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 43: // ClassBlock ::= CURLY_L ClassElementList CURLY_R
            {
                DeclarationNode RESULT = null;
                DeclarationNode contents = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = contents;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassBlock", 19, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 44: // ClassElementList ::= ClassElement ClassElementList
            {
                DeclarationNode RESULT = null;
                DeclarationNode element = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                DeclarationNode elements = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = element.linkedTo(elements);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElementList", 20, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 45: // ClassElementList ::=
            {
                DeclarationNode RESULT = null;
                RESULT = null;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElementList", 20, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 46: // ClassElement ::= VarConstDeclaration
            {
                DeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement", 21, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 47: // ClassElement ::= ConstructorDeclaration
            {
                DeclarationNode RESULT = null;
                ConstructorDeclarationNode declaration = (ConstructorDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement", 21, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 48: // ClassElement ::= FunctionDeclaration
            {
                DeclarationNode RESULT = null;
                FunctionDeclarationNode declaration = (FunctionDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement", 21, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 49: // ConstructorDeclaration ::= CONSTRUCTOR FunctionParameters BlockStatement
            {
                ConstructorDeclarationNode RESULT = null;
                List<Name> parameters = (List<Name>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                BlockStatementNode block = (BlockStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ConstructorDeclarationNode(parameters, block);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstructorDeclaration", 22, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 50: // StatementList ::= Statement StatementList
            {
                StatementNode RESULT = null;
                StatementNode statement = (StatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                StatementNode statements = (StatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = statement.linkedTo(statements);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("StatementList", 23, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 51: // StatementList ::=
            {
                StatementNode RESULT = null;
                RESULT = null;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("StatementList", 23, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 52: // Statement ::= VarDeclarationStatement
            {
                StatementNode RESULT = null;
                VarDeclarationStatementNode statement = (VarDeclarationStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = statement;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement", 24, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 53: // Statement ::= AssignmentStatement
            {
                StatementNode RESULT = null;
                AssignmentStatementNode statement = (AssignmentStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = statement;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement", 24, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 54: // Statement ::= FunctionCallStatement
            {
                StatementNode RESULT = null;
                FunctionCallStatementNode statement = (FunctionCallStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = statement;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement", 24, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 55: // Statement ::= ReturnStatement
            {
                StatementNode RESULT = null;
                ReturnStatementNode statement = (ReturnStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = statement;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement", 24, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 56: // Statement ::= IfElseStatement
            {
                StatementNode RESULT = null;
                IfElseStatementNode statement = (IfElseStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = statement;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement", 24, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 57: // Statement ::= SwitchStatement
            {
                StatementNode RESULT = null;
                SwitchStatementNode statement = (SwitchStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = statement;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement", 24, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 58: // Statement ::= WhileStatement
            {
                StatementNode RESULT = null;
                WhileStatementNode statement = (WhileStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = statement;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement", 24, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 59: // Statement ::= ForStatement
            {
                StatementNode RESULT = null;
                ForStatementNode statement = (ForStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = statement;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement", 24, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 60: // Statement ::= BlockStatement
            {
                StatementNode RESULT = null;
                BlockStatementNode statement = (BlockStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = statement;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement", 24, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 61: // BlockStatement ::= CURLY_L StatementList CURLY_R
            {
                BlockStatementNode RESULT = null;
                StatementNode root = (StatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new BlockStatementNode(root);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("BlockStatement", 25, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 62: // VarDeclarationStatement ::= VarConstDeclaration
            {
                VarDeclarationStatementNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration.asStatement();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclarationStatement", 26, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 63: // AssignmentStatement ::= Designator ASSIGNMENT Expression END
            {
                AssignmentStatementNode RESULT = null;
                Designator designator = (Designator) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new AssignmentStatementNode(designator, expression);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AssignmentStatement", 27, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 64: // AssignmentStatement ::= Designator PLUS_ASSIGN Expression END
            {
                AssignmentStatementNode RESULT = null;
                Designator designator = (Designator) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = AssignmentStatementNode.fromSyntacticSugar(
                        designator, OperatorOverloadConstants._PLUS, expression);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AssignmentStatement", 27, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 65: // AssignmentStatement ::= Designator MINUS_ASSIGN Expression END
            {
                AssignmentStatementNode RESULT = null;
                Designator designator = (Designator) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = AssignmentStatementNode.fromSyntacticSugar(
                        designator, OperatorOverloadConstants._MINUS, expression);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AssignmentStatement", 27, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 66: // AssignmentStatement ::= Designator MULT_ASSIGN Expression END
            {
                AssignmentStatementNode RESULT = null;
                Designator designator = (Designator) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = AssignmentStatementNode.fromSyntacticSugar(
                        designator, OperatorOverloadConstants._MULT, expression);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AssignmentStatement", 27, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 67: // AssignmentStatement ::= Designator DIV_ASSIGN Expression END
            {
                AssignmentStatementNode RESULT = null;
                Designator designator = (Designator) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = AssignmentStatementNode.fromSyntacticSugar(
                        designator, OperatorOverloadConstants._DIV, expression);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AssignmentStatement", 27, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 68: // AssignmentStatement ::= Designator MOD_ASSIGN Expression END
            {
                AssignmentStatementNode RESULT = null;
                Designator designator = (Designator) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = AssignmentStatementNode.fromSyntacticSugar(
                        designator, OperatorOverloadConstants._MOD, expression);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AssignmentStatement", 27, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 69: // Designator ::= VariableExpression
            {
                Designator RESULT = null;
                VariableExpressionNode expression = (VariableExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = Designator.ofVar(expression);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Designator", 28, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 70: // Designator ::= FieldAccessExpression
            {
                Designator RESULT = null;
                PointExpressionNode expression = (PointExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = Designator.ofField(expression);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Designator", 28, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 71: // Designator ::= ArrayAccessExpression
            {
                Designator RESULT = null;
                ArrayAccessExpressionNode expression = (ArrayAccessExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = Designator.ofArray(expression);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Designator", 28, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 72: // FunctionCallStatement ::= FunctionCallExpression END
            {
                FunctionCallStatementNode RESULT = null;
                FunctionCallExpressionNode function = (FunctionCallExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new FunctionCallStatementNode(function);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionCallStatement", 29, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 73: // ReturnStatement ::= RETURN END
            {
                ReturnStatementNode RESULT = null;
                RESULT = new ReturnStatementNode();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ReturnStatement", 30, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 74: // ReturnStatement ::= RETURN Expression END
            {
                ReturnStatementNode RESULT = null;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new ReturnStatementNode(expression);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ReturnStatement", 30, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 75: // IfElseStatement ::= IF Expression BlockStatement ElsePartStatement
            {
                IfElseStatementNode RESULT = null;
                ExpressionNode condition = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                BlockStatementNode ifBlock = (BlockStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                StatementNode elsePart = (StatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new IfElseStatementNode(condition, ifBlock, elsePart);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("IfElseStatement", 31, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 76: // ElsePartStatement ::= ELSE BlockStatement
            {
                StatementNode RESULT = null;
                BlockStatementNode elseBlock = (BlockStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = elseBlock;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ElsePartStatement", 32, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 77: // ElsePartStatement ::= ELSE IfElseStatement
            {
                StatementNode RESULT = null;
                IfElseStatementNode ifElse = (IfElseStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = ifElse;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ElsePartStatement", 32, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 78: // ElsePartStatement ::=
            {
                StatementNode RESULT = null;
                RESULT = null;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ElsePartStatement", 32, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 79: // SwitchStatement ::= SWITCH Expression CURLY_L SwitchCasesStatement CURLY_R
            {
                SwitchStatementNode RESULT = null;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                Map<ConstantExpressionNode, StatementNode> cases = (Map<ConstantExpressionNode, StatementNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new SwitchStatementNode(expression, cases);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("SwitchStatement", 33, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 80: // SwitchCasesStatement ::= ConstantExpression ARROW Statement
            {
                Map<ConstantExpressionNode, StatementNode> RESULT = null;
                ConstantExpressionNode expression = (ConstantExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                StatementNode statement = (StatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new HashMap<>(Collections.singletonMap(expression, statement));
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("SwitchCasesStatement", 34, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 81: // SwitchCasesStatement ::= UNDERSCORE ARROW Statement
            {
                Map<ConstantExpressionNode, StatementNode> RESULT = null;
                StatementNode statement = (StatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new HashMap<>(Collections.singletonMap(
                        ConstantExpressionNode.special("<default>", new Type("~Default")), statement));
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("SwitchCasesStatement", 34, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 82: // SwitchCasesStatement ::= SwitchCasesStatement ConstantExpression ARROW Statement
            {
                Map<ConstantExpressionNode, StatementNode> RESULT = null;
                Map<ConstantExpressionNode, StatementNode> cases = (Map<ConstantExpressionNode, StatementNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                ConstantExpressionNode expression = (ConstantExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                StatementNode statement = (StatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                cases.put(expression, statement);
                RESULT = cases;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("SwitchCasesStatement", 34, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 83: // SwitchCasesStatement ::= SwitchCasesStatement UNDERSCORE ARROW Statement
            {
                Map<ConstantExpressionNode, StatementNode> RESULT = null;
                Map<ConstantExpressionNode, StatementNode> cases = (Map<ConstantExpressionNode, StatementNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                StatementNode statement = (StatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                cases.put(ConstantExpressionNode.special("<default>", new Type("~Default")), statement);
                RESULT = cases;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("SwitchCasesStatement", 34, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 84: // WhileStatement ::= WHILE Expression BlockStatement
            {
                WhileStatementNode RESULT = null;
                ExpressionNode condition = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                BlockStatementNode whileBlock = (BlockStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new WhileStatementNode(condition, whileBlock);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("WhileStatement", 35, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 85: // ForStatement ::= FOR BaseVarDeclaration IN Expression BlockStatement
            {
                ForStatementNode RESULT = null;
                Name variable = (Name) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                ExpressionNode iterable = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                BlockStatementNode forBlock = (BlockStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ForStatementNode(variable, iterable, forBlock);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ForStatement", 36, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 86: // Expression ::= Expression0
            {
                ExpressionNode RESULT = null;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression", 37, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 87: // Expression0 ::= Expression0 ELLIPSIS Expression1
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(first, OperatorOverloadConstants._TO, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression0", 38, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 88: // Expression0 ::= Expression1
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = first;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression0", 38, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 89: // Expression1 ::= Expression1 OR Expression2
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(first, OperatorOverloadConstants._OR, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression1", 39, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 90: // Expression1 ::= Expression2
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = first;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression1", 39, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 91: // Expression2 ::= Expression2 AND Expression3
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(first, OperatorOverloadConstants._AND, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression2", 40, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 92: // Expression2 ::= Expression3
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = first;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression2", 40, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 93: // Expression3 ::= Expression3 EQUALS Expression4
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(first, OperatorOverloadConstants._EQUALS, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression3", 41, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 94: // Expression3 ::= Expression3 NEQ Expression4
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(first, OperatorOverloadConstants._NEQ, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression3", 41, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 95: // Expression3 ::= Expression3 IDENTITY Expression4
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(first, OperatorOverloadConstants._ID, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression3", 41, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 96: // Expression3 ::= Expression4
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = first;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression3", 41, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 97: // Expression4 ::= Expression4 GT Expression5
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(first, OperatorOverloadConstants._GT, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression4", 42, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 98: // Expression4 ::= Expression4 GE Expression5
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(first, OperatorOverloadConstants._GE, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression4", 42, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 99: // Expression4 ::= Expression4 LT Expression5
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(first, OperatorOverloadConstants._LT, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression4", 42, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 100: // Expression4 ::= Expression4 LE Expression5
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(first, OperatorOverloadConstants._LE, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression4", 42, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 101: // Expression4 ::= Expression5
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = first;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression4", 42, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 102: // Expression5 ::= Expression5 PLUS Expression6
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(first, OperatorOverloadConstants._PLUS, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression5", 43, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 103: // Expression5 ::= Expression5 MINUS Expression6
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(first, OperatorOverloadConstants._MINUS, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression5", 43, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 104: // Expression5 ::= Expression6
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = first;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression5", 43, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 105: // Expression6 ::= Expression6 MULT Expression7
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(first, OperatorOverloadConstants._MULT, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression6", 44, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 106: // Expression6 ::= Expression6 DIV Expression7
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(first, OperatorOverloadConstants._DIV, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression6", 44, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 107: // Expression6 ::= Expression6 MOD Expression7
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(first, OperatorOverloadConstants._MOD, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression6", 44, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 108: // Expression6 ::= Expression7
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = first;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression6", 44, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 109: // Expression7 ::= PLUS Expression7
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(OperatorOverloadConstants._PLUS, first);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression7", 45, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 110: // Expression7 ::= MINUS Expression7
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(OperatorOverloadConstants._MINUS, first);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression7", 45, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 111: // Expression7 ::= NOT Expression7
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(OperatorOverloadConstants._NOT, first);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression7", 45, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 112: // Expression7 ::= Expression8
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = first;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression7", 45, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 113: // Expression8 ::= FieldAccessExpression
            {
                ExpressionNode RESULT = null;
                PointExpressionNode expression = (PointExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression8", 46, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 114: // Expression8 ::= ArrayAccessExpression
            {
                ExpressionNode RESULT = null;
                ArrayAccessExpressionNode expression = (ArrayAccessExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression8", 46, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 115: // Expression8 ::= FunctionCallExpression
            {
                ExpressionNode RESULT = null;
                FunctionCallExpressionNode expression = (FunctionCallExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression8", 46, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 116: // Expression8 ::= Expression9
            {
                ExpressionNode RESULT = null;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression8", 46, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 117: // Expr8 ::= FieldAccessExpression
            {
                ExpressionNode RESULT = null;
                PointExpressionNode expression = (PointExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expr8", 47, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 118: // Expr8 ::= ArrayAccessExpression
            {
                ExpressionNode RESULT = null;
                ArrayAccessExpressionNode expression = (ArrayAccessExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expr8", 47, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 119: // Expr8 ::= FunctionCallExpression
            {
                ExpressionNode RESULT = null;
                FunctionCallExpressionNode expression = (FunctionCallExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expr8", 47, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 120: // Expr8 ::= Expr9
            {
                ExpressionNode RESULT = null;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expr8", 47, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 121: // Expression9 ::= Expr9
            {
                ExpressionNode RESULT = null;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression9", 48, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 122: // Expression9 ::= GlobalConstExpression
            {
                ExpressionNode RESULT = null;
                VariableExpressionNode expression = (VariableExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression9", 48, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 123: // Expr9 ::= PARENTH_L Expression0 PARENTH_R
            {
                ExpressionNode RESULT = null;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expr9", 49, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 124: // Expr9 ::= VariableExpression
            {
                ExpressionNode RESULT = null;
                VariableExpressionNode expression = (VariableExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expr9", 49, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 125: // Expr9 ::= ConstantExpression
            {
                ExpressionNode RESULT = null;
                ConstantExpressionNode expression = (ConstantExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expr9", 49, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 126: // Expr9 ::= ListConstructorExpression
            {
                ExpressionNode RESULT = null;
                ListConstructorExpressionNode expression = (ListConstructorExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expr9", 49, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 127: // Expr9 ::= ConstructorCallExpression
            {
                ExpressionNode RESULT = null;
                ConstructorCallExpressionNode expression = (ConstructorCallExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expr9", 49, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 128: // Expr9 ::= error
            {
                ExpressionNode RESULT = null;
                parser.report_error(" - Expected an expression\n", null);
                RESULT = new ErrorExpressionNode();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expr9", 49, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 129: // ArrayAccessExpression ::= Expression8 SQUARE_L Expression SQUARE_R
            {
                ArrayAccessExpressionNode RESULT = null;
                ExpressionNode array = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                ExpressionNode index = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new ArrayAccessExpressionNode(array, index);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ArrayAccessExpression", 52, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 130: // FieldAccessExpression ::= Expression8 POINT IDENTIFIER
            {
                PointExpressionNode RESULT = null;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                String identifier = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new PointExpressionNode(expression, identifier);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FieldAccessExpression", 51, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 131: // FunctionCallExpression ::= Expr8 Arguments
            {
                FunctionCallExpressionNode RESULT = null;
                ExpressionNode function = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                List<ExpressionNode> arguments = (List<ExpressionNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new FunctionCallExpressionNode(function, arguments);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionCallExpression", 53, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 132: // ConstructorCallExpression ::= TYPE Arguments
            {
                ConstructorCallExpressionNode RESULT = null;
                String type = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                List<ExpressionNode> arguments = (List<ExpressionNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ConstructorCallExpressionNode(new Type(type), arguments);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstructorCallExpression", 62, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 133: // ConstructorCallExpression ::= GLOBAL Arguments
            {
                ConstructorCallExpressionNode RESULT = null;
                String type = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                List<ExpressionNode> arguments = (List<ExpressionNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ConstructorCallExpressionNode(new Type(type), arguments);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstructorCallExpression", 62, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 134: // ConstructorCallExpression ::= TYPE LT Type GT Arguments
            {
                ConstructorCallExpressionNode RESULT = null;
                String type = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 4)).value;
                Type qualified = (Type) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                List<ExpressionNode> arguments = (List<ExpressionNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ConstructorCallExpressionNode(new Type(type, qualified), arguments);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstructorCallExpression", 62, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 135: // VariableExpression ::= IDENTIFIER
            {
                VariableExpressionNode RESULT = null;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new VariableExpressionNode(id);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VariableExpression", 54, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 136: // VariableExpression ::= THIS
            {
                VariableExpressionNode RESULT = null;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new VariableExpressionNode(id);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VariableExpression", 54, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 137: // GlobalConstExpression ::= GLOBAL
            {
                VariableExpressionNode RESULT = null;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new VariableExpressionNode(id);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalConstExpression", 55, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 138: // ConstantExpression ::= INT
            {
                ConstantExpressionNode RESULT = null;
                String n = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = ConstantExpressionNode.fromInt(n);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression", 56, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 139: // ConstantExpression ::= REAL
            {
                ConstantExpressionNode RESULT = null;
                String x = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = ConstantExpressionNode.fromFloat(x);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression", 56, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 140: // ConstantExpression ::= TRUE
            {
                ConstantExpressionNode RESULT = null;
                String t = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = ConstantExpressionNode.fromBoolean(t);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression", 56, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 141: // ConstantExpression ::= FALSE
            {
                ConstantExpressionNode RESULT = null;
                String f = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = ConstantExpressionNode.fromBoolean(f);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression", 56, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 142: // ConstantExpression ::= CHAR
            {
                ConstantExpressionNode RESULT = null;
                String c = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = ConstantExpressionNode.fromChar(c);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression", 56, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 143: // ConstantExpression ::= NOTHING
            {
                ConstantExpressionNode RESULT = null;
                RESULT = ConstantExpressionNode.ofNothing();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression", 56, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 144: // ConstantExpression ::= NULL
            {
                ConstantExpressionNode RESULT = null;
                RESULT = ConstantExpressionNode.ofNull();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression", 56, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 145: // ListConstructorExpression ::= STRING
            {
                ListConstructorExpressionNode RESULT = null;
                String str = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = ListConstructorExpressionNode.fromString(str);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListConstructorExpression", 57, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 146: // ListConstructorExpression ::= SQUARE_L SQUARE_R
            {
                ListConstructorExpressionNode RESULT = null;
                RESULT = new ListConstructorExpressionNode();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListConstructorExpression", 57, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 147: // ListConstructorExpression ::= SQUARE_L ListElements SQUARE_R
            {
                ListConstructorExpressionNode RESULT = null;
                List<ExpressionNode> elements = (List<ExpressionNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new ListConstructorExpressionNode(elements);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListConstructorExpression", 57, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 148: // ListElements ::= Expression
            {
                List<ExpressionNode> RESULT = null;
                ExpressionNode element = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ArrayList<>(Collections.singletonList(element));
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListElements", 58, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 149: // ListElements ::= ListElements COMMA Expression
            {
                List<ExpressionNode> RESULT = null;
                List<ExpressionNode> elements = (List<ExpressionNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode element = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                elements.add(element);
                RESULT = elements;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListElements", 58, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 150: // AnonymousObjectConstructorExpression ::= CURLY_L CURLY_R
            {
                AnonymousObjectConstructorExpressionNode RESULT = null;
                RESULT = new AnonymousObjectConstructorExpressionNode();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectConstructorExpression", 59, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 151: // AnonymousObjectConstructorExpression ::= CURLY_L AnonymousObjectFields CURLY_R
            {
                AnonymousObjectConstructorExpressionNode RESULT = null;
                VarDeclarationNode fields = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new AnonymousObjectConstructorExpressionNode(fields);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectConstructorExpression", 59, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 152: // AnonymousObjectFields ::= AnonymousObjectField
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode field = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = field;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectFields", 60, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 153: // AnonymousObjectFields ::= AnonymousObjectField COMMA AnonymousObjectFields
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode field = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                VarDeclarationNode fields = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                field.linkedTo(fields);
                RESULT = field;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectFields", 60, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 154: // AnonymousObjectField ::= VarInitDeclaration
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode field = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = field;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectField", 61, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 155: // AnonymousObjectField ::= LocalConstDeclaration
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode field = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = field;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectField", 61, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 156: // Type ::= TYPE
            {
                Type RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new Type(name);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Type", 63, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 157: // Type ::= TYPE LT Type GT
            {
                Type RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                Type param = (Type) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new Type(name, param);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Type", 63, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 158: // Type ::= GLOBAL
            {
                Type RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new Type(name);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Type", 63, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 159: // Type ::= GLOBAL LT Type GT
            {
                Type RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                Type param = (Type) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new Type(name, param);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Type", 63, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 160: // Arguments ::= PARENTH_L PARENTH_R
            {
                List<ExpressionNode> RESULT = null;
                RESULT = new ArrayList<>();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Arguments", 64, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 161: // Arguments ::= PARENTH_L ArgumentList PARENTH_R
            {
                List<ExpressionNode> RESULT = null;
                List<ExpressionNode> arguments = (List<ExpressionNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = arguments;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Arguments", 64, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 162: // ArgumentList ::= Expression
            {
                List<ExpressionNode> RESULT = null;
                ExpressionNode argument = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ArrayList<>(Collections.singletonList(argument));
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ArgumentList", 65, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 163: // ArgumentList ::= ArgumentList COMMA Expression
            {
                List<ExpressionNode> RESULT = null;
                List<ExpressionNode> arguments = (List<ExpressionNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode argument = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                arguments.add(argument);
                RESULT = arguments;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ArgumentList", 65, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /* . . . . . .*/
            default:
                throw new Exception(
                        "Invalid action number " + CUP$SyntacticalAnalyser$act_num + "found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$SyntacticalAnalyser$do_action(
            int CUP$SyntacticalAnalyser$act_num,
            java_cup.runtime.lr_parser CUP$SyntacticalAnalyser$parser,
            java.util.Stack CUP$SyntacticalAnalyser$stack,
            int CUP$SyntacticalAnalyser$top)
            throws java.lang.Exception {
        return CUP$SyntacticalAnalyser$do_action_part00000000(
                CUP$SyntacticalAnalyser$act_num,
                CUP$SyntacticalAnalyser$parser,
                CUP$SyntacticalAnalyser$stack,
                CUP$SyntacticalAnalyser$top);
    }
}

