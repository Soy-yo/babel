
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Tue Apr 28 22:36:16 CEST 2020
//----------------------------------------------------

package syntactical;

import java_cup.runtime.*;
import lexical.LexicalAnalyser;
import lexical.LexicalUnit;
import syntactical.ast.*;
import error.SyntacticalException;
import java.util.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Tue Apr 28 22:36:16 CEST 2020
  */
public class SyntacticalAnalyser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SyntacticalAnalyser() {super();}

  /** Constructor which sets the default scanner. */
  public SyntacticalAnalyser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SyntacticalAnalyser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\204\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\005\000\002\005\005" +
    "\000\002\005\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\007\004\000\002\007\002\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\012" +
    "\003\000\002\012\004\000\002\013\003\000\002\013\004" +
    "\000\002\011\004\000\002\011\004\000\002\017\004\000" +
    "\002\014\005\000\002\014\004\000\002\015\007\000\002" +
    "\015\005\000\002\016\004\000\002\020\005\000\002\021" +
    "\004\000\002\021\005\000\002\022\003\000\002\022\005" +
    "\000\002\023\005\000\002\024\005\000\002\025\004\000" +
    "\002\025\002\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\027\005\000\002\030\004\000\002\030" +
    "\002\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\032\005\000\002\033\003\000\002\034\006\000\002\036" +
    "\004\000\002\036\005\000\002\037\006\000\002\040\004" +
    "\000\002\040\004\000\002\040\002\000\002\041\007\000" +
    "\002\042\005\000\002\042\006\000\002\043\005\000\002" +
    "\044\007\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\056\003\000\002\056\003" +
    "\000\002\056\005\000\002\055\004\000\002\055\004\000" +
    "\002\055\004\000\002\055\003\000\002\054\005\000\002" +
    "\054\005\000\002\054\005\000\002\054\003\000\002\053" +
    "\005\000\002\053\005\000\002\053\003\000\002\052\005" +
    "\000\002\052\005\000\002\052\005\000\002\052\005\000" +
    "\002\052\003\000\002\051\005\000\002\051\005\000\002" +
    "\051\005\000\002\051\003\000\002\050\005\000\002\050" +
    "\003\000\002\047\005\000\002\047\003\000\002\046\005" +
    "\000\002\046\003\000\002\057\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\060" +
    "\003\000\002\060\004\000\002\060\005\000\002\061\003" +
    "\000\002\061\005\000\002\062\004\000\002\062\005\000" +
    "\002\063\003\000\002\063\005\000\002\064\003\000\002" +
    "\064\003\000\002\065\004\000\002\067\003\000\002\067" +
    "\006\000\002\066\003\000\002\066\003\000\002\070\003" +
    "\000\002\070\003\000\002\070\003\000\002\071\006\000" +
    "\002\072\005\000\002\073\003\000\002\074\004\000\002" +
    "\074\005\000\002\075\003\000\002\075\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\337\000\016\002\ufffe\013\ufffe\014\ufffe\061\ufffe\062" +
    "\ufffe\063\ufffe\001\002\000\004\002\341\001\002\000\016" +
    "\002\ufff6\013\025\014\010\061\027\062\020\063\006\001" +
    "\002\000\010\060\334\061\332\062\335\001\002\000\014" +
    "\002\ufff3\013\ufff3\014\ufff3\061\ufff3\062\ufff3\001\002\000" +
    "\006\061\027\062\020\001\002\000\004\057\313\001\002" +
    "\000\014\002\ufff6\013\025\014\010\061\027\062\020\001" +
    "\002\000\010\020\202\053\150\057\203\001\002\000\004" +
    "\057\200\001\002\000\006\020\035\060\177\001\002\000" +
    "\014\020\uff8b\045\174\047\uff8b\060\uff8b\061\uff8b\001\002" +
    "\000\016\002\uffff\013\uffff\014\uffff\061\uffff\062\uffff\063" +
    "\uffff\001\002\000\016\020\uff89\024\uff89\045\uff89\047\uff89" +
    "\060\uff89\061\uff89\001\002\000\004\002\001\001\002\000" +
    "\014\002\ufff5\013\ufff5\014\ufff5\061\ufff5\062\ufff5\001\002" +
    "\000\014\002\ufff2\013\ufff2\014\ufff2\061\ufff2\062\ufff2\001" +
    "\002\000\004\060\173\001\002\000\006\061\027\062\020" +
    "\001\002\000\014\002\ufff4\013\ufff4\014\ufff4\061\ufff4\062" +
    "\ufff4\001\002\000\016\020\uff88\024\uff88\045\uff88\047\uff88" +
    "\060\uff88\061\uff88\001\002\000\006\020\035\061\033\001" +
    "\002\000\004\061\032\001\002\000\004\057\uffe8\001\002" +
    "\000\004\053\171\001\002\000\024\021\uff8c\023\uff8c\024" +
    "\uff8c\025\uff8c\026\uff8c\031\uff8c\057\uff8c\060\uff8c\061\uff8c" +
    "\001\002\000\050\017\070\020\076\021\075\022\056\024" +
    "\064\033\045\035\043\054\044\060\077\061\027\062\020" +
    "\064\040\065\062\066\036\067\071\070\046\071\074\072" +
    "\073\073\047\001\002\000\056\021\uff9b\023\uff9b\024\uff9b" +
    "\025\uff9b\026\uff9b\027\uff9b\031\uff9b\033\uff9b\035\uff9b\037" +
    "\uff9b\041\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b" +
    "\050\uff9b\051\uff9b\052\uff9b\055\uff9b\056\uff9b\057\uff9b\001" +
    "\002\000\006\021\167\031\166\001\002\000\056\021\uff9f" +
    "\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\031\uff9f\033" +
    "\uff9f\035\uff9f\037\uff9f\041\uff9f\043\uff9f\044\uff9f\045\uff9f" +
    "\046\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\055\uff9f\056" +
    "\uff9f\057\uff9f\001\002\000\020\021\uffbf\023\uffbf\024\uffbf" +
    "\025\uffbf\026\uffbf\031\uffbf\057\uffbf\001\002\000\056\021" +
    "\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\031\uffbc" +
    "\033\uffbc\035\uffbc\037\uffbc\041\uffbc\043\uffbc\044\uffbc\045" +
    "\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\055\uffbc" +
    "\056\uffbc\057\uffbc\001\002\000\034\017\070\020\076\033" +
    "\045\035\043\054\044\060\077\064\040\065\062\066\036" +
    "\070\046\071\074\072\073\073\047\001\002\000\034\017" +
    "\070\020\076\033\045\035\043\054\044\060\077\064\040" +
    "\065\062\066\036\070\046\071\074\072\073\073\047\001" +
    "\002\000\034\017\070\020\076\033\045\035\043\054\044" +
    "\060\077\064\040\065\062\066\036\070\046\071\074\072" +
    "\073\073\047\001\002\000\056\021\uff9d\023\uff9d\024\uff9d" +
    "\025\uff9d\026\uff9d\027\uff9d\031\uff9d\033\uff9d\035\uff9d\037" +
    "\uff9d\041\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d" +
    "\050\uff9d\051\uff9d\052\uff9d\055\uff9d\056\uff9d\057\uff9d\001" +
    "\002\000\056\021\uff99\023\uff99\024\uff99\025\uff99\026\uff99" +
    "\027\uff99\031\uff99\033\uff99\035\uff99\037\uff99\041\uff99\043" +
    "\uff99\044\uff99\045\uff99\046\uff99\047\uff99\050\uff99\051\uff99" +
    "\052\uff99\055\uff99\056\uff99\057\uff99\001\002\000\056\021" +
    "\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\031\uffb6" +
    "\033\uffb6\035\uffb6\037\uffb6\041\uffb6\043\uffb6\044\uffb6\045" +
    "\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\055\uffb6" +
    "\056\uffb6\057\uffb6\001\002\000\056\021\uffb2\023\uffb2\024" +
    "\uffb2\025\uffb2\026\uffb2\027\uffb2\031\uffb2\033\uffb2\035\uffb2" +
    "\037\uffb2\041\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047" +
    "\uffb2\050\uffb2\051\uffb2\052\uffb2\055\uffb2\056\uffb2\057\uffb2" +
    "\001\002\000\056\021\uffaf\023\uffaf\024\uffaf\025\uffaf\026" +
    "\uffaf\027\uffaf\031\uffaf\033\uffaf\035\uffaf\037\125\041\126" +
    "\043\124\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051" +
    "\uffaf\052\uffaf\055\uffaf\056\uffaf\057\uffaf\001\002\000\050" +
    "\021\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\031" +
    "\uffaa\033\121\035\122\044\uffaa\045\uffaa\046\uffaa\047\uffaa" +
    "\050\uffaa\051\uffaa\052\uffaa\055\uffaa\056\uffaa\057\uffaa\001" +
    "\002\000\044\021\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6" +
    "\027\uffa6\031\uffa6\044\116\045\114\046\117\047\115\050" +
    "\uffa6\051\uffa6\052\uffa6\055\uffa6\056\uffa6\057\uffa6\001\002" +
    "\000\034\021\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027" +
    "\uffa4\031\uffa4\050\110\051\111\052\112\055\uffa4\056\uffa4" +
    "\057\uffa4\001\002\000\050\017\070\020\076\022\056\023" +
    "\155\024\064\033\045\035\043\054\044\060\077\061\027" +
    "\062\020\064\040\065\062\066\036\067\071\070\046\071" +
    "\074\072\073\073\047\001\002\000\026\021\uffa2\023\uffa2" +
    "\024\uffa2\025\uffa2\026\uffa2\027\uffa2\031\uffa2\055\106\056" +
    "\uffa2\057\uffa2\001\002\000\020\021\uffc0\023\uffc0\024\uffc0" +
    "\025\uffc0\026\uffc0\031\uffc0\057\uffc0\001\002\000\024\021" +
    "\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\031\uffa0" +
    "\056\104\057\uffa0\001\002\000\056\021\uff9e\023\uff9e\024" +
    "\uff9e\025\uff9e\026\uff9e\027\uff9e\031\uff9e\033\uff9e\035\uff9e" +
    "\037\uff9e\041\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047" +
    "\uff9e\050\uff9e\051\uff9e\052\uff9e\055\uff9e\056\uff9e\057\uff9e" +
    "\001\002\000\022\021\uffbd\023\uffbd\024\uffbd\025\uffbd\026" +
    "\uffbd\027\101\031\uffbd\057\uffbd\001\002\000\012\013\146" +
    "\025\141\061\027\062\020\001\002\000\056\021\uffbb\023" +
    "\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\031\uffbb\033\uffbb" +
    "\035\uffbb\037\uffbb\041\uffbb\043\uffbb\044\uffbb\045\uffbb\046" +
    "\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\055\uffbb\056\uffbb" +
    "\057\uffbb\001\002\000\020\021\uffbe\023\uffbe\024\uffbe\025" +
    "\uffbe\026\uffbe\031\uffbe\057\uffbe\001\002\000\006\021\uff7f" +
    "\031\uff7f\001\002\000\056\021\uff98\023\uff98\024\uff98\025" +
    "\uff98\026\uff98\027\uff98\031\uff98\033\uff98\035\uff98\037\uff98" +
    "\041\uff98\043\uff98\044\uff98\045\uff98\046\uff98\047\uff98\050" +
    "\uff98\051\uff98\052\uff98\055\uff98\056\uff98\057\uff98\001\002" +
    "\000\020\021\uff97\023\uff97\024\uff97\025\uff97\026\uff97\031" +
    "\uff97\057\uff97\001\002\000\004\020\035\001\002\000\056" +
    "\021\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a\027\uff9a\031" +
    "\uff9a\033\uff9a\035\uff9a\037\uff9a\041\uff9a\043\uff9a\044\uff9a" +
    "\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\055" +
    "\uff9a\056\uff9a\057\uff9a\001\002\000\056\021\uff9c\023\uff9c" +
    "\024\uff9c\025\uff9c\026\uff9c\027\uff9c\031\uff9c\033\uff9c\035" +
    "\uff9c\037\uff9c\041\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c" +
    "\047\uff9c\050\uff9c\051\uff9c\052\uff9c\055\uff9c\056\uff9c\057" +
    "\uff9c\001\002\000\024\021\uff81\023\uff81\024\uff81\025\uff81" +
    "\026\uff81\031\uff81\057\uff81\060\uff81\061\uff81\001\002\000" +
    "\034\017\070\020\076\033\045\035\043\054\044\060\077" +
    "\064\040\065\062\066\036\070\046\071\074\072\073\073" +
    "\047\001\002\000\056\021\uff82\023\uff82\024\uff82\025\uff82" +
    "\026\uff82\027\uff82\031\uff82\033\uff82\035\uff82\037\uff82\041" +
    "\uff82\043\uff82\044\uff82\045\uff82\046\uff82\047\uff82\050\uff82" +
    "\051\uff82\052\uff82\055\uff82\056\uff82\057\uff82\001\002\000" +
    "\006\021\102\027\101\001\002\000\034\017\070\020\076" +
    "\033\045\035\043\054\044\060\077\064\040\065\062\066" +
    "\036\070\046\071\074\072\073\073\047\001\002\000\056" +
    "\021\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\031" +
    "\uffba\033\uffba\035\uffba\037\uffba\041\uffba\043\uffba\044\uffba" +
    "\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba\055" +
    "\uffba\056\uffba\057\uffba\001\002\000\024\021\uffa1\023\uffa1" +
    "\024\uffa1\025\uffa1\026\uffa1\027\uffa1\031\uffa1\056\104\057" +
    "\uffa1\001\002\000\034\017\070\020\076\033\045\035\043" +
    "\054\044\060\077\064\040\065\062\066\036\070\046\071" +
    "\074\072\073\073\047\001\002\000\026\021\uffa3\023\uffa3" +
    "\024\uffa3\025\uffa3\026\uffa3\027\uffa3\031\uffa3\055\106\056" +
    "\uffa3\057\uffa3\001\002\000\034\017\070\020\076\033\045" +
    "\035\043\054\044\060\077\064\040\065\062\066\036\070" +
    "\046\071\074\072\073\073\047\001\002\000\034\021\uffa5" +
    "\023\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\031\uffa5\050" +
    "\110\051\111\052\112\055\uffa5\056\uffa5\057\uffa5\001\002" +
    "\000\034\017\070\020\076\033\045\035\043\054\044\060" +
    "\077\064\040\065\062\066\036\070\046\071\074\072\073" +
    "\073\047\001\002\000\034\017\070\020\076\033\045\035" +
    "\043\054\044\060\077\064\040\065\062\066\036\070\046" +
    "\071\074\072\073\073\047\001\002\000\034\017\070\020" +
    "\076\033\045\035\043\054\044\060\077\064\040\065\062" +
    "\066\036\070\046\071\074\072\073\073\047\001\002\000" +
    "\044\021\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8" +
    "\031\uffa8\044\116\045\114\046\117\047\115\050\uffa8\051" +
    "\uffa8\052\uffa8\055\uffa8\056\uffa8\057\uffa8\001\002\000\034" +
    "\017\070\020\076\033\045\035\043\054\044\060\077\064" +
    "\040\065\062\066\036\070\046\071\074\072\073\073\047" +
    "\001\002\000\034\017\070\020\076\033\045\035\043\054" +
    "\044\060\077\064\040\065\062\066\036\070\046\071\074" +
    "\072\073\073\047\001\002\000\034\017\070\020\076\033" +
    "\045\035\043\054\044\060\077\064\040\065\062\066\036" +
    "\070\046\071\074\072\073\073\047\001\002\000\034\017" +
    "\070\020\076\033\045\035\043\054\044\060\077\064\040" +
    "\065\062\066\036\070\046\071\074\072\073\073\047\001" +
    "\002\000\050\021\uffad\023\uffad\024\uffad\025\uffad\026\uffad" +
    "\027\uffad\031\uffad\033\121\035\122\044\uffad\045\uffad\046" +
    "\uffad\047\uffad\050\uffad\051\uffad\052\uffad\055\uffad\056\uffad" +
    "\057\uffad\001\002\000\034\017\070\020\076\033\045\035" +
    "\043\054\044\060\077\064\040\065\062\066\036\070\046" +
    "\071\074\072\073\073\047\001\002\000\034\017\070\020" +
    "\076\033\045\035\043\054\044\060\077\064\040\065\062" +
    "\066\036\070\046\071\074\072\073\073\047\001\002\000" +
    "\056\021\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0" +
    "\031\uffb0\033\uffb0\035\uffb0\037\125\041\126\043\124\044" +
    "\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0" +
    "\055\uffb0\056\uffb0\057\uffb0\001\002\000\034\017\070\020" +
    "\076\033\045\035\043\054\044\060\077\064\040\065\062" +
    "\066\036\070\046\071\074\072\073\073\047\001\002\000" +
    "\034\017\070\020\076\033\045\035\043\054\044\060\077" +
    "\064\040\065\062\066\036\070\046\071\074\072\073\073" +
    "\047\001\002\000\034\017\070\020\076\033\045\035\043" +
    "\054\044\060\077\064\040\065\062\066\036\070\046\071" +
    "\074\072\073\073\047\001\002\000\056\021\uffb4\023\uffb4" +
    "\024\uffb4\025\uffb4\026\uffb4\027\uffb4\031\uffb4\033\uffb4\035" +
    "\uffb4\037\uffb4\041\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4" +
    "\047\uffb4\050\uffb4\051\uffb4\052\uffb4\055\uffb4\056\uffb4\057" +
    "\uffb4\001\002\000\056\021\uffb5\023\uffb5\024\uffb5\025\uffb5" +
    "\026\uffb5\027\uffb5\031\uffb5\033\uffb5\035\uffb5\037\uffb5\041" +
    "\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5" +
    "\051\uffb5\052\uffb5\055\uffb5\056\uffb5\057\uffb5\001\002\000" +
    "\056\021\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3" +
    "\031\uffb3\033\uffb3\035\uffb3\037\uffb3\041\uffb3\043\uffb3\044" +
    "\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3" +
    "\055\uffb3\056\uffb3\057\uffb3\001\002\000\056\021\uffb1\023" +
    "\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\031\uffb1\033\uffb1" +
    "\035\uffb1\037\125\041\126\043\124\044\uffb1\045\uffb1\046" +
    "\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\055\uffb1\056\uffb1" +
    "\057\uffb1\001\002\000\050\021\uffab\023\uffab\024\uffab\025" +
    "\uffab\026\uffab\027\uffab\031\uffab\033\121\035\122\044\uffab" +
    "\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab\055" +
    "\uffab\056\uffab\057\uffab\001\002\000\050\021\uffae\023\uffae" +
    "\024\uffae\025\uffae\026\uffae\027\uffae\031\uffae\033\121\035" +
    "\122\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae" +
    "\052\uffae\055\uffae\056\uffae\057\uffae\001\002\000\050\021" +
    "\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac\031\uffac" +
    "\033\121\035\122\044\uffac\045\uffac\046\uffac\047\uffac\050" +
    "\uffac\051\uffac\052\uffac\055\uffac\056\uffac\057\uffac\001\002" +
    "\000\044\021\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027" +
    "\uffa9\031\uffa9\044\116\045\114\046\117\047\115\050\uffa9" +
    "\051\uffa9\052\uffa9\055\uffa9\056\uffa9\057\uffa9\001\002\000" +
    "\044\021\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7" +
    "\031\uffa7\044\116\045\114\046\117\047\115\050\uffa7\051" +
    "\uffa7\052\uffa7\055\uffa7\056\uffa7\057\uffa7\001\002\000\006" +
    "\025\uff90\031\153\001\002\000\020\021\uff92\023\uff92\024" +
    "\uff92\025\uff92\026\uff92\031\uff92\057\uff92\001\002\000\004" +
    "\025\152\001\002\000\004\053\150\001\002\000\006\025" +
    "\uff8d\031\uff8d\001\002\000\006\025\uff8e\031\uff8e\001\002" +
    "\000\006\061\027\062\020\001\002\000\010\025\uffe7\031" +
    "\uffe7\057\uffe7\001\002\000\046\017\070\020\076\022\056" +
    "\024\064\033\045\035\043\054\044\060\077\061\027\062" +
    "\020\064\040\065\062\066\036\067\071\070\046\071\074" +
    "\072\073\073\047\001\002\000\010\025\uffeb\031\uffeb\057" +
    "\uffeb\001\002\000\020\021\uff91\023\uff91\024\uff91\025\uff91" +
    "\026\uff91\031\uff91\057\uff91\001\002\000\010\013\146\061" +
    "\027\062\020\001\002\000\004\025\uff8f\001\002\000\020" +
    "\021\uff96\023\uff96\024\uff96\025\uff96\026\uff96\031\uff96\057" +
    "\uff96\001\002\000\006\023\161\031\160\001\002\000\006" +
    "\023\uff94\031\uff94\001\002\000\046\017\070\020\076\022" +
    "\056\024\064\033\045\035\043\054\044\060\077\061\027" +
    "\062\020\064\040\065\062\066\036\067\071\070\046\071" +
    "\074\072\073\073\047\001\002\000\020\021\uff95\023\uff95" +
    "\024\uff95\025\uff95\026\uff95\031\uff95\057\uff95\001\002\000" +
    "\006\023\uff93\031\uff93\001\002\000\056\021\uffb9\023\uffb9" +
    "\024\uffb9\025\uffb9\026\uffb9\027\uffb9\031\uffb9\033\uffb9\035" +
    "\uffb9\037\uffb9\041\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9" +
    "\047\uffb9\050\uffb9\051\uffb9\052\uffb9\055\uffb9\056\uffb9\057" +
    "\uffb9\001\002\000\056\021\uffb7\023\uffb7\024\uffb7\025\uffb7" +
    "\026\uffb7\027\uffb7\031\uffb7\033\uffb7\035\uffb7\037\uffb7\041" +
    "\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7" +
    "\051\uffb7\052\uffb7\055\uffb7\056\uffb7\057\uffb7\001\002\000" +
    "\056\021\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8" +
    "\031\uffb8\033\uffb8\035\uffb8\037\uffb8\041\uffb8\043\uffb8\044" +
    "\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8" +
    "\055\uffb8\056\uffb8\057\uffb8\001\002\000\046\017\070\020" +
    "\076\022\056\024\064\033\045\035\043\054\044\060\077" +
    "\061\027\062\020\064\040\065\062\066\036\067\071\070" +
    "\046\071\074\072\073\073\047\001\002\000\024\021\uff80" +
    "\023\uff80\024\uff80\025\uff80\026\uff80\031\uff80\057\uff80\060" +
    "\uff80\061\uff80\001\002\000\006\021\uff7e\031\uff7e\001\002" +
    "\000\046\017\070\020\076\022\056\024\064\033\045\035" +
    "\043\054\044\060\077\061\027\062\020\064\040\065\062" +
    "\066\036\067\071\070\046\071\074\072\073\073\047\001" +
    "\002\000\004\057\uffe9\001\002\000\010\025\uffea\031\uffea" +
    "\057\uffea\001\002\000\006\061\027\062\020\001\002\000" +
    "\004\047\176\001\002\000\012\020\uff8a\047\uff8a\060\uff8a" +
    "\061\uff8a\001\002\000\016\011\uffec\020\uffec\021\uffec\031" +
    "\uffec\053\uffec\057\uffec\001\002\000\072\002\uffed\004\uffed" +
    "\006\uffed\007\uffed\010\uffed\012\uffed\013\uffed\014\uffed\015" +
    "\uffed\017\uffed\020\uffed\022\uffed\024\uffed\025\uffed\033\uffed" +
    "\035\uffed\054\uffed\060\uffed\061\uffed\062\uffed\064\uffed\065" +
    "\uffed\066\uffed\067\uffed\070\uffed\071\uffed\072\uffed\073\uffed" +
    "\001\002\000\004\024\214\001\002\000\010\021\207\061" +
    "\027\062\020\001\002\000\072\002\uffee\004\uffee\006\uffee" +
    "\007\uffee\010\uffee\012\uffee\013\uffee\014\uffee\015\uffee\017" +
    "\uffee\020\uffee\022\uffee\024\uffee\025\uffee\033\uffee\035\uffee" +
    "\054\uffee\060\uffee\061\uffee\062\uffee\064\uffee\065\uffee\066" +
    "\uffee\067\uffee\070\uffee\071\uffee\072\uffee\073\uffee\001\002" +
    "\000\006\021\211\031\210\001\002\000\004\060\177\001" +
    "\002\000\006\021\uffe3\031\uffe3\001\002\000\004\024\uffe5" +
    "\001\002\000\006\061\027\062\020\001\002\000\004\024" +
    "\uffe4\001\002\000\006\021\uffe2\031\uffe2\001\002\000\020" +
    "\002\uffe6\013\uffe6\014\uffe6\015\uffe6\025\uffe6\061\uffe6\062" +
    "\uffe6\001\002\000\030\004\231\006\227\007\241\010\217" +
    "\012\222\013\146\024\214\025\uffd8\060\223\061\027\062" +
    "\020\001\002\000\004\053\307\001\002\000\064\004\uffd4" +
    "\006\uffd4\007\uffd4\010\uffd4\012\uffd4\013\uffd4\017\uffd4\020" +
    "\uffd4\022\uffd4\024\uffd4\025\uffd4\033\uffd4\035\uffd4\054\uffd4" +
    "\060\uffd4\061\uffd4\062\uffd4\064\uffd4\065\uffd4\066\uffd4\067" +
    "\uffd4\070\uffd4\071\uffd4\072\uffd4\073\uffd4\001\002\000\046" +
    "\017\070\020\076\022\056\024\064\033\045\035\043\054" +
    "\044\060\077\061\027\062\020\064\040\065\062\066\036" +
    "\067\071\070\046\071\074\072\073\073\047\001\002\000" +
    "\064\004\uffd6\006\uffd6\007\uffd6\010\uffd6\012\uffd6\013\uffd6" +
    "\017\uffd6\020\uffd6\022\uffd6\024\uffd6\025\uffd6\033\uffd6\035" +
    "\uffd6\054\uffd6\060\uffd6\061\uffd6\062\uffd6\064\uffd6\065\uffd6" +
    "\066\uffd6\067\uffd6\070\uffd6\071\uffd6\072\uffd6\073\uffd6\001" +
    "\002\000\064\004\uffcd\006\uffcd\007\uffcd\010\uffcd\012\uffcd" +
    "\013\uffcd\017\uffcd\020\uffcd\022\uffcd\024\uffcd\025\uffcd\033" +
    "\uffcd\035\uffcd\054\uffcd\060\uffcd\061\uffcd\062\uffcd\064\uffcd" +
    "\065\uffcd\066\uffcd\067\uffcd\070\uffcd\071\uffcd\072\uffcd\073" +
    "\uffcd\001\002\000\050\017\070\020\076\022\056\024\064" +
    "\033\045\035\043\054\044\057\303\060\077\061\027\062" +
    "\020\064\040\065\062\066\036\067\071\070\046\071\074" +
    "\072\073\073\047\001\002\000\010\022\uff82\030\uff82\053" +
    "\uff87\001\002\000\064\004\uffd7\006\uffd7\007\uffd7\010\uffd7" +
    "\012\uffd7\013\uffd7\017\uffd7\020\uffd7\022\uffd7\024\uffd7\025" +
    "\uffd7\033\uffd7\035\uffd7\054\uffd7\060\uffd7\061\uffd7\062\uffd7" +
    "\064\uffd7\065\uffd7\066\uffd7\067\uffd7\070\uffd7\071\uffd7\072" +
    "\uffd7\073\uffd7\001\002\000\006\022\276\030\275\001\002" +
    "\000\064\004\uffd3\006\uffd3\007\uffd3\010\uffd3\012\uffd3\013" +
    "\uffd3\017\uffd3\020\uffd3\022\uffd3\024\uffd3\025\uffd3\033\uffd3" +
    "\035\uffd3\054\uffd3\060\uffd3\061\uffd3\062\uffd3\064\uffd3\065" +
    "\uffd3\066\uffd3\067\uffd3\070\uffd3\071\uffd3\072\uffd3\073\uffd3" +
    "\001\002\000\046\017\070\020\076\022\056\024\064\033" +
    "\045\035\043\054\044\060\077\061\027\062\020\064\040" +
    "\065\062\066\036\067\071\070\046\071\074\072\073\073" +
    "\047\001\002\000\006\053\150\057\203\001\002\000\046" +
    "\017\070\020\076\022\056\024\064\033\045\035\043\054" +
    "\044\060\077\061\027\062\020\064\040\065\062\066\036" +
    "\067\071\070\046\071\074\072\073\073\047\001\002\000" +
    "\064\004\uffd0\006\uffd0\007\uffd0\010\uffd0\012\uffd0\013\uffd0" +
    "\017\uffd0\020\uffd0\022\uffd0\024\uffd0\025\uffd0\033\uffd0\035" +
    "\uffd0\054\uffd0\060\uffd0\061\uffd0\062\uffd0\064\uffd0\065\uffd0" +
    "\066\uffd0\067\uffd0\070\uffd0\071\uffd0\072\uffd0\073\uffd0\001" +
    "\002\000\064\004\uffd2\006\uffd2\007\uffd2\010\uffd2\012\uffd2" +
    "\013\uffd2\017\uffd2\020\uffd2\022\uffd2\024\uffd2\025\uffd2\033" +
    "\uffd2\035\uffd2\054\uffd2\060\uffd2\061\uffd2\062\uffd2\064\uffd2" +
    "\065\uffd2\066\uffd2\067\uffd2\070\uffd2\071\uffd2\072\uffd2\073" +
    "\uffd2\001\002\000\064\004\uffd1\006\uffd1\007\uffd1\010\uffd1" +
    "\012\uffd1\013\uffd1\017\uffd1\020\uffd1\022\uffd1\024\uffd1\025" +
    "\uffd1\033\uffd1\035\uffd1\054\uffd1\060\uffd1\061\uffd1\062\uffd1" +
    "\064\uffd1\065\uffd1\066\uffd1\067\uffd1\070\uffd1\071\uffd1\072" +
    "\uffd1\073\uffd1\001\002\000\066\004\ufff0\006\ufff0\007\ufff0" +
    "\010\ufff0\012\ufff0\013\ufff0\015\ufff0\017\ufff0\020\ufff0\022" +
    "\ufff0\024\ufff0\025\ufff0\033\ufff0\035\ufff0\054\ufff0\060\ufff0" +
    "\061\ufff0\062\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0\070" +
    "\ufff0\071\ufff0\072\ufff0\073\ufff0\001\002\000\064\004\uffd5" +
    "\006\uffd5\007\uffd5\010\uffd5\012\uffd5\013\uffd5\017\uffd5\020" +
    "\uffd5\022\uffd5\024\uffd5\025\uffd5\033\uffd5\035\uffd5\054\uffd5" +
    "\060\uffd5\061\uffd5\062\uffd5\064\uffd5\065\uffd5\066\uffd5\067" +
    "\uffd5\070\uffd5\071\uffd5\072\uffd5\073\uffd5\001\002\000\004" +
    "\053\uff86\001\002\000\030\004\231\006\227\007\241\010" +
    "\217\012\222\013\146\024\214\025\uffd8\060\223\061\027" +
    "\062\020\001\002\000\006\061\027\062\020\001\002\000" +
    "\004\057\247\001\002\000\004\025\246\001\002\000\064" +
    "\004\uffcf\006\uffcf\007\uffcf\010\uffcf\012\uffcf\013\uffcf\017" +
    "\uffcf\020\uffcf\022\uffcf\024\uffcf\025\uffcf\033\uffcf\035\uffcf" +
    "\054\uffcf\060\uffcf\061\uffcf\062\uffcf\064\uffcf\065\uffcf\066" +
    "\uffcf\067\uffcf\070\uffcf\071\uffcf\072\uffcf\073\uffcf\001\002" +
    "\000\004\053\uff85\001\002\000\074\002\uffce\004\uffce\005" +
    "\uffce\006\uffce\007\uffce\010\uffce\012\uffce\013\uffce\014\uffce" +
    "\015\uffce\017\uffce\020\uffce\022\uffce\024\uffce\025\uffce\033" +
    "\uffce\035\uffce\054\uffce\060\uffce\061\uffce\062\uffce\064\uffce" +
    "\065\uffce\066\uffce\067\uffce\070\uffce\071\uffce\072\uffce\073" +
    "\uffce\001\002\000\066\004\uffef\006\uffef\007\uffef\010\uffef" +
    "\012\uffef\013\uffef\015\uffef\017\uffef\020\uffef\022\uffef\024" +
    "\uffef\025\uffef\033\uffef\035\uffef\054\uffef\060\uffef\061\uffef" +
    "\062\uffef\064\uffef\065\uffef\066\uffef\067\uffef\070\uffef\071" +
    "\uffef\072\uffef\073\uffef\001\002\000\004\011\251\001\002" +
    "\000\046\017\070\020\076\022\056\024\064\033\045\035" +
    "\043\054\044\060\077\061\027\062\020\064\040\065\062" +
    "\066\036\067\071\070\046\071\074\072\073\073\047\001" +
    "\002\000\004\024\214\001\002\000\064\004\uffc1\006\uffc1" +
    "\007\uffc1\010\uffc1\012\uffc1\013\uffc1\017\uffc1\020\uffc1\022" +
    "\uffc1\024\uffc1\025\uffc1\033\uffc1\035\uffc1\054\uffc1\060\uffc1" +
    "\061\uffc1\062\uffc1\064\uffc1\065\uffc1\066\uffc1\067\uffc1\070" +
    "\uffc1\071\uffc1\072\uffc1\073\uffc1\001\002\000\004\025\uffd9" +
    "\001\002\000\004\024\214\001\002\000\066\004\uffc6\005" +
    "\257\006\uffc6\007\uffc6\010\uffc6\012\uffc6\013\uffc6\017\uffc6" +
    "\020\uffc6\022\uffc6\024\uffc6\025\uffc6\033\uffc6\035\uffc6\054" +
    "\uffc6\060\uffc6\061\uffc6\062\uffc6\064\uffc6\065\uffc6\066\uffc6" +
    "\067\uffc6\070\uffc6\071\uffc6\072\uffc6\073\uffc6\001\002\000" +
    "\006\004\231\024\214\001\002\000\064\004\uffc9\006\uffc9" +
    "\007\uffc9\010\uffc9\012\uffc9\013\uffc9\017\uffc9\020\uffc9\022" +
    "\uffc9\024\uffc9\025\uffc9\033\uffc9\035\uffc9\054\uffc9\060\uffc9" +
    "\061\uffc9\062\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\070" +
    "\uffc9\071\uffc9\072\uffc9\073\uffc9\001\002\000\064\004\uffc7" +
    "\006\uffc7\007\uffc7\010\uffc7\012\uffc7\013\uffc7\017\uffc7\020" +
    "\uffc7\022\uffc7\024\uffc7\025\uffc7\033\uffc7\035\uffc7\054\uffc7" +
    "\060\uffc7\061\uffc7\062\uffc7\064\uffc7\065\uffc7\066\uffc7\067" +
    "\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7\001\002\000\064" +
    "\004\uffc8\006\uffc8\007\uffc8\010\uffc8\012\uffc8\013\uffc8\017" +
    "\uffc8\020\uffc8\022\uffc8\024\uffc8\025\uffc8\033\uffc8\035\uffc8" +
    "\054\uffc8\060\uffc8\061\uffc8\062\uffc8\064\uffc8\065\uffc8\066" +
    "\uffc8\067\uffc8\070\uffc8\071\uffc8\072\uffc8\073\uffc8\001\002" +
    "\000\004\024\264\001\002\000\022\017\070\064\040\065" +
    "\062\066\036\070\046\071\074\072\073\073\047\001\002" +
    "\000\004\026\273\001\002\000\050\017\070\020\076\022" +
    "\056\024\064\025\267\033\045\035\043\054\044\060\077" +
    "\061\027\062\020\064\040\065\062\066\036\067\071\070" +
    "\046\071\074\072\073\073\047\001\002\000\064\004\uffc5" +
    "\006\uffc5\007\uffc5\010\uffc5\012\uffc5\013\uffc5\017\uffc5\020" +
    "\uffc5\022\uffc5\024\uffc5\025\uffc5\033\uffc5\035\uffc5\054\uffc5" +
    "\060\uffc5\061\uffc5\062\uffc5\064\uffc5\065\uffc5\066\uffc5\067" +
    "\uffc5\070\uffc5\071\uffc5\072\uffc5\073\uffc5\001\002\000\004" +
    "\026\271\001\002\000\026\004\231\006\227\007\241\010" +
    "\217\012\222\013\146\024\214\060\223\061\027\062\020" +
    "\001\002\000\050\017\uffc3\020\uffc3\022\uffc3\024\uffc3\025" +
    "\uffc3\033\uffc3\035\uffc3\054\uffc3\060\uffc3\061\uffc3\062\uffc3" +
    "\064\uffc3\065\uffc3\066\uffc3\067\uffc3\070\uffc3\071\uffc3\072" +
    "\uffc3\073\uffc3\001\002\000\026\004\231\006\227\007\241" +
    "\010\217\012\222\013\146\024\214\060\223\061\027\062" +
    "\020\001\002\000\050\017\uffc4\020\uffc4\022\uffc4\024\uffc4" +
    "\025\uffc4\033\uffc4\035\uffc4\054\uffc4\060\uffc4\061\uffc4\062" +
    "\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4\070\uffc4\071\uffc4" +
    "\072\uffc4\073\uffc4\001\002\000\004\060\301\001\002\000" +
    "\046\017\070\020\076\022\056\024\064\033\045\035\043" +
    "\054\044\060\077\061\027\062\020\064\040\065\062\066" +
    "\036\067\071\070\046\071\074\072\073\073\047\001\002" +
    "\000\004\023\300\001\002\000\004\053\uff84\001\002\000" +
    "\004\053\uff83\001\002\000\004\057\304\001\002\000\064" +
    "\004\uffcb\006\uffcb\007\uffcb\010\uffcb\012\uffcb\013\uffcb\017" +
    "\uffcb\020\uffcb\022\uffcb\024\uffcb\025\uffcb\033\uffcb\035\uffcb" +
    "\054\uffcb\060\uffcb\061\uffcb\062\uffcb\064\uffcb\065\uffcb\066" +
    "\uffcb\067\uffcb\070\uffcb\071\uffcb\072\uffcb\073\uffcb\001\002" +
    "\000\064\004\uffca\006\uffca\007\uffca\010\uffca\012\uffca\013" +
    "\uffca\017\uffca\020\uffca\022\uffca\024\uffca\025\uffca\033\uffca" +
    "\035\uffca\054\uffca\060\uffca\061\uffca\062\uffca\064\uffca\065" +
    "\uffca\066\uffca\067\uffca\070\uffca\071\uffca\072\uffca\073\uffca" +
    "\001\002\000\004\024\214\001\002\000\064\004\uffc2\006" +
    "\uffc2\007\uffc2\010\uffc2\012\uffc2\013\uffc2\017\uffc2\020\uffc2" +
    "\022\uffc2\024\uffc2\025\uffc2\033\uffc2\035\uffc2\054\uffc2\060" +
    "\uffc2\061\uffc2\062\uffc2\064\uffc2\065\uffc2\066\uffc2\067\uffc2" +
    "\070\uffc2\071\uffc2\072\uffc2\073\uffc2\001\002\000\046\017" +
    "\070\020\076\022\056\024\064\033\045\035\043\054\044" +
    "\060\077\061\027\062\020\064\040\065\062\066\036\067" +
    "\071\070\046\071\074\072\073\073\047\001\002\000\004" +
    "\057\311\001\002\000\064\004\uffcc\006\uffcc\007\uffcc\010" +
    "\uffcc\012\uffcc\013\uffcc\017\uffcc\020\uffcc\022\uffcc\024\uffcc" +
    "\025\uffcc\033\uffcc\035\uffcc\054\uffcc\060\uffcc\061\uffcc\062" +
    "\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc\070\uffcc\071\uffcc" +
    "\072\uffcc\073\uffcc\001\002\000\004\002\ufff7\001\002\000" +
    "\014\002\ufff1\013\ufff1\014\ufff1\061\ufff1\062\ufff1\001\002" +
    "\000\004\024\315\001\002\000\014\013\146\015\324\025" +
    "\uffde\061\027\062\020\001\002\000\014\002\uffe1\013\uffe1" +
    "\014\uffe1\061\uffe1\062\uffe1\001\002\000\014\013\146\015" +
    "\324\025\uffde\061\027\062\020\001\002\000\014\013\uffdc" +
    "\015\uffdc\025\uffdc\061\uffdc\062\uffdc\001\002\000\014\013" +
    "\uffdd\015\uffdd\025\uffdd\061\uffdd\062\uffdd\001\002\000\004" +
    "\025\327\001\002\000\014\013\uffdb\015\uffdb\025\uffdb\061" +
    "\uffdb\062\uffdb\001\002\000\004\020\202\001\002\000\004" +
    "\024\214\001\002\000\014\013\uffda\015\uffda\025\uffda\061" +
    "\uffda\062\uffda\001\002\000\014\002\uffe0\013\uffe0\014\uffe0" +
    "\061\uffe0\062\uffe0\001\002\000\004\025\uffdf\001\002\000" +
    "\006\041\ufffb\057\ufffb\001\002\000\006\041\ufff9\057\ufff9" +
    "\001\002\000\006\041\336\057\337\001\002\000\006\041" +
    "\ufffa\057\ufffa\001\002\000\006\041\ufff8\057\ufff8\001\002" +
    "\000\010\060\334\061\332\062\335\001\002\000\016\002" +
    "\ufffd\013\ufffd\014\ufffd\061\ufffd\062\ufffd\063\ufffd\001\002" +
    "\000\006\041\ufffc\057\ufffc\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\337\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\034\004\016\007\020\010\011\011\022\012\021" +
    "\014\013\015\010\017\012\020\025\023\006\065\023\066" +
    "\015\067\014\001\001\000\006\005\332\006\330\001\001" +
    "\000\002\001\001\000\004\066\313\001\001\000\002\001" +
    "\001\000\032\007\311\010\011\011\022\012\021\014\013" +
    "\015\010\017\012\020\025\023\006\065\023\066\015\067" +
    "\014\001\001\000\004\021\200\001\001\000\002\001\001" +
    "\000\004\074\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\065\030\066" +
    "\015\067\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\074\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\045\066" +
    "\046\062\047\060\050\056\051\054\052\053\053\052\054" +
    "\051\055\050\056\047\057\041\060\057\062\040\065\065" +
    "\066\015\067\071\073\064\075\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\055\164\056\047\057\041\073" +
    "\064\001\001\000\012\055\163\056\047\057\041\073\064" +
    "\001\001\000\012\055\162\056\047\057\041\073\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\045\156\046\062" +
    "\047\060\050\056\051\054\052\053\053\052\054\051\055" +
    "\050\056\047\057\041\060\057\061\155\062\040\065\065" +
    "\066\015\067\071\073\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\014\144\016\143\017\142\063\141\064" +
    "\137\065\023\066\015\067\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\074\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\046\077\047" +
    "\060\050\056\051\054\052\053\053\052\054\051\055\050" +
    "\056\047\057\041\073\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\047\102\050\056\051\054\052\053" +
    "\053\052\054\051\055\050\056\047\057\041\073\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\050\104" +
    "\051\054\052\053\053\052\054\051\055\050\056\047\057" +
    "\041\073\064\001\001\000\002\001\001\000\022\051\106" +
    "\052\053\053\052\054\051\055\050\056\047\057\041\073" +
    "\064\001\001\000\002\001\001\000\020\052\136\053\052" +
    "\054\051\055\050\056\047\057\041\073\064\001\001\000" +
    "\020\052\135\053\052\054\051\055\050\056\047\057\041" +
    "\073\064\001\001\000\020\052\112\053\052\054\051\055" +
    "\050\056\047\057\041\073\064\001\001\000\002\001\001" +
    "\000\016\053\134\054\051\055\050\056\047\057\041\073" +
    "\064\001\001\000\016\053\133\054\051\055\050\056\047" +
    "\057\041\073\064\001\001\000\016\053\132\054\051\055" +
    "\050\056\047\057\041\073\064\001\001\000\016\053\117" +
    "\054\051\055\050\056\047\057\041\073\064\001\001\000" +
    "\002\001\001\000\014\054\131\055\050\056\047\057\041" +
    "\073\064\001\001\000\014\054\122\055\050\056\047\057" +
    "\041\073\064\001\001\000\002\001\001\000\012\055\130" +
    "\056\047\057\041\073\064\001\001\000\012\055\127\056" +
    "\047\057\041\073\064\001\001\000\012\055\126\056\047" +
    "\057\041\073\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\014\146\017\142\065\023\066\015\067\014" +
    "\001\001\000\002\001\001\000\044\045\150\046\062\047" +
    "\060\050\056\051\054\052\053\053\052\054\051\055\050" +
    "\056\047\057\041\060\057\062\040\065\065\066\015\067" +
    "\071\073\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\014\144\016\143\017\142\063\153\064\137\065" +
    "\023\066\015\067\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\045" +
    "\161\046\062\047\060\050\056\051\054\052\053\053\052" +
    "\054\051\055\050\056\047\057\041\060\057\062\040\065" +
    "\065\066\015\067\071\073\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\045\167\046\062\047\060\050\056" +
    "\051\054\052\053\053\052\054\051\055\050\056\047\057" +
    "\041\060\057\062\040\065\065\066\015\067\071\073\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\045" +
    "\171\046\062\047\060\050\056\051\054\052\053\053\052" +
    "\054\051\055\050\056\047\057\041\060\057\062\040\065" +
    "\065\066\015\067\071\073\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\066\015\067\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\212\001\001\000\012\017\205\022" +
    "\203\066\015\067\204\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\017\211\066\015\067\204\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\011" +
    "\234\013\220\014\013\016\241\017\227\030\242\031\237" +
    "\032\243\033\223\034\217\035\235\036\215\037\225\041" +
    "\232\043\233\044\231\065\023\066\015\067\014\070\214" +
    "\071\236\072\244\073\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\045\304\046\062\047\060\050\056" +
    "\051\054\052\053\053\052\054\051\055\050\056\047\057" +
    "\041\060\057\062\040\065\065\066\015\067\071\073\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\045" +
    "\301\046\062\047\060\050\056\051\054\052\053\053\052" +
    "\054\051\055\050\056\047\057\041\060\057\062\040\065" +
    "\065\066\015\067\071\073\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\045\262\046\062\047\060\050\056\051\054\052\053" +
    "\053\052\054\051\055\050\056\047\057\041\060\057\062" +
    "\040\065\065\066\015\067\071\073\064\001\001\000\002" +
    "\001\001\000\044\045\254\046\062\047\060\050\056\051" +
    "\054\052\053\053\052\054\051\055\050\056\047\057\041" +
    "\060\057\062\040\065\065\066\015\067\071\073\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\011\234\013\220\014\013\016\241\017\227\030\253" +
    "\031\237\032\243\033\223\034\217\035\235\036\215\037" +
    "\225\041\232\043\233\044\231\065\023\066\015\067\014" +
    "\070\214\071\236\072\244\073\224\001\001\000\010\017" +
    "\247\066\015\067\204\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\045\251" +
    "\046\062\047\060\050\056\051\054\052\053\053\052\054" +
    "\051\055\050\056\047\057\041\060\057\062\040\065\065" +
    "\066\015\067\071\073\064\001\001\000\004\032\252\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\255" +
    "\001\001\000\004\040\257\001\001\000\006\032\261\037" +
    "\260\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\042\265\057\264\001" +
    "\001\000\002\001\001\000\044\045\267\046\062\047\060" +
    "\050\056\051\054\052\053\053\052\054\051\055\050\056" +
    "\047\057\041\060\057\062\040\065\065\066\015\067\071" +
    "\073\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\011\234\013\220\014\013\016\241\017\227\031\271" +
    "\032\243\033\223\034\217\035\235\036\215\037\225\041" +
    "\232\043\233\044\231\065\023\066\015\067\014\070\214" +
    "\071\236\072\244\073\224\001\001\000\002\001\001\000" +
    "\056\011\234\013\220\014\013\016\241\017\227\031\273" +
    "\032\243\033\223\034\217\035\235\036\215\037\225\041" +
    "\232\043\233\044\231\065\023\066\015\067\014\070\214" +
    "\071\236\072\244\073\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\045\276\046\062\047\060\050\056" +
    "\051\054\052\053\053\052\054\051\055\050\056\047\057" +
    "\041\060\057\062\040\065\065\066\015\067\071\073\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\305\001\001\000\002\001\001\000\044\045" +
    "\307\046\062\047\060\050\056\051\054\052\053\053\052" +
    "\054\051\055\050\056\047\057\041\060\057\062\040\065" +
    "\065\066\015\067\071\073\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\315\001\001\000\032\011\234\013\320\014\013" +
    "\016\241\017\012\020\322\025\321\026\316\027\317\065" +
    "\023\066\015\067\014\001\001\000\002\001\001\000\032" +
    "\011\234\013\320\014\013\016\241\017\012\020\322\025" +
    "\327\026\316\027\317\065\023\066\015\067\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\324\001\001\000\004\032\325" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\337\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SyntacticalAnalyser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SyntacticalAnalyser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SyntacticalAnalyser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    return analyser.next_token();

    }


    private LexicalAnalyser analyser = (LexicalAnalyser) getScanner();

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SyntacticalAnalyser$actions {


  private final SyntacticalAnalyser parser;

  /** Constructor */
  CUP$SyntacticalAnalyser$actions(SyntacticalAnalyser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SyntacticalAnalyser$do_action_part00000000(
    int                        CUP$SyntacticalAnalyser$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticalAnalyser$parser,
    java.util.Stack            CUP$SyntacticalAnalyser$stack,
    int                        CUP$SyntacticalAnalyser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SyntacticalAnalyser$result;

      /* select the action based on the action number */
      switch (CUP$SyntacticalAnalyser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= ImportList DeclarationList 
            {
              ProgramNode RESULT =null;
		List<String> imports = (List<String>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		DeclarationNode declarations = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ProgramNode(declarations, imports); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Program",0, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		RESULT = start_val;
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$SyntacticalAnalyser$parser.done_parsing();
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ImportList ::= ImportList Import 
            {
              List<String> RESULT =null;
		List<String> imports = (List<String>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		String file = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 imports.add(file); RESULT = imports; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ImportList",1, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ImportList ::= 
            {
              List<String> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ImportList",1, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Import ::= IMPORT FilePath END 
            {
              String RESULT =null;
		String path = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = path; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Import",2, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FilePath ::= FilePath DIV Filename 
            {
              String RESULT =null;
		String path = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		String filename = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = path + "/" + filename; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FilePath",3, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FilePath ::= Filename 
            {
              String RESULT =null;
		String filename = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = filename; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FilePath",3, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Filename ::= IDENTIFIER 
            {
              String RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = name; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Filename",4, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Filename ::= GLOBAL 
            {
              String RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = name; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Filename",4, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Filename ::= TYPE 
            {
              String RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = name; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Filename",4, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DeclarationList ::= Declaration DeclarationList 
            {
              DeclarationNode RESULT =null;
		DeclarationNode declaration = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		DeclarationNode declarations = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration.linkedTo(declarations); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("DeclarationList",5, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DeclarationList ::= 
            {
              DeclarationNode RESULT =null;
		 RESULT = null; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("DeclarationList",5, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Declaration ::= GlobalVarConstDeclaration 
            {
              DeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration",6, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Declaration ::= FunctionDeclaration 
            {
              DeclarationNode RESULT =null;
		FunctionDeclarationNode declaration = (FunctionDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration",6, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Declaration ::= ClassDeclaration 
            {
              DeclarationNode RESULT =null;
		ClassDeclarationNode declaration = (ClassDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration",6, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // GlobalVarConstDeclaration ::= VarDeclaration 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalVarConstDeclaration",8, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // GlobalVarConstDeclaration ::= GlobalConstDeclaration END 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalVarConstDeclaration",8, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VarConstDeclaration ::= VarDeclaration 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarConstDeclaration",9, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarConstDeclaration ::= LocalConstDeclaration END 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarConstDeclaration",9, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarDeclaration ::= BaseVarDeclaration END 
            {
              VarDeclarationNode RESULT =null;
		Name declaration = (Name)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new VarDeclarationNode(declaration); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclaration",7, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarDeclaration ::= VarInitDeclaration END 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclaration",7, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BaseVarDeclaration ::= Type IDENTIFIER 
            {
              Name RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new Name(id, type); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("BaseVarDeclaration",13, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarInitDeclaration ::= BaseVarDeclaration ASSIGNMENT Expression 
            {
              VarDeclarationNode RESULT =null;
		Name name = (Name)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		ExpressionNode initialValue = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new VarDeclarationNode(name, initialValue); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarInitDeclaration",10, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VarInitDeclaration ::= ConstructorCallExpression IDENTIFIER 
            {
              VarDeclarationNode RESULT =null;
		ConstructorCallExpressionNode constructor = (ConstructorCallExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = VarDeclarationNode.fromConstructor(constructor, id); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarInitDeclaration",10, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // GlobalConstDeclaration ::= CONST Type GLOBAL ASSIGNMENT Expression 
            {
              VarDeclarationNode RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		ExpressionNode initialValue = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new VarDeclarationNode(new Name(id, type), initialValue, true); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalConstDeclaration",11, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // GlobalConstDeclaration ::= CONST ConstructorCallExpression GLOBAL 
            {
              VarDeclarationNode RESULT =null;
		ConstructorCallExpressionNode constructor = (ConstructorCallExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = VarDeclarationNode.fromConstructor(constructor, id).constant(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalConstDeclaration",11, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LocalConstDeclaration ::= CONST VarInitDeclaration 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration.constant(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("LocalConstDeclaration",12, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FunctionDeclaration ::= BaseVarDeclaration FunctionParameters BlockStatement 
            {
              FunctionDeclarationNode RESULT =null;
		Name name = (Name)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		List<Name> parameters = (List<Name>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		BlockStatementNode block = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionDeclarationNode(name, parameters, block); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionDeclaration",14, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FunctionParameters ::= PARENTH_L PARENTH_R 
            {
              List<Name> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionParameters",15, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FunctionParameters ::= PARENTH_L ParameterList PARENTH_R 
            {
              List<Name> RESULT =null;
		List<Name> parameters = (List<Name>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = parameters; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionParameters",15, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ParameterList ::= BaseVarDeclaration 
            {
              List<Name> RESULT =null;
		Name parameter = (Name)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ArrayList<>(Collections.singletonList(parameter)); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ParameterList",16, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ParameterList ::= ParameterList COMMA BaseVarDeclaration 
            {
              List<Name> RESULT =null;
		List<Name> parameters = (List<Name>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		Name parameter = (Name)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 parameters.add(parameter); RESULT = parameters; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ParameterList",16, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassDeclaration ::= CLASS TypeName ClassBlock 
            {
              ClassDeclarationNode RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		DeclarationNode block = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ClassDeclarationNode(name, block); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",17, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassBlock ::= CURLY_L ClassElementList CURLY_R 
            {
              DeclarationNode RESULT =null;
		DeclarationNode contents = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = contents; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassBlock",18, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ClassElementList ::= ClassElement ClassElementList 
            {
              DeclarationNode RESULT =null;
		DeclarationNode element = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		DeclarationNode elements = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = element.linkedTo(elements); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElementList",19, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ClassElementList ::= 
            {
              DeclarationNode RESULT =null;
		 RESULT = null; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElementList",19, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ClassElement ::= VarConstDeclaration 
            {
              DeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement",20, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ClassElement ::= ConstructorDeclaration 
            {
              DeclarationNode RESULT =null;
		ConstructorDeclarationNode declaration = (ConstructorDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement",20, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ClassElement ::= FunctionDeclaration 
            {
              DeclarationNode RESULT =null;
		FunctionDeclarationNode declaration = (FunctionDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement",20, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ConstructorDeclaration ::= CONSTRUCTOR FunctionParameters BlockStatement 
            {
              ConstructorDeclarationNode RESULT =null;
		List<Name> parameters = (List<Name>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		BlockStatementNode block = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ConstructorDeclarationNode(parameters, block); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstructorDeclaration",21, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // StatementList ::= Statement StatementList 
            {
              StatementNode RESULT =null;
		StatementNode statement = (StatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		StatementNode statements = (StatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement.linkedTo(statements); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("StatementList",22, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // StatementList ::= 
            {
              StatementNode RESULT =null;
		 RESULT = null; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("StatementList",22, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Statement ::= VarDeclarationStatement 
            {
              StatementNode RESULT =null;
		VarDeclarationStatementNode statement = (VarDeclarationStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",23, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Statement ::= AssignmentStatement 
            {
              StatementNode RESULT =null;
		AssignmentStatementNode statement = (AssignmentStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",23, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Statement ::= FunctionCallStatement 
            {
              StatementNode RESULT =null;
		FunctionCallStatementNode statement = (FunctionCallStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",23, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Statement ::= ReturnStatement 
            {
              StatementNode RESULT =null;
		ReturnStatementNode statement = (ReturnStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",23, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Statement ::= IfElseStatement 
            {
              StatementNode RESULT =null;
		IfElseStatementNode statement = (IfElseStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",23, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Statement ::= SwitchStatement 
            {
              StatementNode RESULT =null;
		SwitchStatementNode statement = (SwitchStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",23, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Statement ::= WhileStatement 
            {
              StatementNode RESULT =null;
		WhileStatementNode statement = (WhileStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",23, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Statement ::= ForStatement 
            {
              StatementNode RESULT =null;
		ForStatementNode statement = (ForStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",23, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Statement ::= BlockStatement 
            {
              StatementNode RESULT =null;
		BlockStatementNode statement = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",23, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BlockStatement ::= CURLY_L StatementList CURLY_R 
            {
              BlockStatementNode RESULT =null;
		StatementNode root = (StatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new BlockStatementNode(root); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("BlockStatement",24, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VarDeclarationStatement ::= VarConstDeclaration 
            {
              VarDeclarationStatementNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration.asStatement(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclarationStatement",25, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // AssignmentStatement ::= Designator ASSIGNMENT Expression END 
            {
              AssignmentStatementNode RESULT =null;
		Designator designator = (Designator)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		ExpressionNode expression = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new AssignmentStatementNode(designator, expression); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AssignmentStatement",26, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ReturnStatement ::= RETURN END 
            {
              ReturnStatementNode RESULT =null;
		 RESULT = new ReturnStatementNode(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",28, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ReturnStatement ::= RETURN Expression END 
            {
              ReturnStatementNode RESULT =null;
		ExpressionNode expression = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new ReturnStatementNode(expression); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",28, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IfElseStatement ::= IF Expression BlockStatement ElsePartStatement 
            {
              IfElseStatementNode RESULT =null;
		ExpressionNode condition = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		BlockStatementNode ifBlock = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		StatementNode elsePart = (StatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new IfElseStatementNode(condition, ifBlock, elsePart); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("IfElseStatement",29, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ElsePartStatement ::= ELSE BlockStatement 
            {
              StatementNode RESULT =null;
		BlockStatementNode elseBlock = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = elseBlock; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ElsePartStatement",30, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ElsePartStatement ::= ELSE IfElseStatement 
            {
              StatementNode RESULT =null;
		IfElseStatementNode ifElse = (IfElseStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = ifElse; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ElsePartStatement",30, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ElsePartStatement ::= 
            {
              StatementNode RESULT =null;
		 RESULT = null; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ElsePartStatement",30, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SwitchStatement ::= SWITCH Expression CURLY_L SwitchCasesStatement CURLY_R 
            {
              SwitchStatementNode RESULT =null;
		ExpressionNode expression = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		Map<ExpressionNode,StatementNode> cases = (Map<ExpressionNode,StatementNode>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new SwitchStatementNode(expression, cases); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("SwitchStatement",31, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SwitchCasesStatement ::= ConstantExpression ARROW Statement 
            {
              Map<ExpressionNode,StatementNode> RESULT =null;
		ConstantExpressionNode expression = (ConstantExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		StatementNode statement = (StatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new HashMap<>(Collections.singletonMap(expression, statement)); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("SwitchCasesStatement",32, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SwitchCasesStatement ::= SwitchCasesStatement Expression ARROW Statement 
            {
              Map<ExpressionNode,StatementNode> RESULT =null;
		Map<ExpressionNode,StatementNode> cases = (Map<ExpressionNode,StatementNode>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		ExpressionNode expression = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		StatementNode statement = (StatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 cases.put(expression, statement); RESULT = cases; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("SwitchCasesStatement",32, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // WhileStatement ::= WHILE Expression BlockStatement 
            {
              WhileStatementNode RESULT =null;
		ExpressionNode condition = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		BlockStatementNode whileBlock = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new WhileStatementNode(condition, whileBlock); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("WhileStatement",33, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ForStatement ::= FOR BaseVarDeclaration IN Expression BlockStatement 
            {
              ForStatementNode RESULT =null;
		Name variable = (Name)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		ExpressionNode iterable = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		BlockStatementNode forBlock = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ForStatementNode(variable, iterable, forBlock); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ForStatement",34, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expression ::= ListConstructorExpression 
            {
              ExpressionNode RESULT =null;
		ListConstructorExpressionNode expression = (ListConstructorExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = expression; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression",35, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expression ::= AnonymousObjectConstructorExpression 
            {
              ExpressionNode RESULT =null;
		AnonymousObjectConstructorExpressionNode expression = (AnonymousObjectConstructorExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = expression; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression",35, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expression ::= ConstructorCallExpression 
            {
              ExpressionNode RESULT =null;
		ConstructorCallExpressionNode expression = (ConstructorCallExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = expression; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression",35, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expression ::= Expression0 
            {
              ExpressionNode RESULT =null;
		ExpressionNode expression = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = expression; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression",35, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expression8 ::= ConstantExpression 
            {
              ExpressionNode RESULT =null;
		ConstantExpressionNode first = (ConstantExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = first; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression8",44, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expression8 ::= DesignableExpression 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = first; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression8",44, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expression8 ::= PARENTH_L Expression0 PARENTH_R 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = first; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression8",44, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expression7 ::= PLUS Expression7 
            {
              ExpressionNode RESULT =null;
		String plus = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionCallExpressionNode(new PointExpressionNode(first,"_plus")
                , new ArrayList<>()); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression7",43, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expression7 ::= MINUS Expression7 
            {
              ExpressionNode RESULT =null;
		String minus = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionCallExpressionNode(new PointExpressionNode(first,"_minus")
                , new ArrayList<>()); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression7",43, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expression7 ::= NOT Expression7 
            {
              ExpressionNode RESULT =null;
		String not = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionCallExpressionNode(new PointExpressionNode(first,"_not"),
                new ArrayList<>()); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression7",43, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expression7 ::= Expression8 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = first; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression7",43, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expression6 ::= Expression6 MULT Expression7 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		String mult = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionCallExpressionNode(new PointExpressionNode(first,"_mult"),
                                new ArrayList<>(Collections.singletonList(last))); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression6",42, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expression6 ::= Expression6 DIV Expression7 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		String div = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionCallExpressionNode(new PointExpressionNode(first,"_div"),
                                                new ArrayList<>(Collections.singletonList(last))); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression6",42, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expression6 ::= Expression6 MOD Expression7 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		String mod = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionCallExpressionNode(new PointExpressionNode(first,"_mod"),
                                                new ArrayList<>(Collections.singletonList(last))); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression6",42, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expression6 ::= Expression7 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = first; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression6",42, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expression5 ::= Expression5 PLUS Expression6 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		String plus = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionCallExpressionNode(new PointExpressionNode(first,"_plus"),
                                                new ArrayList<>(Collections.singletonList(last))); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression5",41, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expression5 ::= Expression5 MINUS Expression6 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		String minus = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionCallExpressionNode(new PointExpressionNode(first,"_minus"),
                                                new ArrayList<>(Collections.singletonList(last))); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression5",41, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expression5 ::= Expression6 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = first; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression5",41, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expression4 ::= Expression4 GT Expression5 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		String gt = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionCallExpressionNode(new PointExpressionNode(first,"_gt"),
                                                new ArrayList<>(Collections.singletonList(last))); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression4",40, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expression4 ::= Expression4 GE Expression5 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		String ge = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionCallExpressionNode(new PointExpressionNode(first,"_ge"),
                                                new ArrayList<>(Collections.singletonList(last))); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression4",40, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expression4 ::= Expression4 LT Expression5 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		String lt = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionCallExpressionNode(new PointExpressionNode(first,"_lt"),
                                                new ArrayList<>(Collections.singletonList(last))); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression4",40, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expression4 ::= Expression4 LE Expression5 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		String le = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionCallExpressionNode(new PointExpressionNode(first,"_le"),
                                                new ArrayList<>(Collections.singletonList(last))); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression4",40, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expression4 ::= Expression5 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = first; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression4",40, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expression3 ::= Expression3 EQUALS Expression4 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		String equals = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionCallExpressionNode(new PointExpressionNode(first,"_equals"),
                                                new ArrayList<>(Collections.singletonList(last))); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression3",39, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expression3 ::= Expression3 NEQ Expression4 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		String neq = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionCallExpressionNode(new PointExpressionNode(first,"_neq"),
                                                new ArrayList<>(Collections.singletonList(last))); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression3",39, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expression3 ::= Expression3 IDENTITY Expression4 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		String identity = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionCallExpressionNode(new PointExpressionNode(first,"_id"),
                                                new ArrayList<>(Collections.singletonList(last))); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression3",39, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expression3 ::= Expression4 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = first; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression3",39, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expression2 ::= Expression2 AND Expression3 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		String and = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionCallExpressionNode(new PointExpressionNode(first,"_and"),
                                                new ArrayList<>(Collections.singletonList(last))); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression2",38, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expression2 ::= Expression3 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = first; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression2",38, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expression1 ::= Expression1 OR Expression2 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		String or = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionCallExpressionNode(new PointExpressionNode(first,"_or"),
                                                new ArrayList<>(Collections.singletonList(last))); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression1",37, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expression1 ::= Expression2 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = first; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression1",37, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expression0 ::= Expression0 ELLIPSIS Expression1 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		String ellipsis = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionCallExpressionNode(new PointExpressionNode(first,"_to"),
                                                new ArrayList<>(Collections.singletonList(last))); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression0",36, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Expression0 ::= Expression1 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = first; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression0",36, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ConstantExpression ::= INT 
            {
              ConstantExpressionNode RESULT =null;
		String n = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = ConstantExpressionNode.fromInt(n); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression",45, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ConstantExpression ::= REAL 
            {
              ConstantExpressionNode RESULT =null;
		String x = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = ConstantExpressionNode.fromFloat(x); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression",45, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ConstantExpression ::= TRUE 
            {
              ConstantExpressionNode RESULT =null;
		String t = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = ConstantExpressionNode.fromBoolean(t); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression",45, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ConstantExpression ::= FALSE 
            {
              ConstantExpressionNode RESULT =null;
		String f = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = ConstantExpressionNode.fromBoolean(f); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression",45, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ConstantExpression ::= CHAR 
            {
              ConstantExpressionNode RESULT =null;
		String c = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = ConstantExpressionNode.fromChar(c); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression",45, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ConstantExpression ::= NOTHING 
            {
              ConstantExpressionNode RESULT =null;
		 RESULT = ConstantExpressionNode.ofNothing(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression",45, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ConstantExpression ::= NULL 
            {
              ConstantExpressionNode RESULT =null;
		 RESULT = ConstantExpressionNode.ofNull(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression",45, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ConstantExpression ::= UNDERSCORE 
            {
              ConstantExpressionNode RESULT =null;
		 RESULT = ConstantExpressionNode.ofNull(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression",45, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ListConstructorExpression ::= STRING 
            {
              ListConstructorExpressionNode RESULT =null;
		String str = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = ListConstructorExpressionNode.fromString(str); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListConstructorExpression",46, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ListConstructorExpression ::= SQUARE_L SQUARE_R 
            {
              ListConstructorExpressionNode RESULT =null;
		 RESULT = new ListConstructorExpressionNode(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListConstructorExpression",46, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ListConstructorExpression ::= SQUARE_L ListElements SQUARE_R 
            {
              ListConstructorExpressionNode RESULT =null;
		List<ExpressionNode> elements = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new ListConstructorExpressionNode(elements); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListConstructorExpression",46, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ListElements ::= Expression 
            {
              List<ExpressionNode> RESULT =null;
		ExpressionNode element = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ArrayList<>(Collections.singletonList(element)); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListElements",47, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ListElements ::= ListElements COMMA Expression 
            {
              List<ExpressionNode> RESULT =null;
		List<ExpressionNode> elements = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		ExpressionNode element = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 elements.add(element); RESULT = elements; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListElements",47, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // AnonymousObjectConstructorExpression ::= CURLY_L CURLY_R 
            {
              AnonymousObjectConstructorExpressionNode RESULT =null;
		 RESULT = new AnonymousObjectConstructorExpressionNode(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectConstructorExpression",48, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // AnonymousObjectConstructorExpression ::= CURLY_L AnonymousObjectFields CURLY_R 
            {
              AnonymousObjectConstructorExpressionNode RESULT =null;
		VarDeclarationNode fields = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new AnonymousObjectConstructorExpressionNode(fields); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectConstructorExpression",48, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // AnonymousObjectFields ::= AnonymousObjectField 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode field = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = field; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectFields",49, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // AnonymousObjectFields ::= AnonymousObjectField COMMA AnonymousObjectFields 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode field = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		VarDeclarationNode fields = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 field.linkedTo(fields); RESULT = field; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectFields",49, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // AnonymousObjectField ::= VarInitDeclaration 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode field = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = field; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectField",50, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // AnonymousObjectField ::= LocalConstDeclaration 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode field = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = field; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectField",50, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ConstructorCallExpression ::= Type Arguments 
            {
              ConstructorCallExpressionNode RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		List<ExpressionNode> arguments = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ConstructorCallExpressionNode(type, arguments); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstructorCallExpression",51, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Type ::= TypeName 
            {
              Type RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new Type(name); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Type",53, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Type ::= TypeName LT Type GT 
            {
              Type RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		Type param = (Type)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new Type(name, param); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Type",53, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // TypeName ::= TYPE 
            {
              String RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = name; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("TypeName",52, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // TypeName ::= GLOBAL 
            {
              String RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = name; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("TypeName",52, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Designator ::= IDENTIFIER 
            {
              Designator RESULT =null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Designator",54, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Designator ::= ArrayAccess 
            {
              Designator RESULT =null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Designator",54, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Designator ::= FieldAccess 
            {
              Designator RESULT =null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Designator",54, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ArrayAccess ::= DesignableExpression SQUARE_L Expression SQUARE_R 
            {
              ExpressionNode RESULT =null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ArrayAccess",55, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // FieldAccess ::= DesignableExpression POINT IDENTIFIER 
            {
              ExpressionNode RESULT =null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FieldAccess",56, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // DesignableExpression ::= IDENTIFIER 
            {
              ExpressionNode RESULT =null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("DesignableExpression",57, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Arguments ::= PARENTH_L PARENTH_R 
            {
              List<ExpressionNode> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Arguments",58, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Arguments ::= PARENTH_L ArgumentList PARENTH_R 
            {
              List<ExpressionNode> RESULT =null;
		List<ExpressionNode> arguments = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = arguments; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Arguments",58, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ArgumentList ::= Expression 
            {
              List<ExpressionNode> RESULT =null;
		ExpressionNode argument = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ArrayList<>(Collections.singletonList(argument)); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ArgumentList",59, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ArgumentList ::= ArgumentList COMMA Expression 
            {
              List<ExpressionNode> RESULT =null;
		List<ExpressionNode> arguments = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		ExpressionNode argument = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 arguments.add(argument); RESULT = arguments; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ArgumentList",59, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SyntacticalAnalyser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SyntacticalAnalyser$do_action(
    int                        CUP$SyntacticalAnalyser$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticalAnalyser$parser,
    java.util.Stack            CUP$SyntacticalAnalyser$stack,
    int                        CUP$SyntacticalAnalyser$top)
    throws java.lang.Exception
    {
              return CUP$SyntacticalAnalyser$do_action_part00000000(
                               CUP$SyntacticalAnalyser$act_num,
                               CUP$SyntacticalAnalyser$parser,
                               CUP$SyntacticalAnalyser$stack,
                               CUP$SyntacticalAnalyser$top);
    }
}

