
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Thu Apr 23 23:02:58 CEST 2020
//----------------------------------------------------

package syntactical;

import java_cup.runtime.*;
import lexical.LexicalAnalyser;
import lexical.LexicalUnit;
import syntactical.ast.*;
import error.SyntacticalException;
import java.util.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Thu Apr 23 23:02:58 CEST 2020
  */
public class SyntacticalAnalyser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SyntacticalAnalyser() {super();}

  /** Constructor which sets the default scanner. */
  public SyntacticalAnalyser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SyntacticalAnalyser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\005\000\002\005\005" +
    "\000\002\005\003\000\002\006\004\000\002\006\002\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\011\003\000\002\011\004\000\002\012\003\000\002\012" +
    "\004\000\002\010\004\000\002\010\004\000\002\016\004" +
    "\000\002\013\005\000\002\014\007\000\002\015\004\000" +
    "\002\017\005\000\002\020\004\000\002\020\005\000\002" +
    "\021\003\000\002\021\005\000\002\022\005\000\002\023" +
    "\005\000\002\024\004\000\002\024\002\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\026\005\000" +
    "\002\027\004\000\002\027\002\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\031" +
    "\005\000\002\032\003\000\002\033\006\000\002\034\005" +
    "\000\002\035\004\000\002\035\005\000\002\036\003\000" +
    "\002\036\005\000\002\037\006\000\002\040\004\000\002" +
    "\040\004\000\002\040\002\000\002\041\007\000\002\042" +
    "\005\000\002\042\006\000\002\043\003\000\002\043\003" +
    "\000\002\047\003\000\002\047\006\000\002\044\003\000" +
    "\002\045\003\000\002\046\003\000\002\050\003\000\002" +
    "\050\003\000\002\050\003\000\002\051\006\000\002\052" +
    "\005\000\002\053\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\014\002\ufffe\023\ufffe\024\ufffe\070\ufffe\071" +
    "\ufffe\001\002\000\004\002\163\001\002\000\014\002\ufff9" +
    "\023\025\024\024\070\021\071\023\001\002\000\004\070" +
    "\035\001\002\000\014\002\uffff\023\uffff\024\uffff\070\uffff" +
    "\071\uffff\001\002\000\004\067\161\001\002\000\012\002" +
    "\ufff9\023\025\024\024\070\021\001\002\000\012\002\ufff6" +
    "\023\ufff6\024\ufff6\070\ufff6\001\002\000\012\002\ufff5\023" +
    "\ufff5\024\ufff5\070\ufff5\001\002\000\004\002\001\001\002" +
    "\000\010\030\057\063\054\067\131\001\002\000\012\002" +
    "\ufff8\023\ufff8\024\ufff8\070\ufff8\001\002\000\010\055\153" +
    "\057\uffc7\070\uffc7\001\002\000\012\002\ufff7\023\ufff7\024" +
    "\ufff7\070\ufff7\001\002\000\012\034\uffc5\055\uffc5\057\uffc5" +
    "\070\uffc5\001\002\000\004\067\152\001\002\000\004\070" +
    "\146\001\002\000\004\070\021\001\002\000\004\070\021" +
    "\001\002\000\004\070\027\001\002\000\004\063\uffc3\001" +
    "\002\000\004\063\031\001\002\000\006\007\033\070\035" +
    "\001\002\000\014\031\uffc9\033\uffc9\034\uffc9\041\uffc9\067" +
    "\uffc9\001\002\000\016\030\uffc8\031\uffc8\033\uffc8\034\uffc8" +
    "\041\uffc8\067\uffc8\001\002\000\004\067\uffed\001\002\000" +
    "\020\030\uffc4\031\uffc4\033\uffc4\034\uffc4\041\uffc4\063\uffc4" +
    "\067\uffc4\001\002\000\004\034\037\001\002\000\012\023" +
    "\051\025\050\035\uffe3\070\021\001\002\000\012\002\uffe6" +
    "\023\uffe6\024\uffe6\070\uffe6\001\002\000\012\023\051\025" +
    "\050\035\uffe3\070\021\001\002\000\012\023\uffe1\025\uffe1" +
    "\035\uffe1\070\uffe1\001\002\000\016\007\ufff3\010\ufff3\023" +
    "\ufff3\025\ufff3\035\ufff3\070\ufff3\001\002\000\012\023\uffe2" +
    "\025\uffe2\035\uffe2\070\uffe2\001\002\000\004\067\143\001" +
    "\002\000\004\035\142\001\002\000\012\023\uffe0\025\uffe0" +
    "\035\uffe0\070\uffe0\001\002\000\004\030\057\001\002\000" +
    "\004\070\021\001\002\000\004\063\054\001\002\000\004" +
    "\067\uffec\001\002\000\006\007\033\070\035\001\002\000" +
    "\004\067\uffee\001\002\000\004\034\067\001\002\000\006" +
    "\031\062\070\021\001\002\000\006\031\064\041\063\001" +
    "\002\000\006\031\uffe8\041\uffe8\001\002\000\004\034\uffea" +
    "\001\002\000\004\070\021\001\002\000\004\034\uffe9\001" +
    "\002\000\006\031\uffe7\041\uffe7\001\002\000\012\023\uffdf" +
    "\025\uffdf\035\uffdf\070\uffdf\001\002\000\014\007\033\010" +
    "\101\023\051\035\uffdd\070\074\001\002\000\004\063\137" +
    "\001\002\000\014\007\uffdb\010\uffdb\023\uffdb\035\uffdb\070" +
    "\uffdb\001\002\000\014\007\uffd7\010\uffd7\023\uffd7\035\uffd7" +
    "\070\uffd7\001\002\000\014\007\uffdc\010\uffdc\023\uffdc\035" +
    "\uffdc\070\uffdc\001\002\000\016\030\uffc4\032\uffc4\040\uffc4" +
    "\055\uffc5\063\uffc4\070\uffc5\001\002\000\006\032\133\040" +
    "\132\001\002\000\012\030\uffc9\032\uffbd\040\uffbd\063\uffc2" +
    "\001\002\000\014\007\uffd9\010\uffd9\023\uffd9\035\uffd9\070" +
    "\uffd9\001\002\000\006\063\054\067\131\001\002\000\006" +
    "\007\033\070\035\001\002\000\014\007\uffda\010\uffda\023" +
    "\uffda\035\uffda\070\uffda\001\002\000\004\063\uffc1\001\002" +
    "\000\014\007\033\010\101\023\051\035\uffdd\070\074\001" +
    "\002\000\004\035\121\001\002\000\004\030\110\001\002" +
    "\000\004\063\uffc0\001\002\000\010\007\033\031\115\070" +
    "\035\001\002\000\004\067\112\001\002\000\014\007\uffd5" +
    "\010\uffd5\023\uffd5\035\uffd5\070\uffd5\001\002\000\006\031" +
    "\117\041\116\001\002\000\006\031\uffd2\041\uffd2\001\002" +
    "\000\004\067\uffd4\001\002\000\006\007\033\070\035\001" +
    "\002\000\004\067\uffd3\001\002\000\006\031\uffd1\041\uffd1" +
    "\001\002\000\024\002\uffd8\007\uffd8\010\uffd8\011\uffd8\023" +
    "\uffd8\024\uffd8\025\uffd8\035\uffd8\070\uffd8\001\002\000\004" +
    "\035\uffde\001\002\000\004\034\067\001\002\000\016\007" +
    "\uffcd\010\uffcd\011\125\023\uffcd\035\uffcd\070\uffcd\001\002" +
    "\000\006\010\101\034\067\001\002\000\014\007\uffd0\010" +
    "\uffd0\023\uffd0\035\uffd0\070\uffd0\001\002\000\014\007\uffcf" +
    "\010\uffcf\023\uffcf\035\uffcf\070\uffcf\001\002\000\014\007" +
    "\uffce\010\uffce\023\uffce\035\uffce\070\uffce\001\002\000\022" +
    "\002\ufff1\007\ufff1\010\ufff1\023\ufff1\024\ufff1\025\ufff1\035" +
    "\ufff1\070\ufff1\001\002\000\004\070\035\001\002\000\006" +
    "\007\033\070\035\001\002\000\004\033\135\001\002\000" +
    "\004\063\uffbf\001\002\000\004\063\uffbe\001\002\000\006" +
    "\007\033\070\035\001\002\000\004\067\141\001\002\000" +
    "\014\007\uffd6\010\uffd6\023\uffd6\035\uffd6\070\uffd6\001\002" +
    "\000\012\002\uffe5\023\uffe5\024\uffe5\070\uffe5\001\002\000" +
    "\016\007\ufff2\010\ufff2\023\ufff2\025\ufff2\035\ufff2\070\ufff2" +
    "\001\002\000\004\035\uffe4\001\002\000\006\051\147\067" +
    "\150\001\002\000\006\051\ufffb\067\ufffb\001\002\000\004" +
    "\070\151\001\002\000\014\002\ufffd\023\ufffd\024\ufffd\070" +
    "\ufffd\071\ufffd\001\002\000\006\051\ufffc\067\ufffc\001\002" +
    "\000\022\002\ufff0\007\ufff0\010\ufff0\023\ufff0\024\ufff0\025" +
    "\ufff0\035\ufff0\070\ufff0\001\002\000\004\070\021\001\002" +
    "\000\004\057\155\001\002\000\006\057\uffc6\070\uffc6\001" +
    "\002\000\004\034\067\001\002\000\016\002\uffeb\023\uffeb" +
    "\024\uffeb\025\uffeb\035\uffeb\070\uffeb\001\002\000\004\002" +
    "\ufffa\001\002\000\012\002\ufff4\023\ufff4\024\ufff4\070\ufff4" +
    "\001\002\000\014\030\uffef\031\uffef\041\uffef\063\uffef\067" +
    "\uffef\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\032\004\006\006\013\007\010\010\012\011\015" +
    "\013\021\014\007\016\014\017\017\022\011\044\016\047" +
    "\005\001\001\000\004\045\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\006\157\007\010\010\012\011" +
    "\015\013\021\014\007\016\014\017\017\022\011\044\016" +
    "\047\005\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\144\001\001\000\004\044\035" +
    "\001\001\000\006\044\016\047\025\001\001\000\004\046" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\043\033\045\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\037" +
    "\001\001\000\030\010\042\012\043\013\021\015\044\016" +
    "\014\017\046\024\045\025\040\026\041\044\016\047\005" +
    "\001\001\000\002\001\001\000\030\010\042\012\043\013" +
    "\021\015\044\016\014\017\046\024\143\025\040\026\041" +
    "\044\016\047\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\055\001\001\000\012\013" +
    "\052\016\051\044\016\047\005\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\043\054\045\031\001\001\000" +
    "\002\001\001\000\004\031\065\001\001\000\012\016\060" +
    "\021\057\044\016\047\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\064\044\016" +
    "\047\005\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\010\042\012\071\013\021\015\044" +
    "\016\077\027\104\030\103\032\072\033\070\034\101\037" +
    "\076\043\105\044\016\045\075\047\005\050\067\051\102" +
    "\052\106\053\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\043\122\045\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\010\042\012\071\013" +
    "\021\015\044\016\077\027\121\030\103\032\072\033\070" +
    "\034\101\037\076\043\105\044\016\045\075\047\005\050" +
    "\067\051\102\052\106\053\074\001\001\000\002\001\001" +
    "\000\004\035\110\001\001\000\002\001\001\000\010\036" +
    "\112\043\113\045\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\043\117\045\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\123\001\001\000\004\040\125\001\001\000\006" +
    "\031\126\037\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\045\135" +
    "\001\001\000\006\043\133\045\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\043\137" +
    "\045\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\044\016" +
    "\047\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SyntacticalAnalyser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SyntacticalAnalyser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SyntacticalAnalyser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    return analyser.next_token();

    }


    private LexicalAnalyser analyser = (LexicalAnalyser) getScanner();

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SyntacticalAnalyser$actions {


  private final SyntacticalAnalyser parser;

  /** Constructor */
  CUP$SyntacticalAnalyser$actions(SyntacticalAnalyser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SyntacticalAnalyser$do_action_part00000000(
    int                        CUP$SyntacticalAnalyser$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticalAnalyser$parser,
    java.util.Stack            CUP$SyntacticalAnalyser$stack,
    int                        CUP$SyntacticalAnalyser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SyntacticalAnalyser$result;

      /* select the action based on the action number */
      switch (CUP$SyntacticalAnalyser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= ImportList DeclarationList 
            {
              ProgramNode RESULT =null;
		List<String> imports = (List<String>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		DeclarationNode declarations = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ProgramNode(declarations, imports); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Program",0, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		RESULT = start_val;
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$SyntacticalAnalyser$parser.done_parsing();
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ImportList ::= ImportList Import 
            {
              List<String> RESULT =null;
		List<String> imports = (List<String>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		String file = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 imports.add(file); RESULT = imports; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ImportList",1, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ImportList ::= 
            {
              List<String> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ImportList",1, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Import ::= IMPORT FilePath END 
            {
              String RESULT =null;
		String path = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = path; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Import",2, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FilePath ::= FilePath DIV IDENTIFIER 
            {
              String RESULT =null;
		String path = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		String filename = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = path + "/" + filename; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FilePath",3, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FilePath ::= IDENTIFIER 
            {
              String RESULT =null;
		String filename = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = filename; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FilePath",3, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DeclarationList ::= Declaration DeclarationList 
            {
              DeclarationNode RESULT =null;
		DeclarationNode declaration = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		DeclarationNode declarations = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration.linkedTo(declarations); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("DeclarationList",4, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DeclarationList ::= 
            {
              DeclarationNode RESULT =null;
		 RESULT = null; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("DeclarationList",4, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Declaration ::= GlobalVarConstDeclaration 
            {
              DeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration",5, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Declaration ::= FunctionDeclaration 
            {
              DeclarationNode RESULT =null;
		FunctionDeclarationNode declaration = (FunctionDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration",5, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Declaration ::= ClassDeclaration 
            {
              DeclarationNode RESULT =null;
		ClassDeclarationNode declaration = (ClassDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration",5, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // GlobalVarConstDeclaration ::= VarDeclaration 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalVarConstDeclaration",7, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // GlobalVarConstDeclaration ::= GlobalConstDeclaration END 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalVarConstDeclaration",7, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VarConstDeclaration ::= VarDeclaration 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarConstDeclaration",8, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VarConstDeclaration ::= LocalConstDeclaration END 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarConstDeclaration",8, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VarDeclaration ::= BaseVarDeclaration END 
            {
              VarDeclarationNode RESULT =null;
		Name declaration = (Name)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new VarDeclarationNode(declaration); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclaration",6, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VarDeclaration ::= VarInitDeclaration END 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclaration",6, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BaseVarDeclaration ::= Type VarId 
            {
              Name RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new Name(id, type); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("BaseVarDeclaration",12, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarInitDeclaration ::= BaseVarDeclaration ASSIGNMENT Expression 
            {
              VarDeclarationNode RESULT =null;
		Name name = (Name)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		ExpressionNode initialValue = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new VarDeclarationNode(name, initialValue); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarInitDeclaration",9, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // GlobalConstDeclaration ::= CONST Type GlobalConstId ASSIGNMENT Expression 
            {
              VarDeclarationNode RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		ExpressionNode initialValue = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new VarDeclarationNode(new Name(id, type), initialValue, true, true); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalConstDeclaration",10, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LocalConstDeclaration ::= CONST VarInitDeclaration 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration.constant(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("LocalConstDeclaration",11, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FunctionDeclaration ::= BaseVarDeclaration FunctionParameters BlockStatement 
            {
              FunctionDeclarationNode RESULT =null;
		Name name = (Name)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		List<Name> parameters = (List<Name>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		BlockStatementNode block = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionDeclarationNode(name, parameters, block); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionDeclaration",13, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FunctionParameters ::= PARENTH_L PARENTH_R 
            {
              List<Name> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionParameters",14, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FunctionParameters ::= PARENTH_L ParameterList PARENTH_R 
            {
              List<Name> RESULT =null;
		List<Name> parameters = (List<Name>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = parameters; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionParameters",14, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ParameterList ::= BaseVarDeclaration 
            {
              List<Name> RESULT =null;
		Name parameter = (Name)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ArrayList<Name>() {{ add(parameter); }}; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ParameterList",15, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ParameterList ::= ParameterList COMMA BaseVarDeclaration 
            {
              List<Name> RESULT =null;
		List<Name> parameters = (List<Name>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		Name parameter = (Name)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 parameters.add(parameter); RESULT = parameters; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ParameterList",15, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ClassDeclaration ::= CLASS TypeName ClassBlock 
            {
              ClassDeclarationNode RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		DeclarationNode block = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ClassDeclarationNode(name, block); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",16, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassBlock ::= CURLY_L ClassElementList CURLY_R 
            {
              DeclarationNode RESULT =null;
		DeclarationNode contents = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = contents; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassBlock",17, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassElementList ::= ClassElement ClassElementList 
            {
              DeclarationNode RESULT =null;
		DeclarationNode element = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		DeclarationNode elements = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = element.linkedTo(elements); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElementList",18, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassElementList ::= 
            {
              DeclarationNode RESULT =null;
		 RESULT = null; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElementList",18, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClassElement ::= VarConstDeclaration 
            {
              DeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement",19, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassElement ::= ConstructorDeclaration 
            {
              DeclarationNode RESULT =null;
		ConstructorDeclarationNode declaration = (ConstructorDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement",19, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassElement ::= FunctionDeclaration 
            {
              DeclarationNode RESULT =null;
		FunctionDeclarationNode declaration = (FunctionDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement",19, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ConstructorDeclaration ::= CONSTRUCTOR FunctionParameters BlockStatement 
            {
              ConstructorDeclarationNode RESULT =null;
		List<Name> parameters = (List<Name>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		BlockStatementNode block = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ConstructorDeclarationNode(parameters, block); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstructorDeclaration",20, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // StatementList ::= Statement StatementList 
            {
              StatementNode RESULT =null;
		StatementNode statement = (StatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		StatementNode statements = (StatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement.linkedTo(statements); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("StatementList",21, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // StatementList ::= 
            {
              StatementNode RESULT =null;
		 RESULT = null; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("StatementList",21, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Statement ::= VarDeclarationStatement 
            {
              StatementNode RESULT =null;
		VarDeclarationStatementNode statement = (VarDeclarationStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",22, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Statement ::= AssignmentStatement 
            {
              StatementNode RESULT =null;
		AssignmentStatementNode statement = (AssignmentStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",22, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Statement ::= FunctionCallStatement 
            {
              StatementNode RESULT =null;
		FunctionCallStatementNode statement = (FunctionCallStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",22, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Statement ::= IfElseStatement 
            {
              StatementNode RESULT =null;
		IfElseStatementNode statement = (IfElseStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",22, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BlockStatement ::= CURLY_L StatementList CURLY_R 
            {
              BlockStatementNode RESULT =null;
		StatementNode root = (StatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new BlockStatementNode(root); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("BlockStatement",23, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VarDeclarationStatement ::= VarConstDeclaration 
            {
              VarDeclarationStatementNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration.asStatement(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclarationStatement",24, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // AssignmentStatement ::= Designator ASSIGNMENT Expression END 
            {
              AssignmentStatementNode RESULT =null;
		Designator designator = (Designator)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		ExpressionNode expression = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new AssignmentStatementNode(designator, expression); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AssignmentStatement",25, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FunctionCallStatement ::= Expression FunctionArguments END 
            {
              FunctionCallStatementNode RESULT =null;
		ExpressionNode function = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		List<ExpressionNode> arguments = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new FunctionCallStatementNode(function, arguments); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionCallStatement",26, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FunctionArguments ::= PARENTH_L PARENTH_R 
            {
              List<ExpressionNode> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionArguments",27, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FunctionArguments ::= PARENTH_L ArgumentList PARENTH_R 
            {
              List<ExpressionNode> RESULT =null;
		List<ExpressionNode> arguments = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = arguments; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionArguments",27, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ArgumentList ::= Expression 
            {
              List<ExpressionNode> RESULT =null;
		ExpressionNode argument = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ArrayList<ExpressionNode>() {{ add(argument); }}; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ArgumentList",28, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ArgumentList ::= ArgumentList COMMA Expression 
            {
              List<ExpressionNode> RESULT =null;
		List<ExpressionNode> arguments = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		ExpressionNode argument = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 arguments.add(argument); RESULT = arguments; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ArgumentList",28, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IfElseStatement ::= IF Expression BlockStatement ElsePartStatement 
            {
              IfElseStatementNode RESULT =null;
		ExpressionNode condition = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		BlockStatementNode ifBlock = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		StatementNode elsePart = (StatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new IfElseStatementNode(condition, ifBlock, elsePart); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("IfElseStatement",29, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ElsePartStatement ::= ELSE BlockStatement 
            {
              StatementNode RESULT =null;
		BlockStatementNode elseBlock = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = elseBlock; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ElsePartStatement",30, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ElsePartStatement ::= ELSE IfElseStatement 
            {
              StatementNode RESULT =null;
		IfElseStatementNode ifElse = (IfElseStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = ifElse; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ElsePartStatement",30, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ElsePartStatement ::= 
            {
              StatementNode RESULT =null;
		 RESULT = null; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ElsePartStatement",30, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SwitchStatement ::= SWITCH VarId CURLY_L SwitchCasesStatement CURLY_R 
            {
              SwitchStatementNode RESULT =null;
		String variable = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		StatementNode cases = (StatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new SwitchStatementNode(variable, cases); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("SwitchStatement",31, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SwitchCasesStatement ::= Expression ARROW BlockStatement 
            {
              StatementNode RESULT =null;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		BlockStatementNode block = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new HashMap<>() {{ add({exp,block}); }}; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("SwitchCasesStatement",32, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SwitchCasesStatement ::= SwitchCasesStatement Expression ARROW BlockStatement 
            {
              StatementNode RESULT =null;
		StatementNode cases = (StatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		BlockStatementNode block = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 cases.add({exp,block}); RESULT = cases; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("SwitchCasesStatement",32, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expression ::= VarId 
            {
              ExpressionNode RESULT =null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression",33, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expression ::= STRING 
            {
              ExpressionNode RESULT =null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression",33, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Type ::= TypeName 
            {
              Type RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new Type(name); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Type",37, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Type ::= TypeName LT Type GT 
            {
              Type RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		Type param = (Type)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new Type(name, param); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Type",37, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TypeName ::= IDENTIFIER 
            {
              String RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = id; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("TypeName",34, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VarId ::= IDENTIFIER 
            {
              String RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = id; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarId",35, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // GlobalConstId ::= IDENTIFIER 
            {
              String RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = id; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalConstId",36, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Designator ::= VarId 
            {
              Designator RESULT =null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Designator",38, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Designator ::= ArrayAccess 
            {
              Designator RESULT =null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Designator",38, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Designator ::= FieldAccess 
            {
              Designator RESULT =null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Designator",38, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ArrayAccess ::= DesignableExpression SQUARE_L Expression SQUARE_R 
            {
              ExpressionNode RESULT =null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ArrayAccess",39, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FieldAccess ::= DesignableExpression POINT VarId 
            {
              ExpressionNode RESULT =null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FieldAccess",40, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DesignableExpression ::= VarId 
            {
              ExpressionNode RESULT =null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("DesignableExpression",41, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SyntacticalAnalyser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SyntacticalAnalyser$do_action(
    int                        CUP$SyntacticalAnalyser$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticalAnalyser$parser,
    java.util.Stack            CUP$SyntacticalAnalyser$stack,
    int                        CUP$SyntacticalAnalyser$top)
    throws java.lang.Exception
    {
              return CUP$SyntacticalAnalyser$do_action_part00000000(
                               CUP$SyntacticalAnalyser$act_num,
                               CUP$SyntacticalAnalyser$parser,
                               CUP$SyntacticalAnalyser$stack,
                               CUP$SyntacticalAnalyser$top);
    }
}

