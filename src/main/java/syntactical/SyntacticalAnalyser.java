
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sat Apr 25 11:49:57 CEST 2020
//----------------------------------------------------

package syntactical;

import lexical.LexicalAnalyser;
import syntactical.ast.*;

import java.util.ArrayList;
import java.util.List;

/**
 * CUP v0.11b beta 20140220 generated parser.
 *
 * @version Sat Apr 25 11:49:57 CEST 2020
 */
public class SyntacticalAnalyser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SyntacticalAnalyser() {super();}

  /** Constructor which sets the default scanner. */
  public SyntacticalAnalyser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SyntacticalAnalyser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

    /**
     * Production table.
     */
    protected static final short _production_table[][] =
            unpackFromStrings(new String[]{
                    "\000\116\000\002\002\004\000\002\002\004\000\002\003" +
                            "\004\000\002\003\002\000\002\004\005\000\002\005\005" +
                            "\000\002\005\003\000\002\006\004\000\002\006\002\000" +
                            "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
                            "\011\003\000\002\011\004\000\002\012\003\000\002\012" +
                            "\004\000\002\010\004\000\002\010\004\000\002\016\004" +
                            "\000\002\013\005\000\002\014\007\000\002\015\004\000" +
                            "\002\017\005\000\002\020\004\000\002\020\005\000\002" +
                            "\021\003\000\002\021\005\000\002\022\005\000\002\023" +
                            "\005\000\002\024\004\000\002\024\002\000\002\025\003" +
                            "\000\002\025\003\000\002\025\003\000\002\026\005\000" +
                            "\002\027\004\000\002\027\002\000\002\030\003\000\002" +
                            "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
                            "\003\000\002\031\005\000\002\032\003\000\002\033\006" +
                            "\000\002\034\005\000\002\035\004\000\002\035\005\000" +
                            "\002\036\003\000\002\036\005\000\002\037\004\000\002" +
                            "\037\005\000\002\040\006\000\002\041\004\000\002\041" +
                            "\004\000\002\041\002\000\002\044\003\000\002\044\003" +
                            "\000\002\044\003\000\002\045\003\000\002\045\003\000" +
                            "\002\045\003\000\002\045\003\000\002\045\003\000\002" +
                            "\045\003\000\002\045\003\000\002\046\003\000\002\052" +
                            "\003\000\002\052\006\000\002\047\003\000\002\050\003" +
                            "\000\002\051\003\000\002\053\003\000\002\053\003\000" +
                            "\002\053\003\000\002\054\006\000\002\055\005\000\002" +
                            "\056\003"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[]{
                    "\000\177\000\014\002\ufffe\014\ufffe\015\ufffe\061\ufffe\062" +
                            "\ufffe\001\002\000\004\002\201\001\002\000\014\002\ufff9" +
                            "\014\025\015\024\061\020\062\023\001\002\000\004\061" +
                            "\151\001\002\000\014\002\uffff\014\uffff\015\uffff\061\uffff" +
                            "\062\uffff\001\002\000\004\060\177\001\002\000\012\002" +
                            "\ufff9\014\025\015\024\061\020\001\002\000\012\002\ufff6" +
                            "\014\ufff6\015\ufff6\061\ufff6\001\002\000\012\002\ufff5\014" +
                            "\ufff5\015\ufff5\061\ufff5\001\002\000\004\002\001\001\002" +
                            "\000\010\021\067\054\064\060\143\001\002\000\012\002" +
                            "\ufff8\014\ufff8\015\ufff8\061\ufff8\001\002\000\010\046\171" +
                            "\050\uffbe\061\uffbe\001\002\000\012\025\uffbc\046\uffbc\050" +
                            "\uffbc\061\uffbc\001\002\000\012\002\ufff7\014\ufff7\015\ufff7" +
                            "\061\ufff7\001\002\000\004\060\170\001\002\000\004\061" +
                            "\164\001\002\000\004\061\020\001\002\000\004\061\020" +
                            "\001\002\000\004\061\027\001\002\000\004\054\uffba\001" +
                            "\002\000\004\054\031\001\002\000\024\004\040\061\044" +
                            "\063\032\064\043\065\045\066\036\067\042\070\034\071" +
                            "\037\001\002\000\016\021\uffc6\022\uffc6\024\uffc6\025\uffc6" +
                            "\032\uffc6\060\uffc6\001\002\000\016\021\uffc7\022\uffc7\024" +
                            "\uffc7\025\uffc7\032\uffc7\060\uffc7\001\002\000\016\021\uffc1" +
                            "\022\uffc1\024\uffc1\025\uffc1\032\uffc1\060\uffc1\001\002\000" +
                            "\016\021\uffc8\022\uffc8\024\uffc8\025\uffc8\032\uffc8\060\uffc8" +
                            "\001\002\000\016\021\uffc4\022\uffc4\024\uffc4\025\uffc4\032" +
                            "\uffc4\060\uffc4\001\002\000\016\021\uffc0\022\uffc0\024\uffc0" +
                            "\025\uffc0\032\uffc0\060\uffc0\001\002\000\016\021\uffbf\022" +
                            "\uffbf\024\uffbf\025\uffbf\032\uffbf\060\uffbf\001\002\000\004" +
                            "\060\uffed\001\002\000\016\021\uffc3\022\uffc3\024\uffc3\025" +
                            "\uffc3\032\uffc3\060\uffc3\001\002\000\016\021\uffc5\022\uffc5" +
                            "\024\uffc5\025\uffc5\032\uffc5\060\uffc5\001\002\000\014\022" +
                            "\uffc9\024\uffc9\025\uffc9\032\uffc9\060\uffc9\001\002\000\016" +
                            "\021\uffc2\022\uffc2\024\uffc2\025\uffc2\032\uffc2\060\uffc2\001" +
                            "\002\000\004\025\047\001\002\000\012\014\061\016\060" +
                            "\026\uffe3\061\020\001\002\000\012\002\uffe6\014\uffe6\015" +
                            "\uffe6\061\uffe6\001\002\000\012\014\061\016\060\026\uffe3" +
                            "\061\020\001\002\000\012\014\uffe1\016\uffe1\026\uffe1\061" +
                            "\uffe1\001\002\000\036\004\ufff3\005\ufff3\013\ufff3\014\ufff3" +
                            "\016\ufff3\026\ufff3\061\ufff3\063\ufff3\064\ufff3\065\ufff3\066" +
                            "\ufff3\067\ufff3\070\ufff3\071\ufff3\001\002\000\012\014\uffe2" +
                            "\016\uffe2\026\uffe2\061\uffe2\001\002\000\004\060\161\001" +
                            "\002\000\004\026\160\001\002\000\012\014\uffe0\016\uffe0" +
                            "\026\uffe0\061\uffe0\001\002\000\004\021\067\001\002\000" +
                            "\004\061\020\001\002\000\004\054\064\001\002\000\004" +
                            "\060\uffec\001\002\000\024\004\040\061\044\063\032\064" +
                            "\043\065\045\066\036\067\042\070\034\071\037\001\002" +
                            "\000\004\060\uffee\001\002\000\004\025\077\001\002\000" +
                            "\006\022\072\061\020\001\002\000\006\022\074\032\073" +
                            "\001\002\000\006\022\uffe8\032\uffe8\001\002\000\004\025" +
                            "\uffea\001\002\000\004\061\020\001\002\000\004\025\uffe9" +
                            "\001\002\000\006\022\uffe7\032\uffe7\001\002\000\012\014" +
                            "\uffdf\016\uffdf\026\uffdf\061\uffdf\001\002\000\034\004\040" +
                            "\005\113\013\104\014\061\026\uffdd\061\105\063\032\064" +
                            "\043\065\045\066\036\067\042\070\034\071\037\001\002" +
                            "\000\004\054\155\001\002\000\034\004\uffd9\005\uffd9\013" +
                            "\uffd9\014\uffd9\026\uffd9\061\uffd9\063\uffd9\064\uffd9\065\uffd9" +
                            "\066\uffd9\067\uffd9\070\uffd9\071\uffd9\001\002\000\034\004" +
                            "\uffdb\005\uffdb\013\uffdb\014\uffdb\026\uffdb\061\uffdb\063\uffdb" +
                            "\064\uffdb\065\uffdb\066\uffdb\067\uffdb\070\uffdb\071\uffdb\001" +
                            "\002\000\034\004\uffd6\005\uffd6\013\uffd6\014\uffd6\026\uffd6" +
                            "\061\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6\070" +
                            "\uffd6\071\uffd6\001\002\000\026\004\040\060\153\061\044" +
                            "\063\032\064\043\065\045\066\036\067\042\070\034\071" +
                            "\037\001\002\000\016\021\uffc9\023\uffbb\031\uffbb\046\uffbc" +
                            "\054\uffbb\061\uffbc\001\002\000\034\004\uffdc\005\uffdc\013" +
                            "\uffdc\014\uffdc\026\uffdc\061\uffdc\063\uffdc\064\uffdc\065\uffdc" +
                            "\066\uffdc\067\uffdc\070\uffdc\071\uffdc\001\002\000\006\023" +
                            "\145\031\144\001\002\000\010\023\uffb4\031\uffb4\054\uffb9" +
                            "\001\002\000\034\004\uffd8\005\uffd8\013\uffd8\014\uffd8\026" +
                            "\uffd8\061\uffd8\063\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8" +
                            "\070\uffd8\071\uffd8\001\002\000\006\054\064\060\143\001" +
                            "\002\000\024\004\040\061\044\063\032\064\043\065\045" +
                            "\066\036\067\042\070\034\071\037\001\002\000\034\004" +
                            "\uffda\005\uffda\013\uffda\014\uffda\026\uffda\061\uffda\063\uffda" +
                            "\064\uffda\065\uffda\066\uffda\067\uffda\070\uffda\071\uffda\001" +
                            "\002\000\004\054\uffb8\001\002\000\034\004\040\005\113" +
                            "\013\104\014\061\026\uffdd\061\105\063\032\064\043\065" +
                            "\045\066\036\067\042\070\034\071\037\001\002\000\004" +
                            "\026\133\001\002\000\004\021\122\001\002\000\004\054" +
                            "\uffb7\001\002\000\026\004\040\022\127\061\044\063\032" +
                            "\064\043\065\045\066\036\067\042\070\034\071\037\001" +
                            "\002\000\004\060\124\001\002\000\034\004\uffd4\005\uffd4" +
                            "\013\uffd4\014\uffd4\026\uffd4\061\uffd4\063\uffd4\064\uffd4\065" +
                            "\uffd4\066\uffd4\067\uffd4\070\uffd4\071\uffd4\001\002\000\006" +
                            "\022\131\032\130\001\002\000\006\022\uffd1\032\uffd1\001" +
                            "\002\000\004\060\uffd3\001\002\000\024\004\040\061\044" +
                            "\063\032\064\043\065\045\066\036\067\042\070\034\071" +
                            "\037\001\002\000\004\060\uffd2\001\002\000\006\022\uffd0" +
                            "\032\uffd0\001\002\000\044\002\uffd7\004\uffd7\005\uffd7\006" +
                            "\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\026\uffd7\061\uffd7" +
                            "\063\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7\070\uffd7\071" +
                            "\uffd7\001\002\000\004\026\uffde\001\002\000\004\025\077" +
                            "\001\002\000\036\004\uffca\005\uffca\006\137\013\uffca\014" +
                            "\uffca\026\uffca\061\uffca\063\uffca\064\uffca\065\uffca\066\uffca" +
                            "\067\uffca\070\uffca\071\uffca\001\002\000\006\005\113\025" +
                            "\077\001\002\000\034\004\uffcd\005\uffcd\013\uffcd\014\uffcd" +
                            "\026\uffcd\061\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd\067" +
                            "\uffcd\070\uffcd\071\uffcd\001\002\000\034\004\uffcc\005\uffcc" +
                            "\013\uffcc\014\uffcc\026\uffcc\061\uffcc\063\uffcc\064\uffcc\065" +
                            "\uffcc\066\uffcc\067\uffcc\070\uffcc\071\uffcc\001\002\000\034" +
                            "\004\uffcb\005\uffcb\013\uffcb\014\uffcb\026\uffcb\061\uffcb\063" +
                            "\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb\070\uffcb\071\uffcb" +
                            "\001\002\000\042\002\ufff1\004\ufff1\005\ufff1\013\ufff1\014" +
                            "\ufff1\015\ufff1\016\ufff1\026\ufff1\061\ufff1\063\ufff1\064\ufff1" +
                            "\065\ufff1\066\ufff1\067\ufff1\070\ufff1\071\ufff1\001\002\000" +
                            "\004\061\151\001\002\000\024\004\040\061\044\063\032" +
                            "\064\043\065\045\066\036\067\042\070\034\071\037\001" +
                            "\002\000\004\024\147\001\002\000\004\054\uffb6\001\002" +
                            "\000\004\054\uffb5\001\002\000\014\021\uffbb\022\uffbb\032" +
                            "\uffbb\054\uffbb\060\uffbb\001\002\000\004\060\154\001\002" +
                            "\000\034\004\uffcf\005\uffcf\013\uffcf\014\uffcf\026\uffcf\061" +
                            "\uffcf\063\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\070\uffcf" +
                            "\071\uffcf\001\002\000\034\004\uffce\005\uffce\013\uffce\014" +
                            "\uffce\026\uffce\061\uffce\063\uffce\064\uffce\065\uffce\066\uffce" +
                            "\067\uffce\070\uffce\071\uffce\001\002\000\024\004\040\061" +
                            "\044\063\032\064\043\065\045\066\036\067\042\070\034" +
                            "\071\037\001\002\000\004\060\157\001\002\000\034\004" +
                            "\uffd5\005\uffd5\013\uffd5\014\uffd5\026\uffd5\061\uffd5\063\uffd5" +
                            "\064\uffd5\065\uffd5\066\uffd5\067\uffd5\070\uffd5\071\uffd5\001" +
                            "\002\000\012\002\uffe5\014\uffe5\015\uffe5\061\uffe5\001\002" +
                            "\000\036\004\ufff2\005\ufff2\013\ufff2\014\ufff2\016\ufff2\026" +
                            "\ufff2\061\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\067\ufff2" +
                            "\070\ufff2\071\ufff2\001\002\000\004\026\uffe4\001\002\000" +
                            "\006\042\165\060\166\001\002\000\006\042\ufffb\060\ufffb" +
                            "\001\002\000\004\061\167\001\002\000\014\002\ufffd\014" +
                            "\ufffd\015\ufffd\061\ufffd\062\ufffd\001\002\000\006\042\ufffc" +
                            "\060\ufffc\001\002\000\042\002\ufff0\004\ufff0\005\ufff0\013" +
                            "\ufff0\014\ufff0\015\ufff0\016\ufff0\026\ufff0\061\ufff0\063\ufff0" +
                            "\064\ufff0\065\ufff0\066\ufff0\067\ufff0\070\ufff0\071\ufff0\001" +
                            "\002\000\004\061\020\001\002\000\004\050\173\001\002" +
                            "\000\006\050\uffbd\061\uffbd\001\002\000\004\025\077\001" +
                            "\002\000\016\002\uffeb\014\uffeb\015\uffeb\016\uffeb\026\uffeb" +
                            "\061\uffeb\001\002\000\004\002\ufffa\001\002\000\012\002" +
                            "\ufff4\014\ufff4\015\ufff4\061\ufff4\001\002\000\014\021\uffef" +
                            "\022\uffef\032\uffef\054\uffef\060\uffef\001\002\000\004\002" +
                            "\000\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /**
     * <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[]{
                    "\000\177\000\006\002\003\003\004\001\001\000\002\001" +
                            "\001\000\032\004\006\006\013\007\010\010\012\011\015" +
                            "\013\021\014\007\016\014\017\020\022\011\047\016\052" +
                            "\005\001\001\000\004\050\177\001\001\000\002\001\001" +
                            "\000\002\001\001\000\030\006\175\007\010\010\012\011" +
                            "\015\013\021\014\007\016\014\017\020\022\011\047\016" +
                            "\052\005\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\004\020\173\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\004\005\162\001\001\000\004\047\045" +
                            "\001\001\000\006\047\016\052\025\001\001\000\004\051" +
                            "\027\001\001\000\002\001\001\000\002\001\001\000\010" +
                            "\044\040\045\034\046\032\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\004\023\047\001\001\000\030\010" +
                            "\052\012\053\013\021\015\054\016\014\017\056\024\055" +
                            "\025\050\026\051\047\016\052\005\001\001\000\002\001" +
                            "\001\000\030\010\052\012\053\013\021\015\054\016\014" +
                            "\017\056\024\161\025\050\026\051\047\016\052\005\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\004\020\065\001\001\000\012\013\062\016\061\047\016" +
                            "\052\005\001\001\000\002\001\001\000\002\001\001\000" +
                            "\010\044\064\045\034\046\032\001\001\000\002\001\001" +
                            "\000\004\031\075\001\001\000\012\016\070\021\067\047" +
                            "\016\052\005\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\010\016\074\047\016\052\005\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\056\010\052\012\102\013\021\015\054\016\111\027" +
                            "\116\030\115\032\105\033\101\034\113\037\100\040\110" +
                            "\044\117\045\034\046\032\047\016\050\107\052\005\053" +
                            "\077\054\114\055\120\056\106\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\010\044\151\045\034\046\032\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\010\044\134\045\034" +
                            "\046\032\001\001\000\002\001\001\000\002\001\001\000" +
                            "\056\010\052\012\102\013\021\015\054\016\111\027\133" +
                            "\030\115\032\105\033\101\034\113\037\100\040\110\044" +
                            "\117\045\034\046\032\047\016\050\107\052\005\053\077" +
                            "\054\114\055\120\056\106\001\001\000\002\001\001\000" +
                            "\004\035\122\001\001\000\002\001\001\000\012\036\124" +
                            "\044\125\045\034\046\032\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\010\044\131\045\034\046\032\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\004\031\135\001\001\000\004\041\137\001" +
                            "\001\000\006\031\140\040\141\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\004\050\147\001\001\000\010\044\145\045\034\046\032" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\010\044\155\045\034\046\032\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\006\047\016\052\171\001" +
                            "\001\000\002\001\001\000\002\001\001\000\004\031\174" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SyntacticalAnalyser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SyntacticalAnalyser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SyntacticalAnalyser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    return analyser.next_token();

    }


    private LexicalAnalyser analyser = (LexicalAnalyser) getScanner();

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SyntacticalAnalyser$actions {


  private final SyntacticalAnalyser parser;

  /** Constructor */
  CUP$SyntacticalAnalyser$actions(SyntacticalAnalyser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SyntacticalAnalyser$do_action_part00000000(
    int                        CUP$SyntacticalAnalyser$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticalAnalyser$parser,
    java.util.Stack            CUP$SyntacticalAnalyser$stack,
    int                        CUP$SyntacticalAnalyser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SyntacticalAnalyser$result;

      /* select the action based on the action number */
      switch (CUP$SyntacticalAnalyser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= ImportList DeclarationList 
            {
              ProgramNode RESULT =null;
		List<String> imports = (List<String>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		DeclarationNode declarations = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ProgramNode(declarations, imports); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Program",0, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		RESULT = start_val;
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$SyntacticalAnalyser$parser.done_parsing();
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ImportList ::= ImportList Import 
            {
              List<String> RESULT =null;
		List<String> imports = (List<String>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		String file = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 imports.add(file); RESULT = imports; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ImportList",1, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ImportList ::= 
            {
              List<String> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ImportList",1, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Import ::= IMPORT FilePath END 
            {
              String RESULT =null;
		String path = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = path; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Import",2, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FilePath ::= FilePath DIV IDENTIFIER 
            {
              String RESULT =null;
		String path = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		String filename = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = path + "/" + filename; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FilePath",3, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FilePath ::= IDENTIFIER 
            {
              String RESULT =null;
		String filename = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = filename; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FilePath",3, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DeclarationList ::= Declaration DeclarationList 
            {
              DeclarationNode RESULT =null;
		DeclarationNode declaration = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		DeclarationNode declarations = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration.linkedTo(declarations); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("DeclarationList",4, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DeclarationList ::= 
            {
              DeclarationNode RESULT =null;
		 RESULT = null; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("DeclarationList",4, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Declaration ::= GlobalVarConstDeclaration 
            {
              DeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration",5, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Declaration ::= FunctionDeclaration 
            {
              DeclarationNode RESULT =null;
		FunctionDeclarationNode declaration = (FunctionDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration",5, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Declaration ::= ClassDeclaration 
            {
              DeclarationNode RESULT =null;
		ClassDeclarationNode declaration = (ClassDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration",5, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // GlobalVarConstDeclaration ::= VarDeclaration 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalVarConstDeclaration",7, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // GlobalVarConstDeclaration ::= GlobalConstDeclaration END 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalVarConstDeclaration",7, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VarConstDeclaration ::= VarDeclaration 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarConstDeclaration",8, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VarConstDeclaration ::= LocalConstDeclaration END 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarConstDeclaration",8, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VarDeclaration ::= BaseVarDeclaration END 
            {
              VarDeclarationNode RESULT =null;
		Name declaration = (Name)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new VarDeclarationNode(declaration); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclaration",6, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VarDeclaration ::= VarInitDeclaration END 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclaration",6, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BaseVarDeclaration ::= Type VarId 
            {
              Name RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new Name(id, type); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("BaseVarDeclaration",12, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarInitDeclaration ::= BaseVarDeclaration ASSIGNMENT Expression 
            {
              VarDeclarationNode RESULT =null;
		Name name = (Name)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		ExpressionNode initialValue = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new VarDeclarationNode(name, initialValue); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarInitDeclaration",9, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // GlobalConstDeclaration ::= CONST Type GlobalConstId ASSIGNMENT Expression 
            {
              VarDeclarationNode RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		ExpressionNode initialValue = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new VarDeclarationNode(new Name(id, type), initialValue, true, true); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalConstDeclaration",10, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LocalConstDeclaration ::= CONST VarInitDeclaration 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration.constant(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("LocalConstDeclaration",11, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FunctionDeclaration ::= BaseVarDeclaration FunctionParameters BlockStatement 
            {
              FunctionDeclarationNode RESULT =null;
		Name name = (Name)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		List<Name> parameters = (List<Name>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		BlockStatementNode block = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionDeclarationNode(name, parameters, block); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionDeclaration",13, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FunctionParameters ::= PARENTH_L PARENTH_R 
            {
              List<Name> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionParameters",14, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FunctionParameters ::= PARENTH_L ParameterList PARENTH_R 
            {
              List<Name> RESULT =null;
		List<Name> parameters = (List<Name>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = parameters; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionParameters",14, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ParameterList ::= BaseVarDeclaration 
            {
              List<Name> RESULT =null;
		Name parameter = (Name)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ArrayList<Name>() {{ add(parameter); }}; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ParameterList",15, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ParameterList ::= ParameterList COMMA BaseVarDeclaration 
            {
              List<Name> RESULT =null;
		List<Name> parameters = (List<Name>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		Name parameter = (Name)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 parameters.add(parameter); RESULT = parameters; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ParameterList",15, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ClassDeclaration ::= CLASS TypeName ClassBlock 
            {
              ClassDeclarationNode RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		DeclarationNode block = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ClassDeclarationNode(name, block); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",16, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassBlock ::= CURLY_L ClassElementList CURLY_R 
            {
              DeclarationNode RESULT =null;
		DeclarationNode contents = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = contents; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassBlock",17, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassElementList ::= ClassElement ClassElementList 
            {
              DeclarationNode RESULT =null;
		DeclarationNode element = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		DeclarationNode elements = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = element.linkedTo(elements); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElementList",18, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassElementList ::= 
            {
              DeclarationNode RESULT =null;
		 RESULT = null; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElementList",18, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClassElement ::= VarConstDeclaration 
            {
              DeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement",19, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassElement ::= ConstructorDeclaration 
            {
              DeclarationNode RESULT =null;
		ConstructorDeclarationNode declaration = (ConstructorDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement",19, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassElement ::= FunctionDeclaration 
            {
              DeclarationNode RESULT =null;
		FunctionDeclarationNode declaration = (FunctionDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement",19, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ConstructorDeclaration ::= CONSTRUCTOR FunctionParameters BlockStatement 
            {
              ConstructorDeclarationNode RESULT =null;
		List<Name> parameters = (List<Name>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		BlockStatementNode block = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ConstructorDeclarationNode(parameters, block); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstructorDeclaration",20, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // StatementList ::= Statement StatementList 
            {
              StatementNode RESULT =null;
		StatementNode statement = (StatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		StatementNode statements = (StatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement.linkedTo(statements); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("StatementList",21, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // StatementList ::= 
            {
              StatementNode RESULT =null;
		 RESULT = null; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("StatementList",21, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Statement ::= VarDeclarationStatement 
            {
              StatementNode RESULT =null;
		VarDeclarationStatementNode statement = (VarDeclarationStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",22, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Statement ::= AssignmentStatement 
            {
              StatementNode RESULT =null;
		AssignmentStatementNode statement = (AssignmentStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",22, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 39: // Statement ::= FunctionCallStatement
            {
                StatementNode RESULT = null;
                FunctionCallStatementNode statement = (FunctionCallStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = statement;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement", 22, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 40: // Statement ::= ReturnStatement
            {
                StatementNode RESULT = null;
                ReturnStatementNode statement = (ReturnStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = statement;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement", 22, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 41: // Statement ::= IfElseStatement
            {
                StatementNode RESULT = null;
                IfElseStatementNode statement = (IfElseStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = statement;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement", 22, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 42: // BlockStatement ::= CURLY_L StatementList CURLY_R
            {
              BlockStatementNode RESULT =null;
		StatementNode root = (StatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new BlockStatementNode(root); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("BlockStatement",23, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 43: // VarDeclarationStatement ::= VarConstDeclaration
            {
              VarDeclarationStatementNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration.asStatement(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclarationStatement",24, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 44: // AssignmentStatement ::= Designator ASSIGNMENT Expression END
            {
              AssignmentStatementNode RESULT =null;
		Designator designator = (Designator)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		ExpressionNode expression = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new AssignmentStatementNode(designator, expression); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AssignmentStatement",25, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 45: // FunctionCallStatement ::= Expression FunctionArguments END
            {
              FunctionCallStatementNode RESULT =null;
		ExpressionNode function = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		List<ExpressionNode> arguments = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new FunctionCallStatementNode(function, arguments); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionCallStatement",26, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 46: // FunctionArguments ::= PARENTH_L PARENTH_R
            {
              List<ExpressionNode> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionArguments",27, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 47: // FunctionArguments ::= PARENTH_L ArgumentList PARENTH_R
            {
              List<ExpressionNode> RESULT =null;
		List<ExpressionNode> arguments = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = arguments; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionArguments",27, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ArgumentList ::= Expression 
            {
              List<ExpressionNode> RESULT =null;
		ExpressionNode argument = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ArrayList<ExpressionNode>() {{ add(argument); }}; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ArgumentList",28, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 49: // ArgumentList ::= ArgumentList COMMA Expression
            {
                List<ExpressionNode> RESULT = null;
                List<ExpressionNode> arguments = (List<ExpressionNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode argument = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                arguments.add(argument);
                RESULT = arguments;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ArgumentList", 28, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 50: // ReturnStatement ::= RETURN END
            {
                ReturnStatementNode RESULT = null;
                RESULT = new ReturnStatementNode();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ReturnStatement", 29, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 51: // ReturnStatement ::= RETURN Expression END
            {
                ReturnStatementNode RESULT = null;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new ReturnStatementNode(expression);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ReturnStatement", 29, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 52: // IfElseStatement ::= IF Expression BlockStatement ElsePartStatement
            {
                IfElseStatementNode RESULT = null;
                ExpressionNode condition = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                BlockStatementNode ifBlock = (BlockStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                StatementNode elsePart = (StatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new IfElseStatementNode(condition, ifBlock, elsePart);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("IfElseStatement", 30, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 53: // ElsePartStatement ::= ELSE BlockStatement
            {
              StatementNode RESULT =null;
		BlockStatementNode elseBlock = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = elseBlock;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ElsePartStatement",31, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 54: // ElsePartStatement ::= ELSE IfElseStatement
            {
              StatementNode RESULT =null;
		IfElseStatementNode ifElse = (IfElseStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = ifElse;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ElsePartStatement",31, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 55: // ElsePartStatement ::=
            {
                StatementNode RESULT = null;
                RESULT = null;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ElsePartStatement", 31, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 56: // Expression ::= IDENTIFIER
            {
                ExpressionNode RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression", 34, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 57: // Expression ::= ConstantExpression
            {
                ExpressionNode RESULT = null;
                ConstantExpressionNode expression = (ConstantExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression", 34, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 58: // Expression ::= ListConstantExpression
            {
                ExpressionNode RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression", 34, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 59: // ConstantExpression ::= INT
            {
                ConstantExpressionNode RESULT = null;
                String n = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = ConstantExpressionNode.fromInt(n);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression", 35, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 60: // ConstantExpression ::= REAL
            {
                ConstantExpressionNode RESULT = null;
                String x = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = ConstantExpressionNode.fromFloat(x);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression", 35, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 61: // ConstantExpression ::= TRUE
            {
                ConstantExpressionNode RESULT = null;
                String t = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = ConstantExpressionNode.fromBoolean(t);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression", 35, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 62: // ConstantExpression ::= FALSE
            {
                ConstantExpressionNode RESULT = null;
                String f = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = ConstantExpressionNode.fromBoolean(f);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression", 35, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 63: // ConstantExpression ::= CHAR
            {
                ConstantExpressionNode RESULT = null;
                String c = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = ConstantExpressionNode.fromChar(c);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression", 35, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 64: // ConstantExpression ::= NOTHING
            {
                ConstantExpressionNode RESULT = null;
                RESULT = ConstantExpressionNode.ofNothing();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression", 35, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 65: // ConstantExpression ::= NULL
            {
                ConstantExpressionNode RESULT = null;
                RESULT = ConstantExpressionNode.ofNull();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression", 35, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 66: // ListConstantExpression ::= STRING
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListConstantExpression", 36, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 67: // Type ::= TypeName
            {
                Type RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new Type(name);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Type", 40, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 68: // Type ::= TypeName LT Type GT
            {
                Type RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                Type param = (Type) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new Type(name, param);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Type",40, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 69: // TypeName ::= IDENTIFIER
            {
                String RESULT = null;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = id;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("TypeName",37, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 70: // VarId ::= IDENTIFIER
            {
                String RESULT = null;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = id;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarId",38, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 71: // GlobalConstId ::= IDENTIFIER
            {
                String RESULT = null;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = id;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalConstId",39, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Designator ::= VarId 
          {
              Designator RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Designator",41, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Designator ::= ArrayAccess 
          {
              Designator RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Designator",41, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Designator ::= FieldAccess 
          {
              Designator RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Designator",41, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 75: // ArrayAccess ::= DesignableExpression SQUARE_L Expression SQUARE_R
            {
                ExpressionNode RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ArrayAccess",42, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 76: // FieldAccess ::= DesignableExpression POINT VarId
            {
                ExpressionNode RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FieldAccess",43, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DesignableExpression ::= VarId 
          {
              ExpressionNode RESULT = null;

              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("DesignableExpression",44, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SyntacticalAnalyser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SyntacticalAnalyser$do_action(
    int                        CUP$SyntacticalAnalyser$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticalAnalyser$parser,
    java.util.Stack            CUP$SyntacticalAnalyser$stack,
    int                        CUP$SyntacticalAnalyser$top)
    throws java.lang.Exception
    {
              return CUP$SyntacticalAnalyser$do_action_part00000000(
                               CUP$SyntacticalAnalyser$act_num,
                               CUP$SyntacticalAnalyser$parser,
                               CUP$SyntacticalAnalyser$stack,
                               CUP$SyntacticalAnalyser$top);
    }
}

