
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Mon Apr 13 12:43:39 CEST 2020
//----------------------------------------------------

package syntactical;

import syntactical.ast.*;

import java.util.ArrayList;
import java.util.List;

/**
 * CUP v0.11b beta 20140220 generated parser.
 *
 * @version Mon Apr 13 12:43:39 CEST 2020
 */
public class SyntacticalAnalyser extends java_cup.runtime.lr_parser {

    /** Default constructor. */
    public SyntacticalAnalyser() {
        super();
    }

    /** Constructor which sets the default scanner. */
    public SyntacticalAnalyser(java_cup.runtime.Scanner s) {
        super(s);
    }

    /** Constructor which sets the default scanner. */
    public SyntacticalAnalyser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /** Production table. */
    protected static final short _production_table[][] =
            unpackFromStrings(new String[]{
                    "\000\060\000\002\002\004\000\002\002\004\000\002\003" +
                            "\004\000\002\003\002\000\002\004\005\000\002\005\005" +
                            "\000\002\005\003\000\002\006\004\000\002\006\002\000" +
                            "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
                            "\011\003\000\002\011\004\000\002\012\003\000\002\012" +
                            "\004\000\002\010\004\000\002\010\004\000\002\016\004" +
                            "\000\002\013\005\000\002\014\007\000\002\015\004\000" +
                            "\002\017\005\000\002\020\004\000\002\020\005\000\002" +
                            "\021\003\000\002\021\005\000\002\022\005\000\002\023" +
                            "\005\000\002\024\004\000\002\024\002\000\002\025\003" +
                            "\000\002\025\003\000\002\025\003\000\002\026\005\000" +
                            "\002\027\004\000\002\027\002\000\002\030\003\000\002" +
                            "\030\003\000\002\031\005\000\002\032\003\000\002\033" +
                            "\004\000\002\034\005\000\002\035\004\000\002\035\004" +
                            "\000\002\037\003\000\002\040\003\000\002\041\003"});

    /** Access to production table. */
    public short[][] production_table() {
        return _production_table;
    }

    /** Parse-action table. */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[]{
                    "\000\122\000\014\002\ufffe\023\ufffe\024\ufffe\070\ufffe\071" +
                            "\ufffe\001\002\000\004\002\124\001\002\000\014\002\ufff9" +
                            "\023\024\024\023\070\020\071\022\001\002\000\004\070" +
                            "\123\001\002\000\014\002\uffff\023\uffff\024\uffff\070\uffff" +
                            "\071\uffff\001\002\000\004\067\121\001\002\000\012\002" +
                            "\ufff9\023\024\024\023\070\020\001\002\000\012\002\ufff6" +
                            "\023\ufff6\024\ufff6\070\ufff6\001\002\000\012\002\ufff5\023" +
                            "\ufff5\024\ufff5\070\ufff5\001\002\000\004\002\001\001\002" +
                            "\000\010\030\053\063\050\067\103\001\002\000\012\002" +
                            "\ufff8\023\ufff8\024\ufff8\070\ufff8\001\002\000\012\002\ufff7" +
                            "\023\ufff7\024\ufff7\070\ufff7\001\002\000\006\034\uffd4\070" +
                            "\uffd4\001\002\000\004\067\115\001\002\000\004\070\111" +
                            "\001\002\000\004\070\020\001\002\000\004\070\020\001" +
                            "\002\000\004\070\026\001\002\000\004\063\uffd2\001\002" +
                            "\000\004\063\030\001\002\000\002\001\002\000\004\067" +
                            "\uffed\001\002\000\004\034\033\001\002\000\012\023\045" +
                            "\025\044\035\uffe3\070\020\001\002\000\012\002\uffe6\023" +
                            "\uffe6\024\uffe6\070\uffe6\001\002\000\012\023\045\025\044" +
                            "\035\uffe3\070\020\001\002\000\012\023\uffe1\025\uffe1\035" +
                            "\uffe1\070\uffe1\001\002\000\014\010\ufff3\023\ufff3\025\ufff3" +
                            "\035\ufff3\070\ufff3\001\002\000\012\023\uffe2\025\uffe2\035" +
                            "\uffe2\070\uffe2\001\002\000\004\067\106\001\002\000\004" +
                            "\035\105\001\002\000\012\023\uffe0\025\uffe0\035\uffe0\070" +
                            "\uffe0\001\002\000\004\030\053\001\002\000\004\070\020" +
                            "\001\002\000\004\063\050\001\002\000\004\067\uffec\001" +
                            "\002\000\002\001\002\000\004\067\uffee\001\002\000\004" +
                            "\034\063\001\002\000\006\031\056\070\020\001\002\000" +
                            "\006\031\060\041\057\001\002\000\006\031\uffe8\041\uffe8" +
                            "\001\002\000\004\034\uffea\001\002\000\004\070\020\001" +
                            "\002\000\004\034\uffe9\001\002\000\006\031\uffe7\041\uffe7" +
                            "\001\002\000\012\023\uffdf\025\uffdf\035\uffdf\070\uffdf\001" +
                            "\002\000\012\010\071\023\045\035\uffdd\070\020\001\002" +
                            "\000\004\035\104\001\002\000\012\010\uffdc\023\uffdc\035" +
                            "\uffdc\070\uffdc\001\002\000\012\010\uffd9\023\uffd9\035\uffd9" +
                            "\070\uffd9\001\002\000\006\063\050\067\103\001\002\000" +
                            "\004\011\077\001\002\000\002\001\002\000\012\010\071" +
                            "\023\045\035\uffdd\070\020\001\002\000\012\010\uffdb\023" +
                            "\uffdb\035\uffdb\070\uffdb\001\002\000\004\035\uffde\001\002" +
                            "\000\004\034\063\001\002\000\004\011\uffd7\001\002\000" +
                            "\006\010\071\034\063\001\002\000\012\010\uffd8\023\uffd8" +
                            "\035\uffd8\070\uffd8\001\002\000\012\010\uffd5\023\uffd5\035" +
                            "\uffd5\070\uffd5\001\002\000\012\010\uffd6\023\uffd6\035\uffd6" +
                            "\070\uffd6\001\002\000\020\002\ufff1\010\ufff1\023\ufff1\024" +
                            "\ufff1\025\ufff1\035\ufff1\070\ufff1\001\002\000\022\002\uffda" +
                            "\010\uffda\011\uffda\023\uffda\024\uffda\025\uffda\035\uffda\070" +
                            "\uffda\001\002\000\012\002\uffe5\023\uffe5\024\uffe5\070\uffe5" +
                            "\001\002\000\014\010\ufff2\023\ufff2\025\ufff2\035\ufff2\070" +
                            "\ufff2\001\002\000\004\035\uffe4\001\002\000\006\051\112" +
                            "\067\113\001\002\000\006\051\ufffb\067\ufffb\001\002\000" +
                            "\004\070\114\001\002\000\014\002\ufffd\023\ufffd\024\ufffd" +
                            "\070\ufffd\071\ufffd\001\002\000\006\051\ufffc\067\ufffc\001" +
                            "\002\000\020\002\ufff0\010\ufff0\023\ufff0\024\ufff0\025\ufff0" +
                            "\035\ufff0\070\ufff0\001\002\000\004\034\063\001\002\000" +
                            "\016\002\uffeb\023\uffeb\024\uffeb\025\uffeb\035\uffeb\070\uffeb" +
                            "\001\002\000\004\002\ufffa\001\002\000\012\002\ufff4\023" +
                            "\ufff4\024\ufff4\070\ufff4\001\002\000\014\030\uffef\031\uffef" +
                            "\041\uffef\063\uffef\067\uffef\001\002\000\014\030\uffd3\031" +
                            "\uffd3\041\uffd3\063\uffd3\067\uffd3\001\002\000\004\002\000" +
                            "\001\002"});

    /** Access to parse-action table. */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table. */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[]{
                    "\000\122\000\006\002\003\003\004\001\001\000\002\001" +
                            "\001\000\030\004\006\006\013\007\010\010\012\011\015" +
                            "\013\020\014\007\016\014\017\016\022\011\037\005\001" +
                            "\001\000\004\040\121\001\001\000\002\001\001\000\002" +
                            "\001\001\000\026\006\117\007\010\010\012\011\015\013" +
                            "\020\014\007\016\014\017\016\022\011\037\005\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\004\020\115\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\004\005\107\001" +
                            "\001\000\004\037\031\001\001\000\004\037\024\001\001" +
                            "\000\004\041\026\001\001\000\002\001\001\000\002\001" +
                            "\001\000\004\036\030\001\001\000\002\001\001\000\004" +
                            "\023\033\001\001\000\026\010\036\012\037\013\020\015" +
                            "\040\016\014\017\042\024\041\025\034\026\035\037\005" +
                            "\001\001\000\002\001\001\000\026\010\036\012\037\013" +
                            "\020\015\040\016\014\017\042\024\106\025\034\026\035" +
                            "\037\005\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\004\020\051\001\001\000\010\013\046\016" +
                            "\045\037\005\001\001\000\002\001\001\000\002\001\001" +
                            "\000\004\036\050\001\001\000\002\001\001\000\004\031" +
                            "\061\001\001\000\010\016\054\021\053\037\005\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\006\016\060\037\005\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\030\010\036\012\065\013" +
                            "\020\015\040\016\066\027\063\030\071\032\064\033\072" +
                            "\034\067\037\005\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\004\035\077" +
                            "\001\001\000\004\036\074\001\001\000\030\010\036\012" +
                            "\065\013\020\015\040\016\066\027\073\030\071\032\064" +
                            "\033\072\034\067\037\005\001\001\000\002\001\001\000" +
                            "\002\001\001\000\004\031\075\001\001\000\002\001\001" +
                            "\000\010\031\101\033\100\034\067\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\004\031\116\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001"});

    /** Access to <code>reduce_goto</code> table. */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /** Instance of action encapsulation class. */
    protected CUP$SyntacticalAnalyser$actions action_obj;

    /** Action encapsulation object initializer. */
    protected void init_actions() {
        action_obj = new CUP$SyntacticalAnalyser$actions(this);
    }

    /** Invoke a user supplied parse action. */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$SyntacticalAnalyser$do_action(act_num, parser, stack, top);
    }

    /** Indicates start state. */
    public int start_state() {
        return 0;
    }

    /** Indicates start production. */
    public int start_production() {
        return 1;
    }

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

        //LexicalAnalyser analyser = (LexicalAnalyser) getScanner(); ???

    }

    /**
     * Scan to get the next Symbol.
     */
    public java_cup.runtime.Symbol scan()
            throws java.lang.Exception {
        return getScanner().next_token();
    }

    /* TODO ?? */
}

/**
 * Cup generated class to encapsulate user supplied action code.
 */
class CUP$SyntacticalAnalyser$actions {

    private ProgramNode program;
    private final SyntacticalAnalyser parser;

    /** Constructor */
    CUP$SyntacticalAnalyser$actions(SyntacticalAnalyser parser) {
        this.parser = parser;
    }

    /** Method 0 with the actual generated action code for actions 0 to 300. */
    public final java_cup.runtime.Symbol CUP$SyntacticalAnalyser$do_action_part00000000(
            int CUP$SyntacticalAnalyser$act_num,
            java_cup.runtime.lr_parser CUP$SyntacticalAnalyser$parser,
            java.util.Stack CUP$SyntacticalAnalyser$stack,
            int CUP$SyntacticalAnalyser$top)
            throws java.lang.Exception {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$SyntacticalAnalyser$result;

        /* select the action based on the action number */
        switch (CUP$SyntacticalAnalyser$act_num) {
            /*. . . . . . . . . . . . . . . . . . . .*/
            case 0: // Program ::= ImportList DeclarationList
            {
                ProgramNode RESULT = null;
                List<String> imports = (List<String>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                DeclarationNode declarations = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ProgramNode(declarations, imports);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Program", 0, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 1: // $START ::= Program EOF
            {
                Object RESULT = null;
                ProgramNode start_val = (ProgramNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = start_val;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("$START", 0, RESULT);
            }
            /* ACCEPT */
            CUP$SyntacticalAnalyser$parser.done_parsing();
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 2: // ImportList ::= ImportList Import
            {
                List<String> RESULT = null;
                List<String> imports = (List<String>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                String file = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                imports.add(file);
                RESULT = imports;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ImportList", 1, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 3: // ImportList ::=
            {
                List<String> RESULT = null;
                RESULT = new ArrayList<>();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ImportList", 1, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 4: // Import ::= IMPORT FilePath END
            {
                String RESULT = null;
                String path = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = path;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Import", 2, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 5: // FilePath ::= FilePath DIV IDENTIFIER
            {
                String RESULT = null;
                String path = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                String filename = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = path + "/" + filename;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FilePath", 3, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 6: // FilePath ::= IDENTIFIER
            {
                String RESULT = null;
                String filename = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = filename;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FilePath", 3, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 7: // DeclarationList ::= Declaration DeclarationList
            {
                DeclarationNode RESULT = null;
                DeclarationNode declaration = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                DeclarationNode declarations = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration.linkedTo(declarations);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("DeclarationList", 4, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 8: // DeclarationList ::=
            {
                DeclarationNode RESULT = null;
                RESULT = null;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("DeclarationList", 4, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 9: // Declaration ::= GlobalVarConstDeclaration
            {
                DeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration", 5, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 10: // Declaration ::= FunctionDeclaration
            {
                DeclarationNode RESULT = null;
                FunctionDeclarationNode declaration = (FunctionDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration", 5, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 11: // Declaration ::= ClassDeclaration
            {
                DeclarationNode RESULT = null;
                ClassDeclarationNode declaration = (ClassDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration", 5, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 12: // GlobalVarConstDeclaration ::= VarDeclaration
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalVarConstDeclaration", 7, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 13: // GlobalVarConstDeclaration ::= GlobalConstDeclaration END
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalVarConstDeclaration", 7, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 14: // VarConstDeclaration ::= VarDeclaration
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarConstDeclaration", 8, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 15: // VarConstDeclaration ::= LocalConstDeclaration END
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarConstDeclaration", 8, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 16: // VarDeclaration ::= BaseVarDeclaration END
            {
                VarDeclarationNode RESULT = null;
                Name declaration = (Name) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new VarDeclarationNode(declaration);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclaration", 6, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 17: // VarDeclaration ::= VarInitDeclaration END
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclaration", 6, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 18: // BaseVarDeclaration ::= Type VarId
            {
                Name RESULT = null;
                String type = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new Name(id, type);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("BaseVarDeclaration", 12, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 19: // VarInitDeclaration ::= BaseVarDeclaration ASSIGNMENT Expression
            {
                VarDeclarationNode RESULT = null;
                Name name = (Name) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode initialValue = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new VarDeclarationNode(name, initialValue);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarInitDeclaration", 9, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 20: // GlobalConstDeclaration ::= CONST Type GlobalConstId ASSIGNMENT Expression
            {
                VarDeclarationNode RESULT = null;
                String type = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode initialValue = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new VarDeclarationNode(new Name(id, type), initialValue, true, true);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalConstDeclaration", 10, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 21: // LocalConstDeclaration ::= CONST VarInitDeclaration
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration.constant();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("LocalConstDeclaration", 11, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 22: // FunctionDeclaration ::= BaseVarDeclaration FunctionParameters BlockStatement
            {
                FunctionDeclarationNode RESULT = null;
                Name name = (Name) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                List<Name> parameters = (List<Name>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                BlockStatementNode block = (BlockStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new FunctionDeclarationNode(name, parameters, block);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionDeclaration", 13, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 23: // FunctionParameters ::= PARENTH_L PARENTH_R
            {
                List<Name> RESULT = null;
                RESULT = new ArrayList<>();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionParameters", 14, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 24: // FunctionParameters ::= PARENTH_L ParameterList PARENTH_R
            {
                List<Name> RESULT = null;
                List<Name> parameters = (List<Name>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = parameters;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionParameters", 14, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 25: // ParameterList ::= BaseVarDeclaration
            {
                List<Name> RESULT = null;
                Name parameter = (Name) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ArrayList<Name>() {{
                    add(parameter);
                }};
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ParameterList", 15, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 26: // ParameterList ::= ParameterList COMMA BaseVarDeclaration
            {
                List<Name> RESULT = null;
                List<Name> parameters = (List<Name>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                Name parameter = (Name) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                parameters.add(parameter);
                RESULT = parameters;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ParameterList", 15, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 27: // ClassDeclaration ::= CLASS Type ClassBlock
            {
                ClassDeclarationNode RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                DeclarationNode block = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ClassDeclarationNode(name, block);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration", 16, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 28: // ClassBlock ::= CURLY_L ClassElementList CURLY_R
            {
                DeclarationNode RESULT = null;
                DeclarationNode contents = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = contents;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassBlock", 17, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 29: // ClassElementList ::= ClassElement ClassElementList
            {
                DeclarationNode RESULT = null;
                DeclarationNode element = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                DeclarationNode elements = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = element.linkedTo(elements);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElementList", 18, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 30: // ClassElementList ::=
            {
                DeclarationNode RESULT = null;
                RESULT = null;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElementList", 18, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 31: // ClassElement ::= VarConstDeclaration
            {
                DeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement", 19, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 32: // ClassElement ::= ConstructorDeclaration
            {
                DeclarationNode RESULT = null;
                ConstructorDeclarationNode declaration = (ConstructorDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement", 19, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 33: // ClassElement ::= FunctionDeclaration
            {
                DeclarationNode RESULT = null;
                FunctionDeclarationNode declaration = (FunctionDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement", 19, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 34: // ConstructorDeclaration ::= CONSTRUCTOR FunctionParameters BlockStatement
            {
                ConstructorDeclarationNode RESULT = null;
                List<Name> parameters = (List<Name>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                BlockStatementNode block = (BlockStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ConstructorDeclarationNode(parameters, block);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstructorDeclaration", 20, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 35: // StatementList ::= Statement StatementList
            {
                StatementNode RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("StatementList", 21, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 36: // StatementList ::=
            {
                StatementNode RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("StatementList", 21, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 37: // Statement ::= VarDeclarationStatement
            {
                StatementNode RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement", 22, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 38: // Statement ::= IfElseStatement
            {
                StatementNode RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement", 22, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 39: // BlockStatement ::= CURLY_L StatementList CURLY_R
            {
                BlockStatementNode RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("BlockStatement", 23, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 40: // VarDeclarationStatement ::= VarConstDeclaration
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclarationStatement", 24, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 41: // IfElseStatement ::= IfStatement ElseStatement
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("IfElseStatement", 25, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 42: // IfStatement ::= IF Expression BlockStatement
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("IfStatement", 26, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 43: // ElseStatement ::= ELSE BlockStatement
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ElseStatement", 27, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 44: // ElseStatement ::= ELSE IfElseStatement
            {
                Object RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ElseStatement", 27, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 45: // Type ::= IDENTIFIER
            {
                String RESULT = null;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = id;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Type", 29, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 46: // VarId ::= IDENTIFIER
            {
                String RESULT = null;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = id;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarId", 30, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 47: // GlobalConstId ::= IDENTIFIER
            {
                String RESULT = null;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = id;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalConstId", 31, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /* . . . . . .*/
            default:
                throw new Exception(
                        "Invalid action number " + CUP$SyntacticalAnalyser$act_num + "found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SyntacticalAnalyser$do_action(
    int                        CUP$SyntacticalAnalyser$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticalAnalyser$parser,
    java.util.Stack            CUP$SyntacticalAnalyser$stack,
    int                        CUP$SyntacticalAnalyser$top)
    throws java.lang.Exception
    {
              return CUP$SyntacticalAnalyser$do_action_part00000000(
                               CUP$SyntacticalAnalyser$act_num,
                               CUP$SyntacticalAnalyser$parser,
                               CUP$SyntacticalAnalyser$stack,
                               CUP$SyntacticalAnalyser$top);
    }
}

