
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun Jun 14 13:42:11 CEST 2020
//----------------------------------------------------

package syntactical;

import java_cup.runtime.*;
import lexical.LexicalAnalyser;
import lexical.LexicalUnit;
import syntactical.ast.*;
import error.SyntacticalException;
import syntactical.OperatorOverloadConstants;
import java.util.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun Jun 14 13:42:11 CEST 2020
  */
public class SyntacticalAnalyser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SyntacticalAnalyser() {super();}

  /** Constructor which sets the default scanner. */
  public SyntacticalAnalyser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SyntacticalAnalyser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\260\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\005\000\002\004\005" +
    "\000\002\005\005\000\002\005\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\007\004\000\002" +
    "\007\002\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\004\000\002\010\004\000\002\012\003" +
    "\000\002\012\003\000\002\013\003\000\002\013\003\000" +
    "\002\011\004\000\002\011\004\000\002\020\004\000\002" +
    "\014\005\000\002\014\004\000\002\015\010\000\002\015" +
    "\006\000\002\015\007\000\002\016\004\000\002\016\007" +
    "\000\002\017\004\000\002\066\003\000\002\066\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\004\000\002" +
    "\021\003\000\002\021\003\000\002\021\004\000\002\023" +
    "\005\000\002\024\004\000\002\024\005\000\002\025\003" +
    "\000\002\025\005\000\002\025\003\000\002\025\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\027\005\000\002\030\004\000\002\030\002\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\004" +
    "\000\002\031\004\000\002\032\005\000\002\033\004\000" +
    "\002\033\002\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\004\000\002\035\005\000\002\036\003\000" +
    "\002\037\006\000\002\037\006\000\002\037\006\000\002" +
    "\037\006\000\002\037\006\000\002\037\006\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\041\004" +
    "\000\002\042\004\000\002\042\005\000\002\043\006\000" +
    "\002\044\004\000\002\044\004\000\002\044\002\000\002" +
    "\045\007\000\002\046\005\000\002\046\005\000\002\046" +
    "\006\000\002\046\006\000\002\047\005\000\002\050\007" +
    "\000\002\051\003\000\002\052\005\000\002\052\003\000" +
    "\002\053\005\000\002\053\003\000\002\054\005\000\002" +
    "\054\003\000\002\055\005\000\002\055\005\000\002\055" +
    "\005\000\002\055\003\000\002\056\005\000\002\056\005" +
    "\000\002\056\005\000\002\056\005\000\002\056\003\000" +
    "\002\057\005\000\002\057\005\000\002\057\003\000\002" +
    "\060\005\000\002\060\005\000\002\060\005\000\002\060" +
    "\003\000\002\061\004\000\002\061\004\000\002\061\004" +
    "\000\002\061\003\000\002\062\003\000\002\062\003\000" +
    "\002\062\003\000\002\062\003\000\002\063\003\000\002" +
    "\063\003\000\002\063\003\000\002\063\003\000\002\064" +
    "\003\000\002\064\003\000\002\065\005\000\002\065\003" +
    "\000\002\065\003\000\002\065\003\000\002\065\003\000" +
    "\002\065\003\000\002\070\006\000\002\067\005\000\002" +
    "\071\004\000\002\102\004\000\002\102\004\000\002\102" +
    "\007\000\002\072\003\000\002\072\003\000\002\073\003" +
    "\000\002\074\003\000\002\074\003\000\002\074\003\000" +
    "\002\074\003\000\002\074\003\000\002\074\003\000\002" +
    "\074\003\000\002\075\003\000\002\075\005\000\002\075" +
    "\010\000\002\075\005\000\002\076\003\000\002\076\005" +
    "\000\002\077\004\000\002\077\005\000\002\100\003\000" +
    "\002\100\005\000\002\101\003\000\002\101\003\000\002" +
    "\103\003\000\002\103\006\000\002\103\003\000\002\103" +
    "\006\000\002\104\004\000\002\104\005\000\002\105\003" +
    "\000\002\105\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0134\000\020\002\ufffe\003\ufffe\005\ufffe\007\ufffe\010" +
    "\ufffe\030\ufffe\031\ufffe\001\002\000\004\002\u0136\001\002" +
    "\000\020\002\ufff5\003\026\005\027\007\017\010\006\030" +
    "\024\031\010\001\002\000\012\003\u012e\004\u0130\005\u012c" +
    "\007\u0131\001\002\000\016\002\ufff2\003\ufff2\005\ufff2\007" +
    "\ufff2\030\ufff2\031\ufff2\001\002\000\010\003\u0118\005\u0119" +
    "\007\u011a\001\002\000\016\002\uffee\003\uffee\005\uffee\007" +
    "\uffee\030\uffee\031\uffee\001\002\000\016\002\ufff5\003\026" +
    "\005\027\007\017\030\024\031\010\001\002\000\010\034" +
    "\262\067\242\073\263\001\002\000\004\073\260\001\002" +
    "\000\010\003\247\004\250\007\251\001\002\000\020\002" +
    "\uffff\003\uffff\005\uffff\007\uffff\010\uffff\030\uffff\031\uffff" +
    "\001\002\000\016\003\uff59\004\uff59\005\uff59\007\uff59\034" +
    "\032\061\254\001\002\000\004\002\001\001\002\000\016" +
    "\002\ufff4\003\ufff4\005\ufff4\007\ufff4\030\ufff4\031\ufff4\001" +
    "\002\000\016\002\uffef\003\uffef\005\uffef\007\uffef\030\uffef" +
    "\031\uffef\001\002\000\010\003\247\004\250\007\251\001" +
    "\002\000\006\005\027\007\017\001\002\000\016\002\ufff3" +
    "\003\ufff3\005\ufff3\007\ufff3\030\ufff3\031\ufff3\001\002\000" +
    "\006\041\210\073\207\001\002\000\016\003\uff57\004\uff57" +
    "\005\uff57\007\uff57\034\032\061\030\001\002\000\006\005" +
    "\156\007\157\001\002\000\072\003\uff71\004\uff71\005\uff71" +
    "\007\uff71\034\uff71\035\uff71\036\uff71\037\uff71\040\uff71\041" +
    "\uff71\043\uff71\044\uff71\045\uff71\047\uff71\051\uff71\053\uff71" +
    "\055\uff71\057\uff71\060\uff71\061\uff71\062\uff71\063\uff71\064" +
    "\uff71\065\uff71\066\uff71\071\uff71\072\uff71\073\uff71\001\002" +
    "\000\050\003\050\004\103\005\055\006\045\007\042\011" +
    "\035\012\070\013\033\014\076\015\047\016\100\017\077" +
    "\020\052\034\102\035\101\036\064\047\044\051\037\070" +
    "\041\001\002\000\064\034\uff68\035\uff68\036\uff68\037\uff68" +
    "\040\uff68\041\uff68\042\uff68\043\uff68\044\uff68\045\uff68\047" +
    "\uff68\051\uff68\053\uff68\055\uff68\057\uff68\060\uff68\061\uff68" +
    "\062\uff68\063\uff68\064\uff68\065\uff68\066\uff68\071\uff68\072" +
    "\uff68\073\uff68\001\002\000\006\035\203\045\202\001\002" +
    "\000\064\034\uff6c\035\uff6c\036\uff6c\037\uff6c\040\uff6c\041" +
    "\uff6c\042\uff6c\043\uff6c\044\uff6c\045\uff6c\047\uff6c\051\uff6c" +
    "\053\uff6c\055\uff6c\057\uff6c\060\uff6c\061\uff6c\062\uff6c\063" +
    "\uff6c\064\uff6c\065\uff6c\066\uff6c\071\uff6c\072\uff6c\073\uff6c" +
    "\001\002\000\062\034\uff79\035\uff79\036\uff79\037\uff79\040" +
    "\uff79\041\uff79\043\uff79\044\uff79\045\uff79\047\uff79\051\uff79" +
    "\053\uff79\055\uff79\057\uff79\060\uff79\061\uff79\062\uff79\063" +
    "\uff79\064\uff79\065\uff79\066\uff79\071\uff79\072\uff79\073\uff79" +
    "\001\002\000\046\003\050\004\103\005\055\006\045\007" +
    "\042\011\035\012\070\013\033\014\076\015\047\016\100" +
    "\017\077\020\052\034\102\036\064\047\044\051\037\070" +
    "\041\001\002\000\062\034\uff81\035\uff85\036\uff85\037\uff85" +
    "\040\uff85\041\uff85\043\uff85\044\uff85\045\uff85\047\uff85\051" +
    "\uff85\053\uff85\055\uff85\057\uff85\060\uff85\061\uff85\062\uff85" +
    "\063\uff85\064\uff85\065\uff85\066\uff85\071\uff85\072\uff85\073" +
    "\uff85\001\002\000\046\003\050\004\103\005\055\006\045" +
    "\007\042\011\035\012\070\013\033\014\076\015\047\016" +
    "\100\017\077\020\052\034\102\036\064\047\044\051\037" +
    "\070\041\001\002\000\006\034\032\061\175\001\002\000" +
    "\062\034\uff7f\035\uff83\036\uff83\037\uff83\040\uff83\041\uff83" +
    "\043\uff83\044\uff83\045\uff83\047\uff83\051\uff83\053\uff83\055" +
    "\uff83\057\uff83\060\uff83\061\uff83\062\uff83\063\uff83\064\uff83" +
    "\065\uff83\066\uff83\071\uff83\072\uff83\073\uff83\001\002\000" +
    "\046\003\050\004\103\005\055\006\045\007\042\011\035" +
    "\012\070\013\033\014\076\015\047\016\100\017\077\020" +
    "\052\034\102\036\064\047\044\051\037\070\041\001\002" +
    "\000\076\034\uff6e\035\uff6e\036\uff6e\037\uff6e\040\uff6e\041" +
    "\uff6e\043\uff6e\044\uff6e\045\uff6e\046\uff6e\047\uff6e\050\uff6e" +
    "\051\uff6e\052\uff6e\053\uff6e\054\uff6e\055\uff6e\056\uff6e\057" +
    "\uff6e\060\uff6e\061\uff6e\062\uff6e\063\uff6e\064\uff6e\065\uff6e" +
    "\066\uff6e\067\uff6e\071\uff6e\072\uff6e\073\uff6e\001\002\000" +
    "\062\034\uff7a\035\uff7a\036\uff7a\037\uff7a\040\uff7a\041\uff7a" +
    "\043\uff7a\044\uff7a\045\uff7a\047\uff7a\051\uff7a\053\uff7a\055" +
    "\uff7a\057\uff7a\060\uff7a\061\uff7a\062\uff7a\063\uff7a\064\uff7a" +
    "\065\uff7a\066\uff7a\071\uff7a\072\uff7a\073\uff7a\001\002\000" +
    "\064\034\uff6a\035\uff6a\036\uff6a\037\uff6a\040\uff6a\041\uff6a" +
    "\042\uff6a\043\uff6a\044\uff6a\045\uff6a\047\uff6a\051\uff6a\053" +
    "\uff6a\055\uff6a\057\uff6a\060\uff6a\061\uff6a\062\uff6a\063\uff6a" +
    "\064\uff6a\065\uff6a\066\uff6a\071\uff6a\072\uff6a\073\uff6a\001" +
    "\002\000\062\034\uff76\035\uff76\036\uff76\037\uff76\040\uff76" +
    "\041\uff76\043\uff76\044\uff76\045\uff76\047\uff76\051\uff76\053" +
    "\uff76\055\uff76\057\uff76\060\uff76\061\uff76\062\uff76\063\uff76" +
    "\064\uff76\065\uff76\066\uff76\071\uff76\072\uff76\073\uff76\001" +
    "\002\000\060\035\uff82\036\uff82\037\uff82\040\uff82\041\uff82" +
    "\043\uff82\044\uff82\045\uff82\047\uff82\051\uff82\053\uff82\055" +
    "\uff82\057\uff82\060\uff82\061\uff82\062\uff82\063\uff82\064\uff82" +
    "\065\uff82\066\uff82\071\uff82\072\uff82\073\uff82\001\002\000" +
    "\064\034\uff66\035\uff66\036\uff66\037\uff66\040\uff66\041\uff66" +
    "\042\uff66\043\uff66\044\uff66\045\uff66\047\uff66\051\uff66\053" +
    "\uff66\055\uff66\057\uff66\060\uff66\061\uff66\062\uff66\063\uff66" +
    "\064\uff66\065\uff66\066\uff66\071\uff66\072\uff66\073\uff66\001" +
    "\002\000\060\035\uff86\036\170\037\uff86\040\uff86\041\uff86" +
    "\043\uff86\044\167\045\uff86\047\uff86\051\uff86\053\uff86\055" +
    "\uff86\057\uff86\060\uff86\061\uff86\062\uff86\063\uff86\064\uff86" +
    "\065\uff86\066\uff86\071\uff86\072\uff86\073\uff86\001\002\000" +
    "\054\035\uff8a\037\uff8a\040\uff8a\041\uff8a\043\uff8a\045\uff8a" +
    "\047\uff8a\051\uff8a\053\uff8a\055\uff8a\057\uff8a\060\uff8a\061" +
    "\uff8a\062\uff8a\063\uff8a\064\uff8a\065\uff8a\066\uff8a\071\uff8a" +
    "\072\uff8a\073\uff8a\001\002\000\062\034\032\035\uff6d\036" +
    "\uff6d\037\uff6d\040\uff6d\041\uff6d\043\uff6d\044\uff6d\045\uff6d" +
    "\047\uff6d\051\uff6d\053\uff6d\055\uff6d\057\uff6d\060\uff6d\061" +
    "\uff6d\062\uff6d\063\uff6d\064\uff6d\065\uff6d\066\uff6d\071\uff6d" +
    "\072\uff6d\073\uff6d\001\002\000\054\035\uff8e\037\uff8e\040" +
    "\uff8e\041\uff8e\043\uff8e\045\uff8e\047\uff8e\051\uff8e\053\131" +
    "\055\132\057\130\060\uff8e\061\uff8e\062\uff8e\063\uff8e\064" +
    "\uff8e\065\uff8e\066\uff8e\071\uff8e\072\uff8e\073\uff8e\001\002" +
    "\000\062\034\uff7e\035\uff7d\036\uff7d\037\uff7d\040\uff7d\041" +
    "\uff7d\043\uff7d\044\uff7d\045\uff7d\047\uff7d\051\uff7d\053\uff7d" +
    "\055\uff7d\057\uff7d\060\uff7d\061\uff7d\062\uff7d\063\uff7d\064" +
    "\uff7d\065\uff7d\066\uff7d\071\uff7d\072\uff7d\073\uff7d\001\002" +
    "\000\046\035\uff91\037\uff91\040\uff91\041\uff91\043\uff91\045" +
    "\uff91\047\125\051\126\060\uff91\061\uff91\062\uff91\063\uff91" +
    "\064\uff91\065\uff91\066\uff91\071\uff91\072\uff91\073\uff91\001" +
    "\002\000\042\035\uff96\037\uff96\040\uff96\041\uff96\043\uff96" +
    "\045\uff96\060\122\061\120\062\123\063\121\064\uff96\065" +
    "\uff96\066\uff96\071\uff96\072\uff96\073\uff96\001\002\000\004" +
    "\034\032\001\002\000\032\035\uff9a\037\uff9a\040\uff9a\041" +
    "\uff9a\043\uff9a\045\uff9a\064\114\065\115\066\116\071\uff9a" +
    "\072\uff9a\073\uff9a\001\002\000\046\003\050\004\103\005" +
    "\055\006\045\007\144\011\035\012\070\013\033\014\076" +
    "\015\047\016\100\017\077\020\052\034\102\036\064\047" +
    "\044\051\037\070\041\001\002\000\024\035\uff9c\037\uff9c" +
    "\040\uff9c\041\uff9c\043\uff9c\045\uff9c\071\112\072\uff9c\073" +
    "\uff9c\001\002\000\062\034\uff78\035\uff78\036\uff78\037\uff78" +
    "\040\uff78\041\uff78\043\uff78\044\uff78\045\uff78\047\uff78\051" +
    "\uff78\053\uff78\055\uff78\057\uff78\060\uff78\061\uff78\062\uff78" +
    "\063\uff78\064\uff78\065\uff78\066\uff78\071\uff78\072\uff78\073" +
    "\uff78\001\002\000\022\035\uff9e\037\uff9e\040\uff9e\041\uff9e" +
    "\043\uff9e\045\uff9e\072\110\073\uff9e\001\002\000\064\034" +
    "\uff6b\035\uff6b\036\uff6b\037\uff6b\040\uff6b\041\uff6b\042\uff6b" +
    "\043\uff6b\044\uff6b\045\uff6b\047\uff6b\051\uff6b\053\uff6b\055" +
    "\uff6b\057\uff6b\060\uff6b\061\uff6b\062\uff6b\063\uff6b\064\uff6b" +
    "\065\uff6b\066\uff6b\071\uff6b\072\uff6b\073\uff6b\001\002\000" +
    "\020\035\uffa0\037\uffa0\040\uffa0\041\uffa0\043\105\045\uffa0" +
    "\073\uffa0\001\002\000\062\034\uff80\035\uff84\036\uff84\037" +
    "\uff84\040\uff84\041\uff84\043\uff84\044\uff84\045\uff84\047\uff84" +
    "\051\uff84\053\uff84\055\uff84\057\uff84\060\uff84\061\uff84\062" +
    "\uff84\063\uff84\064\uff84\065\uff84\066\uff84\071\uff84\072\uff84" +
    "\073\uff84\001\002\000\060\035\uff7c\036\uff7c\037\uff7c\040" +
    "\uff7c\041\uff7c\043\uff7c\044\uff7c\045\uff7c\047\uff7c\051\uff7c" +
    "\053\uff7c\055\uff7c\057\uff7c\060\uff7c\061\uff7c\062\uff7c\063" +
    "\uff7c\064\uff7c\065\uff7c\066\uff7c\071\uff7c\072\uff7c\073\uff7c" +
    "\001\002\000\062\034\uff77\035\uff77\036\uff77\037\uff77\040" +
    "\uff77\041\uff77\043\uff77\044\uff77\045\uff77\047\uff77\051\uff77" +
    "\053\uff77\055\uff77\057\uff77\060\uff77\061\uff77\062\uff77\063" +
    "\uff77\064\uff77\065\uff77\066\uff77\071\uff77\072\uff77\073\uff77" +
    "\001\002\000\006\035\uff53\045\uff53\001\002\000\062\034" +
    "\uff65\035\uff65\036\uff65\037\uff65\040\uff65\041\uff65\043\uff65" +
    "\044\uff65\045\uff65\047\uff65\051\uff65\053\uff65\055\uff65\057" +
    "\uff65\060\uff65\061\uff65\062\uff65\063\uff65\064\uff65\065\uff65" +
    "\066\uff65\071\uff65\072\uff65\073\uff65\001\002\000\064\034" +
    "\uff67\035\uff67\036\uff67\037\uff67\040\uff67\041\uff67\042\uff67" +
    "\043\uff67\044\uff67\045\uff67\047\uff67\051\uff67\053\uff67\055" +
    "\uff67\057\uff67\060\uff67\061\uff67\062\uff67\063\uff67\064\uff67" +
    "\065\uff67\066\uff67\071\uff67\072\uff67\073\uff67\001\002\000" +
    "\064\034\uff69\035\uff69\036\uff69\037\uff69\040\uff69\041\uff69" +
    "\042\uff69\043\uff69\044\uff69\045\uff69\047\uff69\051\uff69\053" +
    "\uff69\055\uff69\057\uff69\060\uff69\061\uff69\062\uff69\063\uff69" +
    "\064\uff69\065\uff69\066\uff69\071\uff69\072\uff69\073\uff69\001" +
    "\002\000\072\003\uff55\004\uff55\005\uff55\007\uff55\034\uff55" +
    "\035\uff55\036\uff55\037\uff55\040\uff55\041\uff55\043\uff55\044" +
    "\uff55\045\uff55\047\uff55\051\uff55\053\uff55\055\uff55\057\uff55" +
    "\060\uff55\061\uff55\062\uff55\063\uff55\064\uff55\065\uff55\066" +
    "\uff55\071\uff55\072\uff55\073\uff55\001\002\000\046\003\050" +
    "\004\103\005\055\006\045\007\042\011\035\012\070\013" +
    "\033\014\076\015\047\016\100\017\077\020\052\034\102" +
    "\036\064\047\044\051\037\070\041\001\002\000\076\034" +
    "\uff6f\035\uff6f\036\uff6f\037\uff6f\040\uff6f\041\uff6f\043\uff6f" +
    "\044\uff6f\045\uff6f\046\uff6f\047\uff6f\050\uff6f\051\uff6f\052" +
    "\uff6f\053\uff6f\054\uff6f\055\uff6f\056\uff6f\057\uff6f\060\uff6f" +
    "\061\uff6f\062\uff6f\063\uff6f\064\uff6f\065\uff6f\066\uff6f\067" +
    "\uff6f\071\uff6f\072\uff6f\073\uff6f\001\002\000\006\035\106" +
    "\043\105\001\002\000\046\003\050\004\103\005\055\006" +
    "\045\007\042\011\035\012\070\013\033\014\076\015\047" +
    "\016\100\017\077\020\052\034\102\036\064\047\044\051" +
    "\037\070\041\001\002\000\062\034\uff7b\035\uff7b\036\uff7b" +
    "\037\uff7b\040\uff7b\041\uff7b\043\uff7b\044\uff7b\045\uff7b\047" +
    "\uff7b\051\uff7b\053\uff7b\055\uff7b\057\uff7b\060\uff7b\061\uff7b" +
    "\062\uff7b\063\uff7b\064\uff7b\065\uff7b\066\uff7b\071\uff7b\072" +
    "\uff7b\073\uff7b\001\002\000\022\035\uff9f\037\uff9f\040\uff9f" +
    "\041\uff9f\043\uff9f\045\uff9f\072\110\073\uff9f\001\002\000" +
    "\046\003\050\004\103\005\055\006\045\007\042\011\035" +
    "\012\070\013\033\014\076\015\047\016\100\017\077\020" +
    "\052\034\102\036\064\047\044\051\037\070\041\001\002" +
    "\000\024\035\uff9d\037\uff9d\040\uff9d\041\uff9d\043\uff9d\045" +
    "\uff9d\071\112\072\uff9d\073\uff9d\001\002\000\046\003\050" +
    "\004\103\005\055\006\045\007\042\011\035\012\070\013" +
    "\033\014\076\015\047\016\100\017\077\020\052\034\102" +
    "\036\064\047\044\051\037\070\041\001\002\000\032\035" +
    "\uff9b\037\uff9b\040\uff9b\041\uff9b\043\uff9b\045\uff9b\064\114" +
    "\065\115\066\116\071\uff9b\072\uff9b\073\uff9b\001\002\000" +
    "\046\003\050\004\103\005\055\006\045\007\042\011\035" +
    "\012\070\013\033\014\076\015\047\016\100\017\077\020" +
    "\052\034\102\036\064\047\044\051\037\070\041\001\002" +
    "\000\046\003\050\004\103\005\055\006\045\007\042\011" +
    "\035\012\070\013\033\014\076\015\047\016\100\017\077" +
    "\020\052\034\102\036\064\047\044\051\037\070\041\001" +
    "\002\000\046\003\050\004\103\005\055\006\045\007\042" +
    "\011\035\012\070\013\033\014\076\015\047\016\100\017" +
    "\077\020\052\034\102\036\064\047\044\051\037\070\041" +
    "\001\002\000\042\035\uff98\037\uff98\040\uff98\041\uff98\043" +
    "\uff98\045\uff98\060\122\061\120\062\123\063\121\064\uff98" +
    "\065\uff98\066\uff98\071\uff98\072\uff98\073\uff98\001\002\000" +
    "\046\003\050\004\103\005\055\006\045\007\042\011\035" +
    "\012\070\013\033\014\076\015\047\016\100\017\077\020" +
    "\052\034\102\036\064\047\044\051\037\070\041\001\002" +
    "\000\046\003\050\004\103\005\055\006\045\007\042\011" +
    "\035\012\070\013\033\014\076\015\047\016\100\017\077" +
    "\020\052\034\102\036\064\047\044\051\037\070\041\001" +
    "\002\000\046\003\050\004\103\005\055\006\045\007\042" +
    "\011\035\012\070\013\033\014\076\015\047\016\100\017" +
    "\077\020\052\034\102\036\064\047\044\051\037\070\041" +
    "\001\002\000\046\003\050\004\103\005\055\006\045\007" +
    "\042\011\035\012\070\013\033\014\076\015\047\016\100" +
    "\017\077\020\052\034\102\036\064\047\044\051\037\070" +
    "\041\001\002\000\046\035\uff94\037\uff94\040\uff94\041\uff94" +
    "\043\uff94\045\uff94\047\125\051\126\060\uff94\061\uff94\062" +
    "\uff94\063\uff94\064\uff94\065\uff94\066\uff94\071\uff94\072\uff94" +
    "\073\uff94\001\002\000\046\003\050\004\103\005\055\006" +
    "\045\007\042\011\035\012\070\013\033\014\076\015\047" +
    "\016\100\017\077\020\052\034\102\036\064\047\044\051" +
    "\037\070\041\001\002\000\046\003\050\004\103\005\055" +
    "\006\045\007\042\011\035\012\070\013\033\014\076\015" +
    "\047\016\100\017\077\020\052\034\102\036\064\047\044" +
    "\051\037\070\041\001\002\000\054\035\uff8f\037\uff8f\040" +
    "\uff8f\041\uff8f\043\uff8f\045\uff8f\047\uff8f\051\uff8f\053\131" +
    "\055\132\057\130\060\uff8f\061\uff8f\062\uff8f\063\uff8f\064" +
    "\uff8f\065\uff8f\066\uff8f\071\uff8f\072\uff8f\073\uff8f\001\002" +
    "\000\046\003\050\004\103\005\055\006\045\007\042\011" +
    "\035\012\070\013\033\014\076\015\047\016\100\017\077" +
    "\020\052\034\102\036\064\047\044\051\037\070\041\001" +
    "\002\000\046\003\050\004\103\005\055\006\045\007\042" +
    "\011\035\012\070\013\033\014\076\015\047\016\100\017" +
    "\077\020\052\034\102\036\064\047\044\051\037\070\041" +
    "\001\002\000\046\003\050\004\103\005\055\006\045\007" +
    "\042\011\035\012\070\013\033\014\076\015\047\016\100" +
    "\017\077\020\052\034\102\036\064\047\044\051\037\070" +
    "\041\001\002\000\054\035\uff8c\037\uff8c\040\uff8c\041\uff8c" +
    "\043\uff8c\045\uff8c\047\uff8c\051\uff8c\053\uff8c\055\uff8c\057" +
    "\uff8c\060\uff8c\061\uff8c\062\uff8c\063\uff8c\064\uff8c\065\uff8c" +
    "\066\uff8c\071\uff8c\072\uff8c\073\uff8c\001\002\000\054\035" +
    "\uff8d\037\uff8d\040\uff8d\041\uff8d\043\uff8d\045\uff8d\047\uff8d" +
    "\051\uff8d\053\uff8d\055\uff8d\057\uff8d\060\uff8d\061\uff8d\062" +
    "\uff8d\063\uff8d\064\uff8d\065\uff8d\066\uff8d\071\uff8d\072\uff8d" +
    "\073\uff8d\001\002\000\054\035\uff8b\037\uff8b\040\uff8b\041" +
    "\uff8b\043\uff8b\045\uff8b\047\uff8b\051\uff8b\053\uff8b\055\uff8b" +
    "\057\uff8b\060\uff8b\061\uff8b\062\uff8b\063\uff8b\064\uff8b\065" +
    "\uff8b\066\uff8b\071\uff8b\072\uff8b\073\uff8b\001\002\000\054" +
    "\035\uff90\037\uff90\040\uff90\041\uff90\043\uff90\045\uff90\047" +
    "\uff90\051\uff90\053\131\055\132\057\130\060\uff90\061\uff90" +
    "\062\uff90\063\uff90\064\uff90\065\uff90\066\uff90\071\uff90\072" +
    "\uff90\073\uff90\001\002\000\046\035\uff92\037\uff92\040\uff92" +
    "\041\uff92\043\uff92\045\uff92\047\125\051\126\060\uff92\061" +
    "\uff92\062\uff92\063\uff92\064\uff92\065\uff92\066\uff92\071\uff92" +
    "\072\uff92\073\uff92\001\002\000\046\035\uff95\037\uff95\040" +
    "\uff95\041\uff95\043\uff95\045\uff95\047\125\051\126\060\uff95" +
    "\061\uff95\062\uff95\063\uff95\064\uff95\065\uff95\066\uff95\071" +
    "\uff95\072\uff95\073\uff95\001\002\000\046\035\uff93\037\uff93" +
    "\040\uff93\041\uff93\043\uff93\045\uff93\047\125\051\126\060" +
    "\uff93\061\uff93\062\uff93\063\uff93\064\uff93\065\uff93\066\uff93" +
    "\071\uff93\072\uff93\073\uff93\001\002\000\042\035\uff99\037" +
    "\uff99\040\uff99\041\uff99\043\uff99\045\uff99\060\122\061\120" +
    "\062\123\063\121\064\uff99\065\uff99\066\uff99\071\uff99\072" +
    "\uff99\073\uff99\001\002\000\042\035\uff97\037\uff97\040\uff97" +
    "\041\uff97\043\uff97\045\uff97\060\122\061\120\062\123\063" +
    "\121\064\uff97\065\uff97\066\uff97\071\uff97\072\uff97\073\uff97" +
    "\001\002\000\010\034\032\037\152\061\153\001\002\000" +
    "\006\037\147\045\150\001\002\000\006\037\uff61\045\uff61" +
    "\001\002\000\062\034\uff62\035\uff62\036\uff62\037\uff62\040" +
    "\uff62\041\uff62\043\uff62\044\uff62\045\uff62\047\uff62\051\uff62" +
    "\053\uff62\055\uff62\057\uff62\060\uff62\061\uff62\062\uff62\063" +
    "\uff62\064\uff62\065\uff62\066\uff62\071\uff62\072\uff62\073\uff62" +
    "\001\002\000\046\003\050\004\103\005\055\006\045\007" +
    "\042\011\035\012\070\013\033\014\076\015\047\016\100" +
    "\017\077\020\052\034\102\036\064\047\044\051\037\070" +
    "\041\001\002\000\006\037\uff60\045\uff60\001\002\000\062" +
    "\034\uff64\035\uff64\036\uff64\037\uff64\040\uff64\041\uff64\043" +
    "\uff64\044\uff64\045\uff64\047\uff64\051\uff64\053\uff64\055\uff64" +
    "\057\uff64\060\uff64\061\uff64\062\uff64\063\uff64\064\uff64\065" +
    "\uff64\066\uff64\071\uff64\072\uff64\073\uff64\001\002\000\006" +
    "\005\156\007\157\001\002\000\072\003\uff72\004\uff72\005" +
    "\uff72\007\uff72\034\uff72\035\uff72\036\uff72\037\uff72\040\uff72" +
    "\041\uff72\043\uff72\044\uff72\045\uff72\047\uff72\051\uff72\053" +
    "\uff72\055\uff72\057\uff72\060\uff72\061\uff72\062\uff72\063\uff72" +
    "\064\uff72\065\uff72\066\uff72\071\uff72\072\uff72\073\uff72\001" +
    "\002\000\004\063\163\001\002\000\014\003\uff57\004\uff57" +
    "\007\uff57\061\030\063\uff57\001\002\000\014\003\uff59\004" +
    "\uff59\007\uff59\061\160\063\uff59\001\002\000\006\005\156" +
    "\007\157\001\002\000\004\063\162\001\002\000\012\003" +
    "\uff58\004\uff58\007\uff58\063\uff58\001\002\000\006\034\032" +
    "\037\164\001\002\000\062\034\uff63\035\uff63\036\uff63\037" +
    "\uff63\040\uff63\041\uff63\043\uff63\044\uff63\045\uff63\047\uff63" +
    "\051\uff63\053\uff63\055\uff63\057\uff63\060\uff63\061\uff63\062" +
    "\uff63\063\uff63\064\uff63\065\uff63\066\uff63\071\uff63\072\uff63" +
    "\073\uff63\001\002\000\072\003\uff70\004\uff70\005\uff70\007" +
    "\uff70\034\uff70\035\uff70\036\uff70\037\uff70\040\uff70\041\uff70" +
    "\043\uff70\044\uff70\045\uff70\047\uff70\051\uff70\053\uff70\055" +
    "\uff70\057\uff70\060\uff70\061\uff70\062\uff70\063\uff70\064\uff70" +
    "\065\uff70\066\uff70\071\uff70\072\uff70\073\uff70\001\002\000" +
    "\062\034\uff73\035\uff73\036\uff73\037\uff73\040\uff73\041\uff73" +
    "\043\uff73\044\uff73\045\uff73\047\uff73\051\uff73\053\uff73\055" +
    "\uff73\057\uff73\060\uff73\061\uff73\062\uff73\063\uff73\064\uff73" +
    "\065\uff73\066\uff73\071\uff73\072\uff73\073\uff73\001\002\000" +
    "\004\004\173\001\002\000\046\003\050\004\103\005\055" +
    "\006\045\007\042\011\035\012\070\013\033\014\076\015" +
    "\047\016\100\017\077\020\052\034\102\036\064\047\044" +
    "\051\037\070\041\001\002\000\004\037\172\001\002\000" +
    "\076\034\uff75\035\uff75\036\uff75\037\uff75\040\uff75\041\uff75" +
    "\043\uff75\044\uff75\045\uff75\046\uff75\047\uff75\050\uff75\051" +
    "\uff75\052\uff75\053\uff75\054\uff75\055\uff75\056\uff75\057\uff75" +
    "\060\uff75\061\uff75\062\uff75\063\uff75\064\uff75\065\uff75\066" +
    "\uff75\067\uff75\071\uff75\072\uff75\073\uff75\001\002\000\076" +
    "\034\uff74\035\uff74\036\uff74\037\uff74\040\uff74\041\uff74\043" +
    "\uff74\044\uff74\045\uff74\046\uff74\047\uff74\050\uff74\051\uff74" +
    "\052\uff74\053\uff74\054\uff74\055\uff74\056\uff74\057\uff74\060" +
    "\uff74\061\uff74\062\uff74\063\uff74\064\uff74\065\uff74\066\uff74" +
    "\067\uff74\071\uff74\072\uff74\073\uff74\001\002\000\054\035" +
    "\uff89\037\uff89\040\uff89\041\uff89\043\uff89\045\uff89\047\uff89" +
    "\051\uff89\053\uff89\055\uff89\057\uff89\060\uff89\061\uff89\062" +
    "\uff89\063\uff89\064\uff89\065\uff89\066\uff89\071\uff89\072\uff89" +
    "\073\uff89\001\002\000\006\005\156\007\157\001\002\000" +
    "\004\063\177\001\002\000\004\034\032\001\002\000\054" +
    "\035\uff87\037\uff87\040\uff87\041\uff87\043\uff87\045\uff87\047" +
    "\uff87\051\uff87\053\uff87\055\uff87\057\uff87\060\uff87\061\uff87" +
    "\062\uff87\063\uff87\064\uff87\065\uff87\066\uff87\071\uff87\072" +
    "\uff87\073\uff87\001\002\000\054\035\uff88\037\uff88\040\uff88" +
    "\041\uff88\043\uff88\045\uff88\047\uff88\051\uff88\053\uff88\055" +
    "\uff88\057\uff88\060\uff88\061\uff88\062\uff88\063\uff88\064\uff88" +
    "\065\uff88\066\uff88\071\uff88\072\uff88\073\uff88\001\002\000" +
    "\046\003\050\004\103\005\055\006\045\007\042\011\035" +
    "\012\070\013\033\014\076\015\047\016\100\017\077\020" +
    "\052\034\102\036\064\047\044\051\037\070\041\001\002" +
    "\000\072\003\uff54\004\uff54\005\uff54\007\uff54\034\uff54\035" +
    "\uff54\036\uff54\037\uff54\040\uff54\041\uff54\043\uff54\044\uff54" +
    "\045\uff54\047\uff54\051\uff54\053\uff54\055\uff54\057\uff54\060" +
    "\uff54\061\uff54\062\uff54\063\uff54\064\uff54\065\uff54\066\uff54" +
    "\071\uff54\072\uff54\073\uff54\001\002\000\006\035\uff52\045" +
    "\uff52\001\002\000\004\063\206\001\002\000\014\003\uff56" +
    "\004\uff56\005\uff56\007\uff56\063\uff56\001\002\000\016\002" +
    "\ufff1\003\ufff1\005\ufff1\007\ufff1\030\ufff1\031\ufff1\001\002" +
    "\000\016\002\ufff0\003\ufff0\005\ufff0\007\ufff0\030\ufff0\031" +
    "\ufff0\001\002\000\010\003\213\005\215\007\216\001\002" +
    "\000\010\003\213\005\215\007\216\001\002\000\010\003" +
    "\uffda\067\uffda\073\uffda\001\002\000\004\073\220\001\002" +
    "\000\010\003\uffdb\067\uffdb\073\uffdb\001\002\000\004\003" +
    "\217\001\002\000\010\003\uffd9\067\uffd9\073\uffd9\001\002" +
    "\000\016\002\uffe5\003\uffe5\005\uffe5\007\uffe5\030\uffe5\031" +
    "\uffe5\001\002\000\006\003\223\067\222\001\002\000\050" +
    "\003\050\004\103\005\055\006\045\007\042\011\035\012" +
    "\070\013\033\014\076\015\047\016\100\017\077\020\052" +
    "\034\102\036\064\040\226\047\044\051\037\070\041\001" +
    "\002\000\004\073\224\001\002\000\016\002\uffe4\003\uffe4" +
    "\005\uffe4\007\uffe4\030\uffe4\031\uffe4\001\002\000\010\041" +
    "\uffdf\045\uffdf\073\uffdf\001\002\000\012\005\027\007\017" +
    "\030\240\041\233\001\002\000\004\073\231\001\002\000" +
    "\010\041\uffe0\045\uffe0\073\uffe0\001\002\000\016\002\uffe6" +
    "\003\uffe6\005\uffe6\007\uffe6\030\uffe6\031\uffe6\001\002\000" +
    "\006\041\uff5d\045\245\001\002\000\010\041\uff5f\045\uff5f" +
    "\073\uff5f\001\002\000\004\041\244\001\002\000\004\067" +
    "\242\001\002\000\006\041\uff5a\045\uff5a\001\002\000\006" +
    "\041\uff5b\045\uff5b\001\002\000\006\005\027\007\017\001" +
    "\002\000\010\041\uffe1\045\uffe1\073\uffe1\001\002\000\050" +
    "\003\050\004\103\005\055\006\045\007\042\011\035\012" +
    "\070\013\033\014\076\015\047\016\100\017\077\020\052" +
    "\034\102\036\064\040\226\047\044\051\037\070\041\001" +
    "\002\000\010\041\uffe8\045\uffe8\073\uffe8\001\002\000\010" +
    "\041\uff5e\045\uff5e\073\uff5e\001\002\000\010\005\027\007" +
    "\017\030\240\001\002\000\004\041\uff5c\001\002\000\022" +
    "\003\uffdd\026\uffdd\034\uffdd\035\uffdd\041\uffdd\045\uffdd\067" +
    "\uffdd\073\uffdd\001\002\000\022\003\uffde\026\uffde\034\uffde" +
    "\035\uffde\041\uffde\045\uffde\067\uffde\073\uffde\001\002\000" +
    "\004\003\253\001\002\000\010\041\uffe7\045\uffe7\073\uffe7" +
    "\001\002\000\022\003\uffdc\026\uffdc\034\uffdc\035\uffdc\041" +
    "\uffdc\045\uffdc\067\uffdc\073\uffdc\001\002\000\006\005\156" +
    "\007\157\001\002\000\004\063\256\001\002\000\014\003" +
    "\uff58\004\uff58\005\uff58\007\uff58\034\032\001\002\000\016" +
    "\026\uffe9\034\uffe9\035\uffe9\045\uffe9\067\uffe9\073\uffe9\001" +
    "\002\000\070\002\uffea\003\uffea\004\uffea\005\uffea\006\uffea" +
    "\007\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016" +
    "\uffea\017\uffea\020\uffea\021\uffea\023\uffea\024\uffea\025\uffea" +
    "\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea\036" +
    "\uffea\040\uffea\041\uffea\001\002\000\004\040\275\001\002" +
    "\000\012\003\266\005\156\007\157\035\267\001\002\000" +
    "\070\002\uffeb\003\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb" +
    "\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017" +
    "\uffeb\020\uffeb\021\uffeb\023\uffeb\024\uffeb\025\uffeb\027\uffeb" +
    "\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\036\uffeb\040" +
    "\uffeb\041\uffeb\001\002\000\006\035\271\045\270\001\002" +
    "\000\006\035\uffd5\045\uffd5\001\002\000\006\035\uffd3\045" +
    "\uffd3\001\002\000\004\040\uffd7\001\002\000\010\003\273" +
    "\005\156\007\157\001\002\000\004\040\uffd6\001\002\000" +
    "\006\035\uffd4\045\uffd4\001\002\000\006\035\uffd2\045\uffd2" +
    "\001\002\000\022\002\uffd8\003\uffd8\005\uffd8\007\uffd8\030" +
    "\uffd8\031\uffd8\032\uffd8\041\uffd8\001\002\000\060\003\314" +
    "\004\103\005\316\006\045\007\017\011\035\012\070\013" +
    "\033\014\076\015\047\016\100\017\077\020\052\021\306" +
    "\023\321\024\301\025\326\027\312\030\277\034\102\036" +
    "\064\040\275\041\uffc4\001\002\000\064\003\uffed\004\uffed" +
    "\005\uffed\006\uffed\007\uffed\011\uffed\012\uffed\013\uffed\014" +
    "\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\023\uffed" +
    "\024\uffed\025\uffed\027\uffed\030\uffed\032\uffed\033\uffed\034" +
    "\uffed\036\uffed\040\uffed\041\uffed\001\002\000\006\005\027" +
    "\007\017\001\002\000\004\041\u0112\001\002\000\006\005" +
    "\156\007\157\001\002\000\024\034\uff81\036\uff85\044\uff85" +
    "\046\uffb0\050\uffb0\052\uffb0\054\uffb0\056\uffb0\067\uffb0\001" +
    "\002\000\062\003\uffbe\004\uffbe\005\uffbe\006\uffbe\007\uffbe" +
    "\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017" +
    "\uffbe\020\uffbe\021\uffbe\023\uffbe\024\uffbe\025\uffbe\027\uffbe" +
    "\030\uffbe\033\uffbe\034\uffbe\036\uffbe\040\uffbe\041\uffbe\001" +
    "\002\000\012\034\uff7f\036\uff83\044\uff83\073\u010d\001\002" +
    "\000\016\046\376\050\374\052\377\054\373\056\u0100\067" +
    "\375\001\002\000\046\003\050\004\103\005\055\006\045" +
    "\007\042\011\035\012\070\013\033\014\076\015\047\016" +
    "\100\017\077\020\052\034\102\036\064\047\044\051\037" +
    "\070\041\001\002\000\062\003\uffc2\004\uffc2\005\uffc2\006" +
    "\uffc2\007\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2" +
    "\016\uffc2\017\uffc2\020\uffc2\021\uffc2\023\uffc2\024\uffc2\025" +
    "\uffc2\027\uffc2\030\uffc2\033\uffc2\034\uffc2\036\uffc2\040\uffc2" +
    "\041\uffc2\001\002\000\062\003\uffc1\004\uffc1\005\uffc1\006" +
    "\uffc1\007\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1" +
    "\016\uffc1\017\uffc1\020\uffc1\021\uffc1\023\uffc1\024\uffc1\025" +
    "\uffc1\027\uffc1\030\uffc1\033\uffc1\034\uffc1\036\uffc1\040\uffc1" +
    "\041\uffc1\001\002\000\024\034\uff7a\036\uff7a\044\uff7a\046" +
    "\uffb1\050\uffb1\052\uffb1\054\uffb1\056\uffb1\067\uffb1\001\002" +
    "\000\050\003\050\004\103\005\055\006\045\007\042\011" +
    "\035\012\070\013\033\014\076\015\047\016\100\017\077" +
    "\020\052\034\102\036\064\047\044\051\037\070\041\073" +
    "\363\001\002\000\062\003\uffb8\004\uffb8\005\uffb8\006\uffb8" +
    "\007\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016" +
    "\uffb8\017\uffb8\020\uffb8\021\uffb8\023\uffb8\024\uffb8\025\uffb8" +
    "\027\uffb8\030\uffb8\033\uffb8\034\uffb8\036\uffb8\040\uffb8\041" +
    "\uffb8\001\002\000\012\034\uff76\036\uff76\044\uff76\073\361" +
    "\001\002\000\006\036\170\044\167\001\002\000\020\003" +
    "\uff57\004\uff57\007\uff57\034\032\036\uff6d\044\uff6d\061\030" +
    "\001\002\000\062\003\uffbf\004\uffbf\005\uffbf\006\uffbf\007" +
    "\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf" +
    "\017\uffbf\020\uffbf\021\uffbf\023\uffbf\024\uffbf\025\uffbf\027" +
    "\uffbf\030\uffbf\033\uffbf\034\uffbf\036\uffbf\040\uffbf\041\uffbf" +
    "\001\002\000\062\003\uffc0\004\uffc0\005\uffc0\006\uffc0\007" +
    "\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0" +
    "\017\uffc0\020\uffc0\021\uffc0\023\uffc0\024\uffc0\025\uffc0\027" +
    "\uffc0\030\uffc0\033\uffc0\034\uffc0\036\uffc0\040\uffc0\041\uffc0" +
    "\001\002\000\046\003\050\004\103\005\055\006\045\007" +
    "\042\011\035\012\070\013\033\014\076\015\047\016\100" +
    "\017\077\020\052\034\102\036\064\047\044\051\037\070" +
    "\041\001\002\000\062\003\uffc3\004\uffc3\005\uffc3\006\uffc3" +
    "\007\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016" +
    "\uffc3\017\uffc3\020\uffc3\021\uffc3\023\uffc3\024\uffc3\025\uffc3" +
    "\027\uffc3\030\uffc3\033\uffc3\034\uffc3\036\uffc3\040\uffc3\041" +
    "\uffc3\001\002\000\062\003\uffbc\004\uffbc\005\uffbc\006\uffbc" +
    "\007\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016" +
    "\uffbc\017\uffbc\020\uffbc\021\uffbc\023\uffbc\024\uffbc\025\uffbc" +
    "\027\uffbc\030\uffbc\033\uffbc\034\uffbc\036\uffbc\040\uffbc\041" +
    "\uffbc\001\002\000\006\067\242\073\263\001\002\000\004" +
    "\073\340\001\002\000\046\003\050\004\103\005\055\006" +
    "\045\007\042\011\035\012\070\013\033\014\076\015\047" +
    "\016\100\017\077\020\052\034\102\036\064\047\044\051" +
    "\037\070\041\001\002\000\024\034\uff80\036\uff84\044\uff84" +
    "\046\uffaf\050\uffaf\052\uffaf\054\uffaf\056\uffaf\067\uffaf\001" +
    "\002\000\016\003\247\004\250\007\251\034\uff77\036\uff77" +
    "\044\uff77\001\002\000\060\003\314\004\103\005\316\006" +
    "\045\007\017\011\035\012\070\013\033\014\076\015\047" +
    "\016\100\017\077\020\052\021\306\023\321\024\301\025" +
    "\326\027\312\030\277\034\102\036\064\040\275\041\uffc4" +
    "\001\002\000\062\003\uffbd\004\uffbd\005\uffbd\006\uffbd\007" +
    "\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd" +
    "\017\uffbd\020\uffbd\021\uffbd\023\uffbd\024\uffbd\025\uffbd\027" +
    "\uffbd\030\uffbd\033\uffbd\034\uffbd\036\uffbd\040\uffbd\041\uffbd" +
    "\001\002\000\062\003\uffbb\004\uffbb\005\uffbb\006\uffbb\007" +
    "\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb" +
    "\017\uffbb\020\uffbb\021\uffbb\023\uffbb\024\uffbb\025\uffbb\027" +
    "\uffbb\030\uffbb\033\uffbb\034\uffbb\036\uffbb\040\uffbb\041\uffbb" +
    "\001\002\000\064\003\uffec\004\uffec\005\uffec\006\uffec\007" +
    "\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec" +
    "\017\uffec\020\uffec\021\uffec\023\uffec\024\uffec\025\uffec\027" +
    "\uffec\030\uffec\032\uffec\033\uffec\034\uffec\036\uffec\040\uffec" +
    "\041\uffec\001\002\000\004\041\uffc5\001\002\000\004\040" +
    "\275\001\002\000\062\003\uffa2\004\uffa2\005\uffa2\006\uffa2" +
    "\007\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016" +
    "\uffa2\017\uffa2\020\uffa2\021\uffa2\023\uffa2\024\uffa2\025\uffa2" +
    "\027\uffa2\030\uffa2\033\uffa2\034\uffa2\036\uffa2\040\uffa2\041" +
    "\uffa2\001\002\000\064\003\uffe3\004\uffe3\005\uffe3\006\uffe3" +
    "\007\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\027\uffe3\030\uffe3\032\uffe3\033\uffe3\034\uffe3\036\uffe3\040" +
    "\uffe3\041\uffe3\001\002\000\004\040\342\001\002\000\022" +
    "\011\035\012\070\013\033\015\047\016\100\017\077\020" +
    "\052\033\345\001\002\000\004\042\357\001\002\000\024" +
    "\011\035\012\070\013\033\015\047\016\100\017\077\020" +
    "\052\033\352\041\350\001\002\000\004\042\346\001\002" +
    "\000\056\003\314\004\103\005\316\006\045\007\017\011" +
    "\035\012\070\013\033\014\076\015\047\016\100\017\077" +
    "\020\052\021\306\023\321\024\301\025\326\027\312\030" +
    "\277\034\102\036\064\040\275\001\002\000\024\011\uffa5" +
    "\012\uffa5\013\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\033" +
    "\uffa5\041\uffa5\001\002\000\062\003\uffa7\004\uffa7\005\uffa7" +
    "\006\uffa7\007\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015" +
    "\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\023\uffa7\024\uffa7" +
    "\025\uffa7\027\uffa7\030\uffa7\033\uffa7\034\uffa7\036\uffa7\040" +
    "\uffa7\041\uffa7\001\002\000\004\042\355\001\002\000\004" +
    "\042\353\001\002\000\056\003\314\004\103\005\316\006" +
    "\045\007\017\011\035\012\070\013\033\014\076\015\047" +
    "\016\100\017\077\020\052\021\306\023\321\024\301\025" +
    "\326\027\312\030\277\034\102\036\064\040\275\001\002" +
    "\000\024\011\uffa3\012\uffa3\013\uffa3\015\uffa3\016\uffa3\017" +
    "\uffa3\020\uffa3\033\uffa3\041\uffa3\001\002\000\056\003\314" +
    "\004\103\005\316\006\045\007\017\011\035\012\070\013" +
    "\033\014\076\015\047\016\100\017\077\020\052\021\306" +
    "\023\321\024\301\025\326\027\312\030\277\034\102\036" +
    "\064\040\275\001\002\000\024\011\uffa4\012\uffa4\013\uffa4" +
    "\015\uffa4\016\uffa4\017\uffa4\020\uffa4\033\uffa4\041\uffa4\001" +
    "\002\000\056\003\314\004\103\005\316\006\045\007\017" +
    "\011\035\012\070\013\033\014\076\015\047\016\100\017" +
    "\077\020\052\021\306\023\321\024\301\025\326\027\312" +
    "\030\277\034\102\036\064\040\275\001\002\000\024\011" +
    "\uffa6\012\uffa6\013\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6" +
    "\033\uffa6\041\uffa6\001\002\000\062\003\uffba\004\uffba\005" +
    "\uffba\006\uffba\007\uffba\011\uffba\012\uffba\013\uffba\014\uffba" +
    "\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\023\uffba\024" +
    "\uffba\025\uffba\027\uffba\030\uffba\033\uffba\034\uffba\036\uffba" +
    "\040\uffba\041\uffba\001\002\000\004\073\364\001\002\000" +
    "\062\003\uffad\004\uffad\005\uffad\006\uffad\007\uffad\011\uffad" +
    "\012\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020" +
    "\uffad\021\uffad\023\uffad\024\uffad\025\uffad\027\uffad\030\uffad" +
    "\033\uffad\034\uffad\036\uffad\040\uffad\041\uffad\001\002\000" +
    "\062\003\uffac\004\uffac\005\uffac\006\uffac\007\uffac\011\uffac" +
    "\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac\020" +
    "\uffac\021\uffac\023\uffac\024\uffac\025\uffac\027\uffac\030\uffac" +
    "\033\uffac\034\uffac\036\uffac\040\uffac\041\uffac\001\002\000" +
    "\004\040\275\001\002\000\064\003\uffa8\004\uffa8\005\uffa8" +
    "\006\uffa8\007\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015" +
    "\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\367\023\uffa8" +
    "\024\uffa8\025\uffa8\027\uffa8\030\uffa8\033\uffa8\034\uffa8\036" +
    "\uffa8\040\uffa8\041\uffa8\001\002\000\006\021\306\040\275" +
    "\001\002\000\062\003\uffab\004\uffab\005\uffab\006\uffab\007" +
    "\uffab\011\uffab\012\uffab\013\uffab\014\uffab\015\uffab\016\uffab" +
    "\017\uffab\020\uffab\021\uffab\023\uffab\024\uffab\025\uffab\027" +
    "\uffab\030\uffab\033\uffab\034\uffab\036\uffab\040\uffab\041\uffab" +
    "\001\002\000\062\003\uffa9\004\uffa9\005\uffa9\006\uffa9\007" +
    "\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9" +
    "\017\uffa9\020\uffa9\021\uffa9\023\uffa9\024\uffa9\025\uffa9\027" +
    "\uffa9\030\uffa9\033\uffa9\034\uffa9\036\uffa9\040\uffa9\041\uffa9" +
    "\001\002\000\062\003\uffaa\004\uffaa\005\uffaa\006\uffaa\007" +
    "\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa" +
    "\017\uffaa\020\uffaa\021\uffaa\023\uffaa\024\uffaa\025\uffaa\027" +
    "\uffaa\030\uffaa\033\uffaa\034\uffaa\036\uffaa\040\uffaa\041\uffaa" +
    "\001\002\000\046\003\050\004\103\005\055\006\045\007" +
    "\042\011\035\012\070\013\033\014\076\015\047\016\100" +
    "\017\077\020\052\034\102\036\064\047\044\051\037\070" +
    "\041\001\002\000\046\003\050\004\103\005\055\006\045" +
    "\007\042\011\035\012\070\013\033\014\076\015\047\016" +
    "\100\017\077\020\052\034\102\036\064\047\044\051\037" +
    "\070\041\001\002\000\046\003\050\004\103\005\055\006" +
    "\045\007\042\011\035\012\070\013\033\014\076\015\047" +
    "\016\100\017\077\020\052\034\102\036\064\047\044\051" +
    "\037\070\041\001\002\000\046\003\050\004\103\005\055" +
    "\006\045\007\042\011\035\012\070\013\033\014\076\015" +
    "\047\016\100\017\077\020\052\034\102\036\064\047\044" +
    "\051\037\070\041\001\002\000\046\003\050\004\103\005" +
    "\055\006\045\007\042\011\035\012\070\013\033\014\076" +
    "\015\047\016\100\017\077\020\052\034\102\036\064\047" +
    "\044\051\037\070\041\001\002\000\046\003\050\004\103" +
    "\005\055\006\045\007\042\011\035\012\070\013\033\014" +
    "\076\015\047\016\100\017\077\020\052\034\102\036\064" +
    "\047\044\051\037\070\041\001\002\000\004\073\u0102\001" +
    "\002\000\062\003\uffb2\004\uffb2\005\uffb2\006\uffb2\007\uffb2" +
    "\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017" +
    "\uffb2\020\uffb2\021\uffb2\023\uffb2\024\uffb2\025\uffb2\027\uffb2" +
    "\030\uffb2\033\uffb2\034\uffb2\036\uffb2\040\uffb2\041\uffb2\001" +
    "\002\000\004\073\u0104\001\002\000\062\003\uffb4\004\uffb4" +
    "\005\uffb4\006\uffb4\007\uffb4\011\uffb4\012\uffb4\013\uffb4\014" +
    "\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\023\uffb4" +
    "\024\uffb4\025\uffb4\027\uffb4\030\uffb4\033\uffb4\034\uffb4\036" +
    "\uffb4\040\uffb4\041\uffb4\001\002\000\004\073\u0106\001\002" +
    "\000\062\003\uffb6\004\uffb6\005\uffb6\006\uffb6\007\uffb6\011" +
    "\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6" +
    "\020\uffb6\021\uffb6\023\uffb6\024\uffb6\025\uffb6\027\uffb6\030" +
    "\uffb6\033\uffb6\034\uffb6\036\uffb6\040\uffb6\041\uffb6\001\002" +
    "\000\004\073\u0108\001\002\000\062\003\uffb7\004\uffb7\005" +
    "\uffb7\006\uffb7\007\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7" +
    "\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\023\uffb7\024" +
    "\uffb7\025\uffb7\027\uffb7\030\uffb7\033\uffb7\034\uffb7\036\uffb7" +
    "\040\uffb7\041\uffb7\001\002\000\004\073\u010a\001\002\000" +
    "\062\003\uffb5\004\uffb5\005\uffb5\006\uffb5\007\uffb5\011\uffb5" +
    "\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020" +
    "\uffb5\021\uffb5\023\uffb5\024\uffb5\025\uffb5\027\uffb5\030\uffb5" +
    "\033\uffb5\034\uffb5\036\uffb5\040\uffb5\041\uffb5\001\002\000" +
    "\004\073\u010c\001\002\000\062\003\uffb3\004\uffb3\005\uffb3" +
    "\006\uffb3\007\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015" +
    "\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\023\uffb3\024\uffb3" +
    "\025\uffb3\027\uffb3\030\uffb3\033\uffb3\034\uffb3\036\uffb3\040" +
    "\uffb3\041\uffb3\001\002\000\062\003\uffae\004\uffae\005\uffae" +
    "\006\uffae\007\uffae\011\uffae\012\uffae\013\uffae\014\uffae\015" +
    "\uffae\016\uffae\017\uffae\020\uffae\021\uffae\023\uffae\024\uffae" +
    "\025\uffae\027\uffae\030\uffae\033\uffae\034\uffae\036\uffae\040" +
    "\uffae\041\uffae\001\002\000\004\026\u010f\001\002\000\046" +
    "\003\050\004\103\005\055\006\045\007\042\011\035\012" +
    "\070\013\033\014\076\015\047\016\100\017\077\020\052" +
    "\034\102\036\064\047\044\051\037\070\041\001\002\000" +
    "\004\040\275\001\002\000\062\003\uffa1\004\uffa1\005\uffa1" +
    "\006\uffa1\007\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015" +
    "\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\023\uffa1\024\uffa1" +
    "\025\uffa1\027\uffa1\030\uffa1\033\uffa1\034\uffa1\036\uffa1\040" +
    "\uffa1\041\uffa1\001\002\000\072\002\uffb9\003\uffb9\004\uffb9" +
    "\005\uffb9\006\uffb9\007\uffb9\011\uffb9\012\uffb9\013\uffb9\014" +
    "\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9" +
    "\023\uffb9\024\uffb9\025\uffb9\027\uffb9\030\uffb9\031\uffb9\032" +
    "\uffb9\033\uffb9\034\uffb9\036\uffb9\040\uffb9\041\uffb9\001\002" +
    "\000\010\003\247\004\250\007\251\001\002\000\006\003" +
    "\u0115\067\uffe9\001\002\000\004\073\u0116\001\002\000\064" +
    "\003\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\011\uffe2\012" +
    "\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2" +
    "\021\uffe2\023\uffe2\024\uffe2\025\uffe2\027\uffe2\030\uffe2\032" +
    "\uffe2\033\uffe2\034\uffe2\036\uffe2\040\uffe2\041\uffe2\001\002" +
    "\000\004\002\ufff6\001\002\000\004\040\u011b\001\002\000" +
    "\004\040\u011b\001\002\000\004\040\u011b\001\002\000\016" +
    "\003\u0121\005\027\007\017\030\277\032\u0123\041\uffcc\001" +
    "\002\000\016\002\uffd1\003\uffd1\005\uffd1\007\uffd1\030\uffd1" +
    "\031\uffd1\001\002\000\016\003\u0121\005\027\007\017\030" +
    "\277\032\u0123\041\uffcc\001\002\000\016\003\uffca\005\uffca" +
    "\007\uffca\030\uffca\032\uffca\041\uffca\001\002\000\016\003" +
    "\uffcb\005\uffcb\007\uffcb\030\uffcb\032\uffcb\041\uffcb\001\002" +
    "\000\004\041\u0128\001\002\000\006\041\u0127\073\u0126\001" +
    "\002\000\016\003\uffc9\005\uffc9\007\uffc9\030\uffc9\032\uffc9" +
    "\041\uffc9\001\002\000\004\034\262\001\002\000\004\040" +
    "\275\001\002\000\016\003\uffc6\005\uffc6\007\uffc6\030\uffc6" +
    "\032\uffc6\041\uffc6\001\002\000\016\003\uffc8\005\uffc8\007" +
    "\uffc8\030\uffc8\032\uffc8\041\uffc8\001\002\000\016\003\uffc7" +
    "\005\uffc7\007\uffc7\030\uffc7\032\uffc7\041\uffc7\001\002\000" +
    "\016\002\uffce\003\uffce\005\uffce\007\uffce\030\uffce\031\uffce" +
    "\001\002\000\004\041\uffcd\001\002\000\016\002\uffd0\003" +
    "\uffd0\005\uffd0\007\uffd0\030\uffd0\031\uffd0\001\002\000\016" +
    "\002\uffcf\003\uffcf\005\uffcf\007\uffcf\030\uffcf\031\uffcf\001" +
    "\002\000\006\055\ufff8\073\ufff8\001\002\000\006\055\ufffa" +
    "\073\ufffa\001\002\000\004\073\u0135\001\002\000\006\055" +
    "\u0132\073\u0133\001\002\000\006\055\ufff9\073\ufff9\001\002" +
    "\000\006\055\ufff7\073\ufff7\001\002\000\010\004\u0130\005" +
    "\u012c\007\u0131\001\002\000\020\002\ufffd\003\ufffd\005\ufffd" +
    "\007\ufffd\010\ufffd\030\ufffd\031\ufffd\001\002\000\006\055" +
    "\ufffb\073\ufffb\001\002\000\020\002\ufffc\003\ufffc\005\ufffc" +
    "\007\ufffc\010\ufffc\030\ufffc\031\ufffc\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0134\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\032\004\015\007\017\010\011\011\021\012\020" +
    "\014\013\015\010\020\012\023\024\026\006\102\022\103" +
    "\014\001\001\000\006\005\u012e\006\u012c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\007" +
    "\u0116\010\011\011\021\012\020\014\013\015\010\020\012" +
    "\023\024\026\006\102\022\103\014\001\001\000\004\024" +
    "\260\001\001\000\002\001\001\000\004\022\256\001\001" +
    "\000\002\001\001\000\004\104\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\251" +
    "\001\001\000\006\102\211\103\210\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\104\030\001\001\000\004" +
    "\103\204\001\001\000\002\001\001\000\056\051\074\052" +
    "\070\053\066\054\064\055\062\056\060\057\057\060\055" +
    "\061\053\062\052\063\061\064\050\065\056\067\037\070" +
    "\071\071\042\072\045\073\072\074\035\075\065\102\073" +
    "\105\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\061\200\062\052" +
    "\063\061\064\050\065\056\067\037\070\071\071\042\072" +
    "\045\073\072\074\035\075\065\102\073\001\001\000\002" +
    "\001\001\000\034\061\177\062\052\063\061\064\050\065" +
    "\056\067\037\070\071\071\042\072\045\073\072\074\035" +
    "\075\065\102\073\001\001\000\004\104\153\001\001\000" +
    "\002\001\001\000\034\061\173\062\052\063\061\064\050" +
    "\065\056\067\037\070\071\071\042\072\045\073\072\074" +
    "\035\075\065\102\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\104\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\104\165" +
    "\001\001\000\002\001\001\000\056\051\145\052\070\053" +
    "\066\054\064\055\062\056\060\057\057\060\055\061\053" +
    "\062\052\063\061\064\050\065\056\067\037\070\071\071" +
    "\042\072\045\073\072\074\035\075\065\076\144\102\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\052\103\053\066\054\064\055\062\056" +
    "\060\057\057\060\055\061\053\062\052\063\061\064\050" +
    "\065\056\067\037\070\071\071\042\072\045\073\072\074" +
    "\035\075\065\102\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\053\106\054\064\055\062\056\060\057" +
    "\057\060\055\061\053\062\052\063\061\064\050\065\056" +
    "\067\037\070\071\071\042\072\045\073\072\074\035\075" +
    "\065\102\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\054\110\055\062\056\060\057\057\060\055\061" +
    "\053\062\052\063\061\064\050\065\056\067\037\070\071" +
    "\071\042\072\045\073\072\074\035\075\065\102\073\001" +
    "\001\000\002\001\001\000\044\055\112\056\060\057\057" +
    "\060\055\061\053\062\052\063\061\064\050\065\056\067" +
    "\037\070\071\071\042\072\045\073\072\074\035\075\065" +
    "\102\073\001\001\000\002\001\001\000\042\056\142\057" +
    "\057\060\055\061\053\062\052\063\061\064\050\065\056" +
    "\067\037\070\071\071\042\072\045\073\072\074\035\075" +
    "\065\102\073\001\001\000\042\056\141\057\057\060\055" +
    "\061\053\062\052\063\061\064\050\065\056\067\037\070" +
    "\071\071\042\072\045\073\072\074\035\075\065\102\073" +
    "\001\001\000\042\056\116\057\057\060\055\061\053\062" +
    "\052\063\061\064\050\065\056\067\037\070\071\071\042" +
    "\072\045\073\072\074\035\075\065\102\073\001\001\000" +
    "\002\001\001\000\040\057\140\060\055\061\053\062\052" +
    "\063\061\064\050\065\056\067\037\070\071\071\042\072" +
    "\045\073\072\074\035\075\065\102\073\001\001\000\040" +
    "\057\137\060\055\061\053\062\052\063\061\064\050\065" +
    "\056\067\037\070\071\071\042\072\045\073\072\074\035" +
    "\075\065\102\073\001\001\000\040\057\136\060\055\061" +
    "\053\062\052\063\061\064\050\065\056\067\037\070\071" +
    "\071\042\072\045\073\072\074\035\075\065\102\073\001" +
    "\001\000\040\057\123\060\055\061\053\062\052\063\061" +
    "\064\050\065\056\067\037\070\071\071\042\072\045\073" +
    "\072\074\035\075\065\102\073\001\001\000\002\001\001" +
    "\000\036\060\135\061\053\062\052\063\061\064\050\065" +
    "\056\067\037\070\071\071\042\072\045\073\072\074\035" +
    "\075\065\102\073\001\001\000\036\060\126\061\053\062" +
    "\052\063\061\064\050\065\056\067\037\070\071\071\042" +
    "\072\045\073\072\074\035\075\065\102\073\001\001\000" +
    "\002\001\001\000\034\061\134\062\052\063\061\064\050" +
    "\065\056\067\037\070\071\071\042\072\045\073\072\074" +
    "\035\075\065\102\073\001\001\000\034\061\133\062\052" +
    "\063\061\064\050\065\056\067\037\070\071\071\042\072" +
    "\045\073\072\074\035\075\065\102\073\001\001\000\034" +
    "\061\132\062\052\063\061\064\050\065\056\067\037\070" +
    "\071\071\042\072\045\073\072\074\035\075\065\102\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\104\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\051\150\052\070\053\066\054" +
    "\064\055\062\056\060\057\057\060\055\061\053\062\052" +
    "\063\061\064\050\065\056\067\037\070\071\071\042\072" +
    "\045\073\072\074\035\075\065\102\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\103\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\103\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\104\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\051\170\052\070\053\066\054\064\055\062\056\060" +
    "\057\057\060\055\061\053\062\052\063\061\064\050\065" +
    "\056\067\037\070\071\071\042\072\045\073\072\074\035" +
    "\075\065\102\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\103\175" +
    "\001\001\000\002\001\001\000\004\104\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\051\203\052\070" +
    "\053\066\054\064\055\062\056\060\057\057\060\055\061" +
    "\053\062\052\063\061\064\050\065\056\067\037\070\071" +
    "\071\042\072\045\073\072\074\035\075\065\102\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\220\001\001\000\004\021\213\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\051\227\052\070\053\066\054\064\055\062\056" +
    "\060\057\057\060\055\061\053\062\052\063\061\064\050" +
    "\065\056\066\226\067\037\070\071\071\042\072\045\073" +
    "\072\074\035\075\065\077\224\102\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\014" +
    "\236\017\235\020\234\100\233\101\231\102\022\103\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\014\240\020\234\102\022\103\014\001\001\000\002" +
    "\001\001\000\060\051\227\052\070\053\066\054\064\055" +
    "\062\056\060\057\057\060\055\061\053\062\052\063\061" +
    "\064\050\065\056\066\242\067\037\070\071\071\042\072" +
    "\045\073\072\074\035\075\065\077\224\102\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\014\236\017" +
    "\235\020\234\100\245\101\231\102\022\103\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\103\254\001\001\000\002\001\001\000\004\104\164\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\273" +
    "\001\001\000\010\020\264\025\263\103\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\271\103\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\100\011\275\013\312\014\013\016" +
    "\333\017\324\020\323\033\277\034\330\035\332\036\321" +
    "\037\306\040\304\041\307\042\317\043\316\045\302\047" +
    "\331\050\322\062\314\063\061\064\050\065\056\067\301" +
    "\070\326\071\303\072\310\073\072\074\035\075\065\102" +
    "\327\103\014\001\001\000\002\001\001\000\012\014\240" +
    "\020\234\102\022\103\u0112\001\001\000\002\001\001\000" +
    "\006\020\u010d\103\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\051" +
    "\364\052\070\053\066\054\064\055\062\056\060\057\057" +
    "\060\055\061\053\062\052\063\061\064\050\065\056\067" +
    "\037\070\071\071\042\072\045\073\072\074\035\075\065" +
    "\102\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\051\361\052\070\053\066\054\064" +
    "\055\062\056\060\057\057\060\055\061\053\062\052\063" +
    "\061\064\050\065\056\067\037\070\071\071\042\072\045" +
    "\073\072\074\035\075\065\102\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\104\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\051" +
    "\340\052\070\053\066\054\064\055\062\056\060\057\057" +
    "\060\055\061\053\062\052\063\061\064\050\065\056\067" +
    "\037\070\071\071\042\072\045\073\072\074\035\075\065" +
    "\102\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\051\335\052\070" +
    "\053\066\054\064\055\062\056\060\057\057\060\055\061" +
    "\053\062\052\063\061\064\050\065\056\067\037\070\071" +
    "\071\042\072\045\073\072\074\035\075\065\102\073\001" +
    "\001\000\002\001\001\000\004\022\251\001\001\000\100" +
    "\011\275\013\312\014\013\016\333\017\324\020\323\033" +
    "\334\034\330\035\332\036\321\037\306\040\304\041\307" +
    "\042\317\043\316\045\302\047\331\050\322\062\314\063" +
    "\061\064\050\065\056\067\301\070\326\071\303\072\310" +
    "\073\072\074\035\075\065\102\327\103\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\336\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\046\343\074\342" +
    "\001\001\000\002\001\001\000\004\074\350\001\001\000" +
    "\002\001\001\000\076\011\275\013\312\014\013\016\333" +
    "\017\324\020\323\034\346\035\332\036\321\037\306\040" +
    "\304\041\307\042\317\043\316\045\302\047\331\050\322" +
    "\062\314\063\061\064\050\065\056\067\301\070\326\071" +
    "\303\072\310\073\072\074\035\075\065\102\327\103\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\076\011\275\013\312\014\013" +
    "\016\333\017\324\020\323\034\353\035\332\036\321\037" +
    "\306\040\304\041\307\042\317\043\316\045\302\047\331" +
    "\050\322\062\314\063\061\064\050\065\056\067\301\070" +
    "\326\071\303\072\310\073\072\074\035\075\065\102\327" +
    "\103\014\001\001\000\002\001\001\000\076\011\275\013" +
    "\312\014\013\016\333\017\324\020\323\034\355\035\332" +
    "\036\321\037\306\040\304\041\307\042\317\043\316\045" +
    "\302\047\331\050\322\062\314\063\061\064\050\065\056" +
    "\067\301\070\326\071\303\072\310\073\072\074\035\075" +
    "\065\102\327\103\014\001\001\000\002\001\001\000\076" +
    "\011\275\013\312\014\013\016\333\017\324\020\323\034" +
    "\357\035\332\036\321\037\306\040\304\041\307\042\317" +
    "\043\316\045\302\047\331\050\322\062\314\063\061\064" +
    "\050\065\056\067\301\070\326\071\303\072\310\073\072" +
    "\074\035\075\065\102\327\103\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\365\001\001\000\004\044" +
    "\367\001\001\000\006\035\371\043\370\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\051" +
    "\u010a\052\070\053\066\054\064\055\062\056\060\057\057" +
    "\060\055\061\053\062\052\063\061\064\050\065\056\067" +
    "\037\070\071\071\042\072\045\073\072\074\035\075\065" +
    "\102\073\001\001\000\054\051\u0108\052\070\053\066\054" +
    "\064\055\062\056\060\057\057\060\055\061\053\062\052" +
    "\063\061\064\050\065\056\067\037\070\071\071\042\072" +
    "\045\073\072\074\035\075\065\102\073\001\001\000\054" +
    "\051\u0106\052\070\053\066\054\064\055\062\056\060\057" +
    "\057\060\055\061\053\062\052\063\061\064\050\065\056" +
    "\067\037\070\071\071\042\072\045\073\072\074\035\075" +
    "\065\102\073\001\001\000\054\051\u0104\052\070\053\066" +
    "\054\064\055\062\056\060\057\057\060\055\061\053\062" +
    "\052\063\061\064\050\065\056\067\037\070\071\071\042" +
    "\072\045\073\072\074\035\075\065\102\073\001\001\000" +
    "\054\051\u0102\052\070\053\066\054\064\055\062\056\060" +
    "\057\057\060\055\061\053\062\052\063\061\064\050\065" +
    "\056\067\037\070\071\071\042\072\045\073\072\074\035" +
    "\075\065\102\073\001\001\000\054\051\u0100\052\070\053" +
    "\066\054\064\055\062\056\060\057\057\060\055\061\053" +
    "\062\052\063\061\064\050\065\056\067\037\070\071\071" +
    "\042\072\045\073\072\074\035\075\065\102\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\051\u010f\052\070\053\066\054" +
    "\064\055\062\056\060\057\057\060\055\061\053\062\052" +
    "\063\061\064\050\065\056\067\037\070\071\071\042\072" +
    "\045\073\072\074\035\075\065\102\073\001\001\000\004" +
    "\035\u0110\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\u0113\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\u012a\001" +
    "\001\000\004\027\u0129\001\001\000\004\027\u011b\001\001" +
    "\000\032\011\275\013\u011e\014\013\016\333\017\324\020" +
    "\012\023\u0121\030\u011f\031\u011c\032\u011d\102\022\103\014" +
    "\001\001\000\002\001\001\000\032\011\275\013\u011e\014" +
    "\013\016\333\017\324\020\012\023\u0121\030\u0128\031\u011c" +
    "\032\u011d\102\022\103\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\u0123\001\001\000\004\035\u0124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\u0133\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SyntacticalAnalyser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SyntacticalAnalyser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SyntacticalAnalyser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    action_obj.setIdGenerator(generator);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    return analyser.next_token();

    }


    private LexicalAnalyser analyser = (LexicalAnalyser) getScanner();
    private int errors = 0;
    private Deque<SyntacticalException> pendingErrors = new ArrayDeque<>();
    private Map<SyntacticalException, String> reportedErrors = new HashMap<>();
    private IdGenerator generator;

    public SyntacticalAnalyser(java_cup.runtime.Scanner s, IdGenerator i) {
        this(s);
        this.generator = i;
    }

    public int errors() {
        return errors;
    }

    @Override
    public void syntax_error(Symbol token) {
        errors++;
        SyntacticalException e = new SyntacticalException((LexicalUnit) token);
        pendingErrors.push(e);
    }

    @Override
    public void report_error(String message, Object info) {
        SyntacticalException error = pendingErrors.pop();
        reportedErrors.put(error, message);
        if (pendingErrors.isEmpty()) {
            displayErrors();
        }
    }

    @Override
    public void unrecovered_syntax_error(Symbol token) {
        SyntacticalException e = new SyntacticalException((LexicalUnit) token);
        report_fatal_error("Couldn't repair and continue parse", e);
    }

    @Override
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
        if (info instanceof SyntacticalException) {
            throw (SyntacticalException) info;
        } else {
            throw new IllegalStateException("Can't recover from previous error(s)");
        }
    }

    @Override
    public void done_parsing() {
        while (!pendingErrors.isEmpty()) {
            report_error("Unknown cause", null);
        }
        super.done_parsing();
    }

    private void displayErrors() {
        reportedErrors.entrySet().stream()
            .sorted(Comparator.<Map.Entry<SyntacticalException, String>>
                comparingInt(e -> e.getKey().getLexicalUnit().getRow())
                .thenComparingInt(e -> e.getKey().getLexicalUnit().getColumn())
            ).forEach(e -> System.err.println("[ERROR] " + e.getKey().getMessage() + " - " + e.getValue()));
        System.err.flush();
        reportedErrors.clear();
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SyntacticalAnalyser$actions {


    private IdGenerator nextId = new IdGenerator();

    public void setIdGenerator(IdGenerator generator) {
        nextId = generator;
    }

  private final SyntacticalAnalyser parser;

  /** Constructor */
  CUP$SyntacticalAnalyser$actions(SyntacticalAnalyser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SyntacticalAnalyser$do_action_part00000000(
    int                        CUP$SyntacticalAnalyser$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticalAnalyser$parser,
    java.util.Stack            CUP$SyntacticalAnalyser$stack,
    int                        CUP$SyntacticalAnalyser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SyntacticalAnalyser$result;

      /* select the action based on the action number */
      switch (CUP$SyntacticalAnalyser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= ImportList DeclarationList 
            {
              ProgramNode RESULT =null;
		List<LexicalUnit> imports = (List<LexicalUnit>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		DeclarationNode declarations = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ProgramNode(nextId, declarations, imports); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Program",0, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		RESULT = start_val;
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$SyntacticalAnalyser$parser.done_parsing();
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ImportList ::= ImportList Import 
            {
              List<LexicalUnit> RESULT =null;
		List<LexicalUnit> imports = (List<LexicalUnit>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		LexicalUnit file = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 imports.add(file); RESULT = imports; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ImportList",1, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ImportList ::= 
            {
              List<LexicalUnit> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ImportList",1, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Import ::= IMPORT FilePath END 
            {
              LexicalUnit RESULT =null;
		LexicalUnit path = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = path; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Import",2, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Import ::= IMPORT error END 
            {
              LexicalUnit RESULT =null;
		 parser.report_error("Expected a path to a file", null);
                  RESULT = new LexicalUnit(""); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Import",2, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FilePath ::= FilePath DIV Filename 
            {
              LexicalUnit RESULT =null;
		LexicalUnit path = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		LexicalUnit filename = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new LexicalUnit(path.getRow(), path.getColumn(), path.lexicalClass(),
                        path.lexeme() + "/" + filename.lexeme()); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FilePath",3, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FilePath ::= Filename 
            {
              LexicalUnit RESULT =null;
		LexicalUnit filename = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = filename; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FilePath",3, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Filename ::= IDENTIFIER 
            {
              LexicalUnit RESULT =null;
		LexicalUnit name = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = name; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Filename",4, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Filename ::= GLOBAL 
            {
              LexicalUnit RESULT =null;
		LexicalUnit name = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = name; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Filename",4, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Filename ::= TYPE 
            {
              LexicalUnit RESULT =null;
		LexicalUnit name = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = name; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Filename",4, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DeclarationList ::= Declaration DeclarationList 
            {
              DeclarationNode RESULT =null;
		DeclarationNode declaration = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		DeclarationNode declarations = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration.linkedTo(declarations); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("DeclarationList",5, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DeclarationList ::= 
            {
              DeclarationNode RESULT =null;
		 RESULT = null; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("DeclarationList",5, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Declaration ::= GlobalVarConstDeclaration 
            {
              DeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration",6, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Declaration ::= FunctionDeclaration 
            {
              DeclarationNode RESULT =null;
		FunctionDeclarationNode declaration = (FunctionDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration",6, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Declaration ::= ClassDeclaration 
            {
              DeclarationNode RESULT =null;
		ClassDeclarationNode declaration = (ClassDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration",6, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Declaration ::= error END 
            {
              DeclarationNode RESULT =null;
		 parser.report_error("Expected a declaration", null);
                      RESULT = new ErrorDeclarationNode(nextId); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration",6, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Declaration ::= error CURLY_R 
            {
              DeclarationNode RESULT =null;
		 parser.report_error("Expected a declaration", null);
                      RESULT = new ErrorDeclarationNode(nextId); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration",6, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // GlobalVarConstDeclaration ::= VarDeclaration 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalVarConstDeclaration",8, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // GlobalVarConstDeclaration ::= GlobalConstDeclaration 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalVarConstDeclaration",8, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarConstDeclaration ::= VarDeclaration 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarConstDeclaration",9, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarConstDeclaration ::= LocalConstDeclarationEnd 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarConstDeclaration",9, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarDeclaration ::= BaseVarDeclaration END 
            {
              VarDeclarationNode RESULT =null;
		Name declaration = (Name)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new VarDeclarationNode(nextId, declaration); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclaration",7, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VarDeclaration ::= VarInitDeclaration END 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclaration",7, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BaseVarDeclaration ::= Type Identifier 
            {
              Name RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		LexicalUnit id = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new Name(id, type); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("BaseVarDeclaration",14, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VarInitDeclaration ::= BaseVarDeclaration ASSIGNMENT InitialValueExpression 
            {
              VarDeclarationNode RESULT =null;
		Name name = (Name)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		ExpressionNode initialValue = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new VarDeclarationNode(nextId, name, initialValue); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarInitDeclaration",10, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VarInitDeclaration ::= ConstructorCallExpression Identifier 
            {
              VarDeclarationNode RESULT =null;
		ConstructorCallExpressionNode constructor = (ConstructorCallExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		LexicalUnit id = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = VarDeclarationNode.fromConstructor(nextId, constructor, id); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarInitDeclaration",10, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // GlobalConstDeclaration ::= CONST Type Global ASSIGNMENT InitialValueExpression END 
            {
              VarDeclarationNode RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-4)).value;
		LexicalUnit id = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		ExpressionNode initialValue = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new VarDeclarationNode(nextId, new Name(id, type), initialValue, true); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalConstDeclaration",11, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // GlobalConstDeclaration ::= CONST ConstructorCallExpression Global END 
            {
              VarDeclarationNode RESULT =null;
		ConstructorCallExpressionNode constructor = (ConstructorCallExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		LexicalUnit id = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = VarDeclarationNode.fromConstructor(nextId, constructor, id).constant(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalConstDeclaration",11, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // GlobalConstDeclaration ::= CONST Type Global error END 
            {
              VarDeclarationNode RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		LexicalUnit id = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		 parser.report_error("Constants must be initialized", null);
                                 RESULT = new VarDeclarationNode(
                                                nextId, new Name(id, type), new ErrorExpressionNode(nextId), true
                                          );
                              
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalConstDeclaration",11, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LocalConstDeclarationEnd ::= LocalConstDeclaration END 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("LocalConstDeclarationEnd",12, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LocalConstDeclarationEnd ::= CONST Type Identifier error END 
            {
              VarDeclarationNode RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		LexicalUnit id = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		 parser.report_error("Constants must be initialized", null);
                                 RESULT = new VarDeclarationNode(
                                                nextId, new Name(id, type), new ErrorExpressionNode(nextId), true
                                          );
                              
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("LocalConstDeclarationEnd",12, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LocalConstDeclaration ::= CONST VarInitDeclaration 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration.constant(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("LocalConstDeclaration",13, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // InitialValueExpression ::= Expression 
            {
              ExpressionNode RESULT =null;
		ExpressionNode expression = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = expression; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("InitialValueExpression",52, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // InitialValueExpression ::= AnonymousObjectConstructorExpression 
            {
              ExpressionNode RESULT =null;
		AnonymousObjectConstructorExpressionNode expression = (AnonymousObjectConstructorExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = expression; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("InitialValueExpression",52, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Identifier ::= IDENTIFIER 
            {
              LexicalUnit RESULT =null;
		LexicalUnit id = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = id; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Identifier",16, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Identifier ::= error 
            {
              LexicalUnit RESULT =null;
		 parser.report_error("Expected a non uppercase identifier", null); RESULT = null; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Identifier",16, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Identifier ::= TYPE error 
            {
              LexicalUnit RESULT =null;
		 parser.report_error("Expected a non uppercase identifier", null); RESULT = null; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Identifier",16, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Global ::= GLOBAL 
            {
              LexicalUnit RESULT =null;
		LexicalUnit global = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = global; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Global",15, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Global ::= error 
            {
              LexicalUnit RESULT =null;
		 parser.report_error("Expected an uppercase identifier", null); RESULT = null; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Global",15, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Global ::= TYPE error 
            {
              LexicalUnit RESULT =null;
		 parser.report_error("Expected an uppercase identifier", null); RESULT = null; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Global",15, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FunctionDeclaration ::= BaseVarDeclaration FunctionParameters BlockStatement 
            {
              FunctionDeclarationNode RESULT =null;
		Name name = (Name)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		List<Name> parameters = (List<Name>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		BlockStatementNode block = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionDeclarationNode(nextId, name, parameters, block); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionDeclaration",17, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FunctionParameters ::= PARENTH_L PARENTH_R 
            {
              List<Name> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionParameters",18, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FunctionParameters ::= PARENTH_L ParameterList PARENTH_R 
            {
              List<Name> RESULT =null;
		List<Name> parameters = (List<Name>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = parameters; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionParameters",18, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ParameterList ::= BaseVarDeclaration 
            {
              List<Name> RESULT =null;
		Name parameter = (Name)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ArrayList<>(Collections.singletonList(parameter)); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ParameterList",19, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ParameterList ::= ParameterList COMMA BaseVarDeclaration 
            {
              List<Name> RESULT =null;
		List<Name> parameters = (List<Name>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		Name parameter = (Name)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 parameters.add(parameter); RESULT = parameters; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ParameterList",19, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ParameterList ::= error 
            {
              List<Name> RESULT =null;
		 parser.report_error("Expected a variable declaration", null);
                           RESULT = new ArrayList<>(
                                    Collections.singletonList(new Name(new LexicalUnit(""), new Type((String) null))));
                        
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ParameterList",19, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ParameterList ::= ParameterList COMMA error 
            {
              List<Name> RESULT =null;
		List<Name> parameters = (List<Name>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		 parser.report_error("Expected a variable declaration", null);
                           parameters.add(new Name(new LexicalUnit(""), new Type((String) null))); RESULT = parameters;
                        
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ParameterList",19, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ClassDeclaration ::= CLASS TYPE ClassBlock 
            {
              ClassDeclarationNode RESULT =null;
		LexicalUnit name = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		DeclarationNode block = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ClassDeclarationNode(nextId, name, block); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",20, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ClassDeclaration ::= CLASS GLOBAL ClassBlock 
            {
              ClassDeclarationNode RESULT =null;
		LexicalUnit name = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		DeclarationNode block = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ClassDeclarationNode(nextId, name, block); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",20, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ClassDeclaration ::= CLASS error ClassBlock 
            {
              ClassDeclarationNode RESULT =null;
		DeclarationNode block = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 parser.report_error("Expected a type name", null);
                              RESULT = new ClassDeclarationNode(nextId, new LexicalUnit(""), block); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",20, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ClassBlock ::= CURLY_L ClassElementList CURLY_R 
            {
              DeclarationNode RESULT =null;
		DeclarationNode contents = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = contents; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassBlock",21, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ClassElementList ::= ClassElement ClassElementList 
            {
              DeclarationNode RESULT =null;
		DeclarationNode element = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		DeclarationNode elements = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = element.linkedTo(elements); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElementList",22, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ClassElementList ::= 
            {
              DeclarationNode RESULT =null;
		 RESULT = null; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElementList",22, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ClassElement ::= VarConstDeclaration 
            {
              DeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement",23, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ClassElement ::= ConstructorDeclaration 
            {
              DeclarationNode RESULT =null;
		ConstructorDeclarationNode declaration = (ConstructorDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement",23, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ClassElement ::= FunctionDeclaration 
            {
              DeclarationNode RESULT =null;
		FunctionDeclarationNode declaration = (FunctionDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement",23, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ClassElement ::= error END 
            {
              DeclarationNode RESULT =null;
		 parser.report_error("Expected a declaration", null);
                              RESULT = new ErrorDeclarationNode(nextId); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement",23, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ClassElement ::= error CURLY_R 
            {
              DeclarationNode RESULT =null;
		 parser.report_error("Expected a declaration", null);
                              RESULT = new ErrorDeclarationNode(nextId); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement",23, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ConstructorDeclaration ::= CONSTRUCTOR FunctionParameters BlockStatement 
            {
              ConstructorDeclarationNode RESULT =null;
		LexicalUnit c = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		List<Name> parameters = (List<Name>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		BlockStatementNode block = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ConstructorDeclarationNode(nextId, c, parameters, block); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstructorDeclaration",24, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // StatementList ::= Statement StatementList 
            {
              StatementNode RESULT =null;
		StatementNode statement = (StatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		StatementNode statements = (StatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement.linkedTo(statements); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("StatementList",25, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // StatementList ::= 
            {
              StatementNode RESULT =null;
		 RESULT = null; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("StatementList",25, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Statement ::= VarDeclarationStatement 
            {
              StatementNode RESULT =null;
		VarDeclarationStatementNode statement = (VarDeclarationStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",26, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Statement ::= AssignmentStatement 
            {
              StatementNode RESULT =null;
		AssignmentStatementNode statement = (AssignmentStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",26, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Statement ::= FunctionCallStatement 
            {
              StatementNode RESULT =null;
		FunctionCallStatementNode statement = (FunctionCallStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",26, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Statement ::= ReturnStatement 
            {
              StatementNode RESULT =null;
		ReturnStatementNode statement = (ReturnStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",26, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Statement ::= IfElseStatement 
            {
              StatementNode RESULT =null;
		IfElseStatementNode statement = (IfElseStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",26, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Statement ::= SwitchStatement 
            {
              StatementNode RESULT =null;
		SwitchStatementNode statement = (SwitchStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",26, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Statement ::= WhileStatement 
            {
              StatementNode RESULT =null;
		WhileStatementNode statement = (WhileStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",26, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Statement ::= ForStatement 
            {
              StatementNode RESULT =null;
		ForStatementNode statement = (ForStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",26, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Statement ::= BlockStatement 
            {
              StatementNode RESULT =null;
		BlockStatementNode statement = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",26, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Statement ::= error END 
            {
              StatementNode RESULT =null;
		 parser.report_error("Expected a statement", null); RESULT = new ErrorStatementNode(nextId); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",26, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // BlockStatement ::= CURLY_L StatementList CURLY_R 
            {
              BlockStatementNode RESULT =null;
		StatementNode root = (StatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new BlockStatementNode(nextId, root); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("BlockStatement",27, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VarDeclarationStatement ::= VarConstDeclaration 
            {
              VarDeclarationStatementNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration.asStatement(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclarationStatement",28, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // AssignmentStatement ::= Designator ASSIGNMENT Expression END 
            {
              AssignmentStatementNode RESULT =null;
		Designator designator = (Designator)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		ExpressionNode expression = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new AssignmentStatementNode(nextId, designator, expression); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AssignmentStatement",29, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // AssignmentStatement ::= Designator PLUS_ASSIGN Expression END 
            {
              AssignmentStatementNode RESULT =null;
		Designator designator = (Designator)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		LexicalUnit p = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		ExpressionNode expression = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = AssignmentStatementNode.fromSyntacticSugar(
                                            nextId, p, designator, OperatorOverloadConstants._PLUS, expression); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AssignmentStatement",29, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // AssignmentStatement ::= Designator MINUS_ASSIGN Expression END 
            {
              AssignmentStatementNode RESULT =null;
		Designator designator = (Designator)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		LexicalUnit m = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		ExpressionNode expression = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = AssignmentStatementNode.fromSyntacticSugar(
                                            nextId, m, designator, OperatorOverloadConstants._MINUS, expression); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AssignmentStatement",29, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // AssignmentStatement ::= Designator MULT_ASSIGN Expression END 
            {
              AssignmentStatementNode RESULT =null;
		Designator designator = (Designator)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		LexicalUnit m = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		ExpressionNode expression = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = AssignmentStatementNode.fromSyntacticSugar(
                                            nextId, m, designator, OperatorOverloadConstants._MULT, expression); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AssignmentStatement",29, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // AssignmentStatement ::= Designator DIV_ASSIGN Expression END 
            {
              AssignmentStatementNode RESULT =null;
		Designator designator = (Designator)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		LexicalUnit d = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		ExpressionNode expression = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = AssignmentStatementNode.fromSyntacticSugar(
                                            nextId, d, designator, OperatorOverloadConstants._DIV, expression); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AssignmentStatement",29, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // AssignmentStatement ::= Designator MOD_ASSIGN Expression END 
            {
              AssignmentStatementNode RESULT =null;
		Designator designator = (Designator)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		LexicalUnit m = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		ExpressionNode expression = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = AssignmentStatementNode.fromSyntacticSugar(
                                            nextId, m, designator, OperatorOverloadConstants._MOD, expression); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AssignmentStatement",29, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Designator ::= VariableExpression 
            {
              Designator RESULT =null;
		VariableExpressionNode expression = (VariableExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = Designator.ofVar(expression); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Designator",30, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Designator ::= FieldAccessExpression 
            {
              Designator RESULT =null;
		PointExpressionNode expression = (PointExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = Designator.ofField(expression); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Designator",30, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Designator ::= ArrayAccessExpression 
            {
              Designator RESULT =null;
		ArrayAccessExpressionNode expression = (ArrayAccessExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = Designator.ofArray(expression); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Designator",30, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FunctionCallStatement ::= FunctionCallExpression END 
            {
              FunctionCallStatementNode RESULT =null;
		FunctionCallExpressionNode function = (FunctionCallExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = function.asStatement(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionCallStatement",31, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ReturnStatement ::= RETURN END 
            {
              ReturnStatementNode RESULT =null;
		LexicalUnit r = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new ReturnStatementNode(nextId, r); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",32, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ReturnStatement ::= RETURN Expression END 
            {
              ReturnStatementNode RESULT =null;
		LexicalUnit r = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		ExpressionNode expression = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new ReturnStatementNode(nextId, r, expression); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",32, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // IfElseStatement ::= IF Expression BlockStatement ElsePartStatement 
            {
              IfElseStatementNode RESULT =null;
		ExpressionNode condition = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		BlockStatementNode ifBlock = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		StatementNode elsePart = (StatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new IfElseStatementNode(nextId, condition, ifBlock, elsePart); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("IfElseStatement",33, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ElsePartStatement ::= ELSE BlockStatement 
            {
              StatementNode RESULT =null;
		BlockStatementNode elseBlock = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = elseBlock; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ElsePartStatement",34, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ElsePartStatement ::= ELSE IfElseStatement 
            {
              StatementNode RESULT =null;
		IfElseStatementNode ifElse = (IfElseStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = ifElse; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ElsePartStatement",34, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ElsePartStatement ::= 
            {
              StatementNode RESULT =null;
		 RESULT = null; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ElsePartStatement",34, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SwitchStatement ::= SWITCH Expression CURLY_L SwitchCasesStatement CURLY_R 
            {
              SwitchStatementNode RESULT =null;
		ExpressionNode expression = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		Map<ConstantExpressionNode,StatementNode> cases = (Map<ConstantExpressionNode,StatementNode>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new SwitchStatementNode(nextId, expression, cases);
                          
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("SwitchStatement",35, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SwitchCasesStatement ::= ConstantExpression ARROW Statement 
            {
              Map<ConstantExpressionNode,StatementNode> RESULT =null;
		ConstantExpressionNode expression = (ConstantExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		StatementNode statement = (StatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new HashMap<>(Collections.singletonMap(expression, statement)
                         ); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("SwitchCasesStatement",36, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SwitchCasesStatement ::= UNDERSCORE ARROW Statement 
            {
              Map<ConstantExpressionNode,StatementNode> RESULT =null;
		LexicalUnit u = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		StatementNode statement = (StatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new HashMap<>(Collections.singletonMap(
                                ConstantExpressionNode.special(nextId, u, new Type("~Default")),
                                                                statement));
                         
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("SwitchCasesStatement",36, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SwitchCasesStatement ::= SwitchCasesStatement ConstantExpression ARROW Statement 
            {
              Map<ConstantExpressionNode,StatementNode> RESULT =null;
		Map<ConstantExpressionNode,StatementNode> cases = (Map<ConstantExpressionNode,StatementNode>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		ConstantExpressionNode expression = (ConstantExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		StatementNode statement = (StatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 cases.put(expression, statement); RESULT = cases; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("SwitchCasesStatement",36, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SwitchCasesStatement ::= SwitchCasesStatement UNDERSCORE ARROW Statement 
            {
              Map<ConstantExpressionNode,StatementNode> RESULT =null;
		Map<ConstantExpressionNode,StatementNode> cases = (Map<ConstantExpressionNode,StatementNode>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		LexicalUnit u = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		StatementNode statement = (StatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 cases.put(
                                ConstantExpressionNode.special(nextId, u, new Type("~Default")),
                                                            statement);
                            RESULT = cases; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("SwitchCasesStatement",36, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // WhileStatement ::= WHILE Expression BlockStatement 
            {
              WhileStatementNode RESULT =null;
		ExpressionNode condition = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		BlockStatementNode whileBlock = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new WhileStatementNode(nextId, condition, whileBlock); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("WhileStatement",37, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ForStatement ::= FOR BaseVarDeclaration IN Expression BlockStatement 
            {
              ForStatementNode RESULT =null;
		Name variable = (Name)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		ExpressionNode iterable = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		BlockStatementNode forBlock = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ForStatementNode(nextId, variable, iterable, forBlock); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ForStatement",38, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Expression ::= Expression0 
            {
              ExpressionNode RESULT =null;
		ExpressionNode expression = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = expression; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression",39, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expression0 ::= Expression0 ELLIPSIS Expression1 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		LexicalUnit e = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = FunctionCallExpressionNode.operator(nextId, e, first, OperatorOverloadConstants._TO, last); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression0",40, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Expression0 ::= Expression1 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = first; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression0",40, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Expression1 ::= Expression1 OR Expression2 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		LexicalUnit o = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = FunctionCallExpressionNode.operator(nextId, o, first, OperatorOverloadConstants._OR, last); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression1",41, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Expression1 ::= Expression2 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = first; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression1",41, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Expression2 ::= Expression2 AND Expression3 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		LexicalUnit a = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = FunctionCallExpressionNode.operator(nextId, a, first, OperatorOverloadConstants._AND, last); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression2",42, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Expression2 ::= Expression3 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = first; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression2",42, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Expression3 ::= Expression3 EQUALS Expression4 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		LexicalUnit e = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		
                   RESULT = FunctionCallExpressionNode.operator(nextId, e, first, OperatorOverloadConstants._EQUALS, last);
                
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression3",43, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Expression3 ::= Expression3 NEQ Expression4 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		LexicalUnit n = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		
                   // first._equals(last)._not()
                   RESULT = FunctionCallExpressionNode.operator(nextId, n, OperatorOverloadConstants._NOT,
                        FunctionCallExpressionNode.operator(nextId, n, first, OperatorOverloadConstants._EQUALS, last));
                
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression3",43, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Expression3 ::= Expression3 IDENTITY Expression4 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		LexicalUnit i = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		
                   // ~id(first, last)
                   RESULT = new FunctionCallExpressionNode(nextId, i,
                                new VariableExpressionNode(nextId, new LexicalUnit(OperatorOverloadConstants._ID)),
                                Arrays.asList(first, last));
                
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression3",43, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Expression3 ::= Expression4 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = first; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression3",43, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Expression4 ::= Expression4 GT Expression5 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		LexicalUnit g = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = FunctionCallExpressionNode.operator(nextId, g, first, OperatorOverloadConstants._GT, last); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression4",44, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Expression4 ::= Expression4 GE Expression5 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		LexicalUnit g = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = FunctionCallExpressionNode.operator(nextId, g, first, OperatorOverloadConstants._GE, last); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression4",44, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Expression4 ::= Expression4 LT Expression5 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		LexicalUnit l = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = FunctionCallExpressionNode.operator(nextId, l, first, OperatorOverloadConstants._LT, last); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression4",44, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Expression4 ::= Expression4 LE Expression5 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		LexicalUnit l = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = FunctionCallExpressionNode.operator(nextId, l, first, OperatorOverloadConstants._LE, last); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression4",44, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Expression4 ::= Expression5 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = first; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression4",44, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Expression5 ::= Expression5 PLUS Expression6 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		LexicalUnit p = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = FunctionCallExpressionNode.operator(nextId, p, first, OperatorOverloadConstants._PLUS, last); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression5",45, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Expression5 ::= Expression5 MINUS Expression6 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		LexicalUnit p = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		
                   RESULT = FunctionCallExpressionNode.operator(nextId, p, first, OperatorOverloadConstants._MINUS, last);
                
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression5",45, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Expression5 ::= Expression6 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = first; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression5",45, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Expression6 ::= Expression6 MULT Expression7 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		LexicalUnit m = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		
                   RESULT = FunctionCallExpressionNode.operator(nextId, m, first, OperatorOverloadConstants._MULT, last);
                
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression6",46, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Expression6 ::= Expression6 DIV Expression7 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		LexicalUnit d = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = FunctionCallExpressionNode.operator(nextId, d, first, OperatorOverloadConstants._DIV, last); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression6",46, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Expression6 ::= Expression6 MOD Expression7 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		LexicalUnit m = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode last = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = FunctionCallExpressionNode.operator(nextId, m, first, OperatorOverloadConstants._MOD, last); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression6",46, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Expression6 ::= Expression7 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = first; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression6",46, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Expression7 ::= PLUS Expression7 
            {
              ExpressionNode RESULT =null;
		LexicalUnit p = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = FunctionCallExpressionNode.operator(nextId, p, OperatorOverloadConstants._PLUS, first); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression7",47, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Expression7 ::= MINUS Expression7 
            {
              ExpressionNode RESULT =null;
		LexicalUnit m = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = FunctionCallExpressionNode.operator(nextId, m, OperatorOverloadConstants._MINUS, first); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression7",47, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Expression7 ::= NOT Expression7 
            {
              ExpressionNode RESULT =null;
		LexicalUnit n = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = FunctionCallExpressionNode.operator(nextId, n, OperatorOverloadConstants._NOT, first); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression7",47, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Expression7 ::= Expression8 
            {
              ExpressionNode RESULT =null;
		ExpressionNode first = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = first; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression7",47, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Expression8 ::= FieldAccessExpression 
            {
              ExpressionNode RESULT =null;
		PointExpressionNode expression = (PointExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = expression; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression8",48, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Expression8 ::= ArrayAccessExpression 
            {
              ExpressionNode RESULT =null;
		ArrayAccessExpressionNode expression = (ArrayAccessExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = expression; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression8",48, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Expression8 ::= FunctionCallExpression 
            {
              ExpressionNode RESULT =null;
		FunctionCallExpressionNode expression = (FunctionCallExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = expression; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression8",48, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Expression8 ::= Expression9 
            {
              ExpressionNode RESULT =null;
		ExpressionNode expression = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = expression; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression8",48, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Expr8 ::= FieldAccessExpression 
            {
              ExpressionNode RESULT =null;
		PointExpressionNode expression = (PointExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = expression; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expr8",49, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Expr8 ::= ArrayAccessExpression 
            {
              ExpressionNode RESULT =null;
		ArrayAccessExpressionNode expression = (ArrayAccessExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = expression; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expr8",49, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Expr8 ::= FunctionCallExpression 
            {
              ExpressionNode RESULT =null;
		FunctionCallExpressionNode expression = (FunctionCallExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = expression; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expr8",49, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Expr8 ::= Expr9 
            {
              ExpressionNode RESULT =null;
		ExpressionNode expression = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = expression; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expr8",49, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Expression9 ::= Expr9 
            {
              ExpressionNode RESULT =null;
		ExpressionNode expression = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = expression; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression9",50, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Expression9 ::= GlobalConstExpression 
            {
              ExpressionNode RESULT =null;
		VariableExpressionNode expression = (VariableExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = expression; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression9",50, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Expr9 ::= PARENTH_L Expression0 PARENTH_R 
            {
              ExpressionNode RESULT =null;
		ExpressionNode expression = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = expression; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expr9",51, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Expr9 ::= VariableExpression 
            {
              ExpressionNode RESULT =null;
		VariableExpressionNode expression = (VariableExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = expression; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expr9",51, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Expr9 ::= ConstantExpression 
            {
              ExpressionNode RESULT =null;
		ConstantExpressionNode expression = (ConstantExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = expression; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expr9",51, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Expr9 ::= ListConstructorExpression 
            {
              ExpressionNode RESULT =null;
		ListConstructorExpressionNode expression = (ListConstructorExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = expression; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expr9",51, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Expr9 ::= ConstructorCallExpression 
            {
              ExpressionNode RESULT =null;
		ConstructorCallExpressionNode expression = (ConstructorCallExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = expression; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expr9",51, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Expr9 ::= error 
            {
              ExpressionNode RESULT =null;
		 parser.report_error("Expected an expression", null); RESULT = new ErrorExpressionNode(nextId); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expr9",51, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ArrayAccessExpression ::= Expression8 SQUARE_L Expression SQUARE_R 
            {
              ArrayAccessExpressionNode RESULT =null;
		ExpressionNode array = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		ExpressionNode index = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new ArrayAccessExpressionNode(nextId, array, index); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ArrayAccessExpression",54, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // FieldAccessExpression ::= Expression8 POINT IDENTIFIER 
            {
              PointExpressionNode RESULT =null;
		ExpressionNode expression = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		LexicalUnit identifier = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new PointExpressionNode(nextId, expression, identifier); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FieldAccessExpression",53, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // FunctionCallExpression ::= Expr8 Arguments 
            {
              FunctionCallExpressionNode RESULT =null;
		ExpressionNode function = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		List<ExpressionNode> arguments = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionCallExpressionNode(nextId, function, arguments); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionCallExpression",55, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ConstructorCallExpression ::= TYPE Arguments 
            {
              ConstructorCallExpressionNode RESULT =null;
		LexicalUnit type = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		List<ExpressionNode> arguments = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ConstructorCallExpressionNode(nextId, new Type(type), arguments); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstructorCallExpression",64, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ConstructorCallExpression ::= GLOBAL Arguments 
            {
              ConstructorCallExpressionNode RESULT =null;
		LexicalUnit type = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		List<ExpressionNode> arguments = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ConstructorCallExpressionNode(nextId, new Type(type), arguments); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstructorCallExpression",64, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ConstructorCallExpression ::= TYPE LT Type GT Arguments 
            {
              ConstructorCallExpressionNode RESULT =null;
		LexicalUnit type = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-4)).value;
		Type qualified = (Type)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		List<ExpressionNode> arguments = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ConstructorCallExpressionNode(
                                            nextId, new Type(type, qualified), arguments); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstructorCallExpression",64, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // VariableExpression ::= IDENTIFIER 
            {
              VariableExpressionNode RESULT =null;
		LexicalUnit id = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new VariableExpressionNode(nextId, id); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VariableExpression",56, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // VariableExpression ::= THIS 
            {
              VariableExpressionNode RESULT =null;
		LexicalUnit id = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new VariableExpressionNode(nextId, id); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VariableExpression",56, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // GlobalConstExpression ::= GLOBAL 
            {
              VariableExpressionNode RESULT =null;
		LexicalUnit id = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new VariableExpressionNode(nextId, id); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalConstExpression",57, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ConstantExpression ::= INT 
            {
              ConstantExpressionNode RESULT =null;
		LexicalUnit n = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = ConstantExpressionNode.fromInt(nextId, n); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression",58, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ConstantExpression ::= REAL 
            {
              ConstantExpressionNode RESULT =null;
		LexicalUnit x = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = ConstantExpressionNode.fromFloat(nextId, x); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression",58, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // ConstantExpression ::= TRUE 
            {
              ConstantExpressionNode RESULT =null;
		LexicalUnit t = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = ConstantExpressionNode.fromBoolean(nextId, t); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression",58, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // ConstantExpression ::= FALSE 
            {
              ConstantExpressionNode RESULT =null;
		LexicalUnit f = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = ConstantExpressionNode.fromBoolean(nextId, f); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression",58, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ConstantExpression ::= CHAR 
            {
              ConstantExpressionNode RESULT =null;
		LexicalUnit c = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = ConstantExpressionNode.fromChar(nextId, c); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression",58, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ConstantExpression ::= NOTHING 
            {
              ConstantExpressionNode RESULT =null;
		LexicalUnit n = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = ConstantExpressionNode.ofNothing(nextId, n); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression",58, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ConstantExpression ::= NULL 
            {
              ConstantExpressionNode RESULT =null;
		LexicalUnit n = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = ConstantExpressionNode.ofNull(nextId, n); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression",58, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ListConstructorExpression ::= STRING 
            {
              ListConstructorExpressionNode RESULT =null;
		LexicalUnit str = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = ListConstructorExpressionNode.fromString(nextId, str); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListConstructorExpression",59, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // ListConstructorExpression ::= SQUARE_L TYPE SQUARE_R 
            {
              ListConstructorExpressionNode RESULT =null;
		LexicalUnit s = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		LexicalUnit type = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new ListConstructorExpressionNode(nextId, s, new Type(type)); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListConstructorExpression",59, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ListConstructorExpression ::= SQUARE_L TYPE LT Type GT SQUARE_R 
            {
              ListConstructorExpressionNode RESULT =null;
		LexicalUnit s = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-5)).value;
		LexicalUnit type = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-4)).value;
		Type param = (Type)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		 RESULT = new ListConstructorExpressionNode(nextId, s, new Type(type, param)); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListConstructorExpression",59, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // ListConstructorExpression ::= SQUARE_L ListElements SQUARE_R 
            {
              ListConstructorExpressionNode RESULT =null;
		LexicalUnit s = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		List<ExpressionNode> elements = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new ListConstructorExpressionNode(nextId, s, elements); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListConstructorExpression",59, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // ListElements ::= Expression 
            {
              List<ExpressionNode> RESULT =null;
		ExpressionNode element = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ArrayList<>(Collections.singletonList(element)); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListElements",60, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // ListElements ::= ListElements COMMA Expression 
            {
              List<ExpressionNode> RESULT =null;
		List<ExpressionNode> elements = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		ExpressionNode element = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 elements.add(element); RESULT = elements; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListElements",60, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // AnonymousObjectConstructorExpression ::= CURLY_L CURLY_R 
            {
              AnonymousObjectConstructorExpressionNode RESULT =null;
		 RESULT = new AnonymousObjectConstructorExpressionNode(nextId); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectConstructorExpression",61, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // AnonymousObjectConstructorExpression ::= CURLY_L AnonymousObjectFields CURLY_R 
            {
              AnonymousObjectConstructorExpressionNode RESULT =null;
		VarDeclarationNode fields = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new AnonymousObjectConstructorExpressionNode(nextId, fields); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectConstructorExpression",61, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // AnonymousObjectFields ::= AnonymousObjectField 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode field = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = field; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectFields",62, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // AnonymousObjectFields ::= AnonymousObjectField COMMA AnonymousObjectFields 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode field = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		VarDeclarationNode fields = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 field.linkedTo(fields); RESULT = field; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectFields",62, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // AnonymousObjectField ::= VarInitDeclaration 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode field = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = field; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectField",63, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // AnonymousObjectField ::= LocalConstDeclaration 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode field = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = field; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectField",63, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // Type ::= TYPE 
            {
              Type RESULT =null;
		LexicalUnit name = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new Type(name); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Type",65, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // Type ::= TYPE LT Type GT 
            {
              Type RESULT =null;
		LexicalUnit name = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		Type param = (Type)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new Type(name, param); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Type",65, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Type ::= GLOBAL 
            {
              Type RESULT =null;
		LexicalUnit name = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new Type(name); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Type",65, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Type ::= GLOBAL LT Type GT 
            {
              Type RESULT =null;
		LexicalUnit name = (LexicalUnit)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		Type param = (Type)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new Type(name, param); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Type",65, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // Arguments ::= PARENTH_L PARENTH_R 
            {
              List<ExpressionNode> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Arguments",66, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // Arguments ::= PARENTH_L ArgumentList PARENTH_R 
            {
              List<ExpressionNode> RESULT =null;
		List<ExpressionNode> arguments = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = arguments; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Arguments",66, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // ArgumentList ::= Expression 
            {
              List<ExpressionNode> RESULT =null;
		ExpressionNode argument = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ArrayList<>(Collections.singletonList(argument)); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ArgumentList",67, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // ArgumentList ::= ArgumentList COMMA Expression 
            {
              List<ExpressionNode> RESULT =null;
		List<ExpressionNode> arguments = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		ExpressionNode argument = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 arguments.add(argument); RESULT = arguments; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ArgumentList",67, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SyntacticalAnalyser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SyntacticalAnalyser$do_action(
    int                        CUP$SyntacticalAnalyser$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticalAnalyser$parser,
    java.util.Stack            CUP$SyntacticalAnalyser$stack,
    int                        CUP$SyntacticalAnalyser$top)
    throws java.lang.Exception
    {
              return CUP$SyntacticalAnalyser$do_action_part00000000(
                               CUP$SyntacticalAnalyser$act_num,
                               CUP$SyntacticalAnalyser$parser,
                               CUP$SyntacticalAnalyser$stack,
                               CUP$SyntacticalAnalyser$top);
    }
}

