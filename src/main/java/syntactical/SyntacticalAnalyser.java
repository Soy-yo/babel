
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun Apr 26 13:31:58 CEST 2020
//----------------------------------------------------

package syntactical;

import lexical.LexicalAnalyser;
import syntactical.ast.*;

import java.util.*;

/**
 * CUP v0.11b beta 20140220 generated parser.
 *
 * @version Sun Apr 26 13:31:58 CEST 2020
 */
public class SyntacticalAnalyser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SyntacticalAnalyser() {super();}

  /** Constructor which sets the default scanner. */
  public SyntacticalAnalyser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SyntacticalAnalyser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

    /**
     * Production table.
     */
    protected static final short _production_table[][] =
            unpackFromStrings(new String[]{
                    "\000\135\000\002\002\004\000\002\002\004\000\002\003" +
                            "\004\000\002\003\002\000\002\004\005\000\002\005\005" +
                            "\000\002\005\003\000\002\006\004\000\002\006\002\000" +
                            "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
                            "\011\003\000\002\011\004\000\002\012\003\000\002\012" +
                            "\004\000\002\010\004\000\002\010\004\000\002\016\004" +
                            "\000\002\013\005\000\002\014\007\000\002\015\004\000" +
                            "\002\017\005\000\002\020\004\000\002\020\005\000\002" +
                            "\021\003\000\002\021\005\000\002\022\005\000\002\023" +
                            "\005\000\002\024\004\000\002\024\002\000\002\025\003" +
                            "\000\002\025\003\000\002\025\003\000\002\026\005\000" +
                            "\002\027\004\000\002\027\002\000\002\030\003\000\002" +
                            "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
                            "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
                            "\000\002\030\003\000\002\031\005\000\002\032\003\000" +
                            "\002\033\006\000\002\037\004\000\002\037\005\000\002" +
                            "\040\006\000\002\041\004\000\002\041\004\000\002\041" +
                            "\002\000\002\042\007\000\002\043\005\000\002\043\006" +
                            "\000\002\044\005\000\002\045\007\000\002\046\003\000" +
                            "\002\046\003\000\002\046\003\000\002\047\003\000\002" +
                            "\047\003\000\002\047\003\000\002\047\003\000\002\047" +
                            "\003\000\002\047\003\000\002\047\003\000\002\047\003" +
                            "\000\002\050\003\000\002\050\004\000\002\050\005\000" +
                            "\002\051\003\000\002\051\005\000\002\052\004\000\002" +
                            "\052\005\000\002\053\003\000\002\053\005\000\002\054" +
                            "\003\000\002\054\003\000\002\060\003\000\002\060\006" +
                            "\000\002\055\003\000\002\056\003\000\002\057\003\000" +
                            "\002\061\003\000\002\061\003\000\002\061\003\000\002" +
                            "\062\006\000\002\063\005\000\002\064\003"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[]{
                    "\000\235\000\014\002\ufffe\013\ufffe\014\ufffe\060\ufffe\061" +
                            "\ufffe\001\002\000\004\002\237\001\002\000\014\002\ufff9" +
                            "\013\025\014\024\060\020\061\023\001\002\000\004\060" +
                            "\205\001\002\000\014\002\uffff\013\uffff\014\uffff\060\uffff" +
                            "\061\uffff\001\002\000\004\057\235\001\002\000\012\002" +
                            "\ufff9\013\025\014\024\060\020\001\002\000\012\002\ufff6" +
                            "\013\ufff6\014\ufff6\060\ufff6\001\002\000\012\002\ufff5\013" +
                            "\ufff5\014\ufff5\060\ufff5\001\002\000\004\002\001\001\002" +
                            "\000\010\020\110\053\067\057\165\001\002\000\012\002" +
                            "\ufff8\013\ufff8\014\ufff8\060\ufff8\001\002\000\010\045\227" +
                            "\047\uffaf\060\uffaf\001\002\000\012\024\uffad\045\uffad\047" +
                            "\uffad\060\uffad\001\002\000\012\002\ufff7\013\ufff7\014\ufff7" +
                            "\060\ufff7\001\002\000\004\057\226\001\002\000\004\060" +
                            "\222\001\002\000\004\060\020\001\002\000\004\060\020" +
                            "\001\002\000\004\060\027\001\002\000\004\053\uffab\001" +
                            "\002\000\004\053\031\001\002\000\030\017\050\022\044" +
                            "\024\036\062\032\063\046\064\047\065\042\066\037\067" +
                            "\045\070\033\071\040\001\002\000\016\023\uffc2\024\uffc2" +
                            "\025\uffc2\026\uffc2\031\uffc2\057\uffc2\001\002\000\016\023" +
                            "\uffbd\024\uffbd\025\uffbd\026\uffbd\031\uffbd\057\uffbd\001\002" +
                            "\000\016\023\uffc5\024\uffc5\025\uffc5\026\uffc5\031\uffc5\057" +
                            "\uffc5\001\002\000\016\023\uffc4\024\uffc4\025\uffc4\026\uffc4" +
                            "\031\uffc4\057\uffc4\001\002\000\010\013\065\025\060\060" +
                            "\020\001\002\000\016\023\uffc0\024\uffc0\025\uffc0\026\uffc0" +
                            "\031\uffc0\057\uffc0\001\002\000\016\023\uffbc\024\uffbc\025" +
                            "\uffbc\026\uffbc\031\uffbc\057\uffbc\001\002\000\016\023\uffc3" +
                            "\024\uffc3\025\uffc3\026\uffc3\031\uffc3\057\uffc3\001\002\000" +
                            "\016\023\uffba\024\uffba\025\uffba\026\uffba\031\uffba\057\uffba" +
                            "\001\002\000\004\057\uffed\001\002\000\032\017\050\022" +
                            "\044\023\052\024\036\062\032\063\046\064\047\065\042" +
                            "\066\037\067\045\070\033\071\040\001\002\000\016\023" +
                            "\uffbf\024\uffbf\025\uffbf\026\uffbf\031\uffbf\057\uffbf\001\002" +
                            "\000\016\023\uffc1\024\uffc1\025\uffc1\026\uffc1\031\uffc1\057" +
                            "\uffc1\001\002\000\016\023\uffbe\024\uffbe\025\uffbe\026\uffbe" +
                            "\031\uffbe\057\uffbe\001\002\000\016\023\uffbb\024\uffbb\025" +
                            "\uffbb\026\uffbb\031\uffbb\057\uffbb\001\002\000\006\023\055" +
                            "\031\054\001\002\000\016\023\uffb9\024\uffb9\025\uffb9\026" +
                            "\uffb9\031\uffb9\057\uffb9\001\002\000\006\023\uffb7\031\uffb7" +
                            "\001\002\000\030\017\050\022\044\024\036\062\032\063" +
                            "\046\064\047\065\042\066\037\067\045\070\033\071\040" +
                            "\001\002\000\016\023\uffb8\024\uffb8\025\uffb8\026\uffb8\031" +
                            "\uffb8\057\uffb8\001\002\000\006\023\uffb6\031\uffb6\001\002" +
                            "\000\006\025\uffb3\031\072\001\002\000\016\023\uffb5\024" +
                            "\uffb5\025\uffb5\026\uffb5\031\uffb5\057\uffb5\001\002\000\004" +
                            "\025\071\001\002\000\004\053\067\001\002\000\006\025" +
                            "\uffb0\031\uffb0\001\002\000\006\025\uffb1\031\uffb1\001\002" +
                            "\000\004\060\020\001\002\000\010\025\uffec\031\uffec\057" +
                            "\uffec\001\002\000\030\017\050\022\044\024\036\062\032" +
                            "\063\046\064\047\065\042\066\037\067\045\070\033\071" +
                            "\040\001\002\000\010\025\uffee\031\uffee\057\uffee\001\002" +
                            "\000\016\023\uffb4\024\uffb4\025\uffb4\026\uffb4\031\uffb4\057" +
                            "\uffb4\001\002\000\006\013\065\060\020\001\002\000\004" +
                            "\025\uffb2\001\002\000\004\024\075\001\002\000\012\013" +
                            "\065\015\106\025\uffe3\060\020\001\002\000\012\002\uffe6" +
                            "\013\uffe6\014\uffe6\060\uffe6\001\002\000\012\013\065\015" +
                            "\106\025\uffe3\060\020\001\002\000\012\013\uffe1\015\uffe1" +
                            "\025\uffe1\060\uffe1\001\002\000\052\004\ufff3\006\ufff3\007" +
                            "\ufff3\010\ufff3\012\ufff3\013\ufff3\015\ufff3\017\ufff3\022\ufff3" +
                            "\024\ufff3\025\ufff3\060\ufff3\062\ufff3\063\ufff3\064\ufff3\065" +
                            "\ufff3\066\ufff3\067\ufff3\070\ufff3\071\ufff3\001\002\000\012" +
                            "\013\uffe2\015\uffe2\025\uffe2\060\uffe2\001\002\000\004\057" +
                            "\217\001\002\000\004\025\216\001\002\000\012\013\uffe0" +
                            "\015\uffe0\025\uffe0\060\uffe0\001\002\000\004\020\110\001" +
                            "\002\000\004\024\120\001\002\000\006\021\113\060\020" +
                            "\001\002\000\006\021\115\031\114\001\002\000\006\021" +
                            "\uffe8\031\uffe8\001\002\000\004\024\uffea\001\002\000\004" +
                            "\060\020\001\002\000\004\024\uffe9\001\002\000\006\021" +
                            "\uffe7\031\uffe7\001\002\000\012\013\uffdf\015\uffdf\025\uffdf" +
                            "\060\uffdf\001\002\000\024\004\136\006\134\007\145\010" +
                            "\123\012\127\013\065\024\120\025\uffdd\060\126\001\002" +
                            "\000\004\053\213\001\002\000\050\004\uffd9\006\uffd9\007" +
                            "\uffd9\010\uffd9\012\uffd9\013\uffd9\017\uffd9\022\uffd9\024\uffd9" +
                            "\025\uffd9\060\uffd9\062\uffd9\063\uffd9\064\uffd9\065\uffd9\066" +
                            "\uffd9\067\uffd9\070\uffd9\071\uffd9\001\002\000\030\017\050" +
                            "\022\044\024\036\062\032\063\046\064\047\065\042\066" +
                            "\037\067\045\070\033\071\040\001\002\000\050\004\uffdb" +
                            "\006\uffdb\007\uffdb\010\uffdb\012\uffdb\013\uffdb\017\uffdb\022" +
                            "\uffdb\024\uffdb\025\uffdb\060\uffdb\062\uffdb\063\uffdb\064\uffdb" +
                            "\065\uffdb\066\uffdb\067\uffdb\070\uffdb\071\uffdb\001\002\000" +
                            "\050\004\uffd2\006\uffd2\007\uffd2\010\uffd2\012\uffd2\013\uffd2" +
                            "\017\uffd2\022\uffd2\024\uffd2\025\uffd2\060\uffd2\062\uffd2\063" +
                            "\uffd2\064\uffd2\065\uffd2\066\uffd2\067\uffd2\070\uffd2\071\uffd2" +
                            "\001\002\000\014\022\uffac\030\uffac\045\uffad\053\uffac\060" +
                            "\uffad\001\002\000\032\017\050\022\044\024\036\057\207" +
                            "\062\032\063\046\064\047\065\042\066\037\067\045\070" +
                            "\033\071\040\001\002\000\050\004\uffdc\006\uffdc\007\uffdc" +
                            "\010\uffdc\012\uffdc\013\uffdc\017\uffdc\022\uffdc\024\uffdc\025" +
                            "\uffdc\060\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc" +
                            "\067\uffdc\070\uffdc\071\uffdc\001\002\000\006\022\201\030" +
                            "\200\001\002\000\010\022\uffa5\030\uffa5\053\uffaa\001\002" +
                            "\000\050\004\uffd8\006\uffd8\007\uffd8\010\uffd8\012\uffd8\013" +
                            "\uffd8\017\uffd8\022\uffd8\024\uffd8\025\uffd8\060\uffd8\062\uffd8" +
                            "\063\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8\070\uffd8\071" +
                            "\uffd8\001\002\000\030\017\050\022\044\024\036\062\032" +
                            "\063\046\064\047\065\042\066\037\067\045\070\033\071" +
                            "\040\001\002\000\006\053\067\057\165\001\002\000\030" +
                            "\017\050\022\044\024\036\062\032\063\046\064\047\065" +
                            "\042\066\037\067\045\070\033\071\040\001\002\000\050" +
                            "\004\uffd5\006\uffd5\007\uffd5\010\uffd5\012\uffd5\013\uffd5\017" +
                            "\uffd5\022\uffd5\024\uffd5\025\uffd5\060\uffd5\062\uffd5\063\uffd5" +
                            "\064\uffd5\065\uffd5\066\uffd5\067\uffd5\070\uffd5\071\uffd5\001" +
                            "\002\000\050\004\uffd7\006\uffd7\007\uffd7\010\uffd7\012\uffd7" +
                            "\013\uffd7\017\uffd7\022\uffd7\024\uffd7\025\uffd7\060\uffd7\062" +
                            "\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7\070\uffd7" +
                            "\071\uffd7\001\002\000\050\004\uffd6\006\uffd6\007\uffd6\010" +
                            "\uffd6\012\uffd6\013\uffd6\017\uffd6\022\uffd6\024\uffd6\025\uffd6" +
                            "\060\uffd6\062\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6\067" +
                            "\uffd6\070\uffd6\071\uffd6\001\002\000\050\004\uffda\006\uffda" +
                            "\007\uffda\010\uffda\012\uffda\013\uffda\017\uffda\022\uffda\024" +
                            "\uffda\025\uffda\060\uffda\062\uffda\063\uffda\064\uffda\065\uffda" +
                            "\066\uffda\067\uffda\070\uffda\071\uffda\001\002\000\004\053" +
                            "\uffa9\001\002\000\024\004\136\006\134\007\145\010\123" +
                            "\012\127\013\065\024\120\025\uffdd\060\126\001\002\000" +
                            "\004\060\020\001\002\000\004\025\151\001\002\000\050" +
                            "\004\uffd4\006\uffd4\007\uffd4\010\uffd4\012\uffd4\013\uffd4\017" +
                            "\uffd4\022\uffd4\024\uffd4\025\uffd4\060\uffd4\062\uffd4\063\uffd4" +
                            "\064\uffd4\065\uffd4\066\uffd4\067\uffd4\070\uffd4\071\uffd4\001" +
                            "\002\000\004\053\uffa8\001\002\000\060\002\uffd3\004\uffd3" +
                            "\005\uffd3\006\uffd3\007\uffd3\010\uffd3\012\uffd3\013\uffd3\014" +
                            "\uffd3\015\uffd3\017\uffd3\022\uffd3\024\uffd3\025\uffd3\060\uffd3" +
                            "\062\uffd3\063\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3\070" +
                            "\uffd3\071\uffd3\001\002\000\004\011\153\001\002\000\030" +
                            "\017\050\022\044\024\036\062\032\063\046\064\047\065" +
                            "\042\066\037\067\045\070\033\071\040\001\002\000\004" +
                            "\024\120\001\002\000\050\004\uffc6\006\uffc6\007\uffc6\010" +
                            "\uffc6\012\uffc6\013\uffc6\017\uffc6\022\uffc6\024\uffc6\025\uffc6" +
                            "\060\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6\067" +
                            "\uffc6\070\uffc6\071\uffc6\001\002\000\004\025\uffde\001\002" +
                            "\000\004\024\120\001\002\000\052\004\uffcb\005\161\006" +
                            "\uffcb\007\uffcb\010\uffcb\012\uffcb\013\uffcb\017\uffcb\022\uffcb" +
                            "\024\uffcb\025\uffcb\060\uffcb\062\uffcb\063\uffcb\064\uffcb\065" +
                            "\uffcb\066\uffcb\067\uffcb\070\uffcb\071\uffcb\001\002\000\006" +
                            "\004\136\024\120\001\002\000\050\004\uffce\006\uffce\007" +
                            "\uffce\010\uffce\012\uffce\013\uffce\017\uffce\022\uffce\024\uffce" +
                            "\025\uffce\060\uffce\062\uffce\063\uffce\064\uffce\065\uffce\066" +
                            "\uffce\067\uffce\070\uffce\071\uffce\001\002\000\050\004\uffcd" +
                            "\006\uffcd\007\uffcd\010\uffcd\012\uffcd\013\uffcd\017\uffcd\022" +
                            "\uffcd\024\uffcd\025\uffcd\060\uffcd\062\uffcd\063\uffcd\064\uffcd" +
                            "\065\uffcd\066\uffcd\067\uffcd\070\uffcd\071\uffcd\001\002\000" +
                            "\050\004\uffcc\006\uffcc\007\uffcc\010\uffcc\012\uffcc\013\uffcc" +
                            "\017\uffcc\022\uffcc\024\uffcc\025\uffcc\060\uffcc\062\uffcc\063" +
                            "\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc\070\uffcc\071\uffcc" +
                            "\001\002\000\056\002\ufff1\004\ufff1\006\ufff1\007\ufff1\010" +
                            "\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\017\ufff1\022\ufff1" +
                            "\024\ufff1\025\ufff1\060\ufff1\062\ufff1\063\ufff1\064\ufff1\065" +
                            "\ufff1\066\ufff1\067\ufff1\070\ufff1\071\ufff1\001\002\000\004" +
                            "\024\167\001\002\000\022\017\050\062\032\063\046\064" +
                            "\047\066\037\067\045\070\033\071\040\001\002\000\004" +
                            "\026\176\001\002\000\032\017\050\022\044\024\036\025" +
                            "\172\062\032\063\046\064\047\065\042\066\037\067\045" +
                            "\070\033\071\040\001\002\000\050\004\uffca\006\uffca\007" +
                            "\uffca\010\uffca\012\uffca\013\uffca\017\uffca\022\uffca\024\uffca" +
                            "\025\uffca\060\uffca\062\uffca\063\uffca\064\uffca\065\uffca\066" +
                            "\uffca\067\uffca\070\uffca\071\uffca\001\002\000\004\026\174" +
                            "\001\002\000\022\004\136\006\134\007\145\010\123\012" +
                            "\127\013\065\024\120\060\126\001\002\000\032\017\uffc8" +
                            "\022\uffc8\024\uffc8\025\uffc8\062\uffc8\063\uffc8\064\uffc8\065" +
                            "\uffc8\066\uffc8\067\uffc8\070\uffc8\071\uffc8\001\002\000\022" +
                            "\004\136\006\134\007\145\010\123\012\127\013\065\024" +
                            "\120\060\126\001\002\000\032\017\uffc9\022\uffc9\024\uffc9" +
                            "\025\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\067" +
                            "\uffc9\070\uffc9\071\uffc9\001\002\000\004\060\205\001\002" +
                            "\000\030\017\050\022\044\024\036\062\032\063\046\064" +
                            "\047\065\042\066\037\067\045\070\033\071\040\001\002" +
                            "\000\004\023\203\001\002\000\004\053\uffa7\001\002\000" +
                            "\004\053\uffa6\001\002\000\016\011\uffac\020\uffac\021\uffac" +
                            "\031\uffac\053\uffac\057\uffac\001\002\000\004\057\210\001" +
                            "\002\000\050\004\uffd0\006\uffd0\007\uffd0\010\uffd0\012\uffd0" +
                            "\013\uffd0\017\uffd0\022\uffd0\024\uffd0\025\uffd0\060\uffd0\062" +
                            "\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0\070\uffd0" +
                            "\071\uffd0\001\002\000\050\004\uffcf\006\uffcf\007\uffcf\010" +
                            "\uffcf\012\uffcf\013\uffcf\017\uffcf\022\uffcf\024\uffcf\025\uffcf" +
                            "\060\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf\066\uffcf\067" +
                            "\uffcf\070\uffcf\071\uffcf\001\002\000\004\024\120\001\002" +
                            "\000\050\004\uffc7\006\uffc7\007\uffc7\010\uffc7\012\uffc7\013" +
                            "\uffc7\017\uffc7\022\uffc7\024\uffc7\025\uffc7\060\uffc7\062\uffc7" +
                            "\063\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7\070\uffc7\071" +
                            "\uffc7\001\002\000\030\017\050\022\044\024\036\062\032" +
                            "\063\046\064\047\065\042\066\037\067\045\070\033\071" +
                            "\040\001\002\000\004\057\215\001\002\000\050\004\uffd1" +
                            "\006\uffd1\007\uffd1\010\uffd1\012\uffd1\013\uffd1\017\uffd1\022" +
                            "\uffd1\024\uffd1\025\uffd1\060\uffd1\062\uffd1\063\uffd1\064\uffd1" +
                            "\065\uffd1\066\uffd1\067\uffd1\070\uffd1\071\uffd1\001\002\000" +
                            "\012\002\uffe5\013\uffe5\014\uffe5\060\uffe5\001\002\000\052" +
                            "\004\ufff2\006\ufff2\007\ufff2\010\ufff2\012\ufff2\013\ufff2\015" +
                            "\ufff2\017\ufff2\022\ufff2\024\ufff2\025\ufff2\060\ufff2\062\ufff2" +
                            "\063\ufff2\064\ufff2\065\ufff2\066\ufff2\067\ufff2\070\ufff2\071" +
                            "\ufff2\001\002\000\004\025\uffe4\001\002\000\006\041\223" +
                            "\057\224\001\002\000\006\041\ufffb\057\ufffb\001\002\000" +
                            "\004\060\225\001\002\000\014\002\ufffd\013\ufffd\014\ufffd" +
                            "\060\ufffd\061\ufffd\001\002\000\006\041\ufffc\057\ufffc\001" +
                            "\002\000\056\002\ufff0\004\ufff0\006\ufff0\007\ufff0\010\ufff0" +
                            "\012\ufff0\013\ufff0\014\ufff0\015\ufff0\017\ufff0\022\ufff0\024" +
                            "\ufff0\025\ufff0\060\ufff0\062\ufff0\063\ufff0\064\ufff0\065\ufff0" +
                            "\066\ufff0\067\ufff0\070\ufff0\071\ufff0\001\002\000\004\060" +
                            "\020\001\002\000\004\047\231\001\002\000\006\047\uffae" +
                            "\060\uffae\001\002\000\004\024\120\001\002\000\016\002" +
                            "\uffeb\013\uffeb\014\uffeb\015\uffeb\025\uffeb\060\uffeb\001\002" +
                            "\000\004\002\ufffa\001\002\000\012\002\ufff4\013\ufff4\014" +
                            "\ufff4\060\ufff4\001\002\000\016\011\uffef\020\uffef\021\uffef" +
                            "\031\uffef\053\uffef\057\uffef\001\002\000\004\002\000\001" +
                            "\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /**
     * <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[]{
                    "\000\235\000\006\002\003\003\004\001\001\000\002\001" +
                            "\001\000\032\004\006\006\013\007\010\010\012\011\015" +
                            "\013\021\014\007\016\014\017\020\022\011\055\016\060" +
                            "\005\001\001\000\004\056\235\001\001\000\002\001\001" +
                            "\000\002\001\001\000\030\006\233\007\010\010\012\011" +
                            "\015\013\021\014\007\016\014\017\020\022\011\055\016" +
                            "\060\005\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\004\020\231\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\004\005\220\001\001\000\004\055\073" +
                            "\001\001\000\006\055\016\060\025\001\001\000\004\057" +
                            "\027\001\001\000\002\001\001\000\002\001\001\000\012" +
                            "\046\042\047\033\050\034\052\040\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\020\013\063\015\062\016\061\053\060\054\056\055" +
                            "\016\060\005\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\014\046\052\047\033\050\034\051\050\052\040\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\012\046\055\047\033\050\034\052\040\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\012\013\065\016\061" +
                            "\055\016\060\005\001\001\000\002\001\001\000\012\046" +
                            "\067\047\033\050\034\052\040\001\001\000\002\001\001" +
                            "\000\002\001\001\000\020\013\063\015\062\016\061\053" +
                            "\072\054\056\055\016\060\005\001\001\000\002\001\001" +
                            "\000\004\023\075\001\001\000\030\010\100\012\101\013" +
                            "\021\015\102\016\014\017\104\024\103\025\076\026\077" +
                            "\055\016\060\005\001\001\000\002\001\001\000\030\010" +
                            "\100\012\101\013\021\015\102\016\014\017\104\024\217" +
                            "\025\076\026\077\055\016\060\005\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\004\020\106\001" +
                            "\001\000\004\031\116\001\001\000\012\016\111\021\110" +
                            "\055\016\060\005\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\010\016\115\055\016\060\005" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\060\010\100\012\124\013\021\015\102\016\134" +
                            "\027\145\030\143\031\146\032\127\033\123\034\141\037" +
                            "\121\040\132\042\137\044\140\045\136\055\016\056\131" +
                            "\060\005\061\120\062\142\063\147\064\130\001\001\000" +
                            "\002\001\001\000\002\001\001\000\012\046\210\047\033" +
                            "\050\034\052\040\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\012\046\205\047\033\050\034" +
                            "\052\040\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\012\046\165\047\033" +
                            "\050\034\052\040\001\001\000\002\001\001\000\012\046" +
                            "\156\047\033\050\034\052\040\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\060\010\100\012\124\013\021\015\102" +
                            "\016\134\027\155\030\143\031\146\032\127\033\123\034" +
                            "\141\037\121\040\132\042\137\044\140\045\136\055\016" +
                            "\056\131\060\005\061\120\062\142\063\147\064\130\001" +
                            "\001\000\010\016\151\055\016\060\005\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\012\046\153\047\033\050\034" +
                            "\052\040\001\001\000\004\031\154\001\001\000\002\001" +
                            "\001\000\002\001\001\000\004\031\157\001\001\000\004" +
                            "\041\161\001\001\000\006\031\162\040\163\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\006\043\170\047\167\001" +
                            "\001\000\002\001\001\000\012\046\172\047\033\050\034" +
                            "\052\040\001\001\000\002\001\001\000\002\001\001\000" +
                            "\056\010\100\012\124\013\021\015\102\016\134\030\174" +
                            "\031\146\032\127\033\123\034\141\037\121\040\132\042" +
                            "\137\044\140\045\136\055\016\056\131\060\005\061\120" +
                            "\062\142\063\147\064\130\001\001\000\002\001\001\000" +
                            "\056\010\100\012\124\013\021\015\102\016\134\030\176" +
                            "\031\146\032\127\033\123\034\141\037\121\040\132\042" +
                            "\137\044\140\045\136\055\016\056\131\060\005\061\120" +
                            "\062\142\063\147\064\130\001\001\000\002\001\001\000" +
                            "\004\056\203\001\001\000\012\046\201\047\033\050\034" +
                            "\052\040\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\004\031\211\001\001\000" +
                            "\002\001\001\000\012\046\213\047\033\050\034\052\040" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\006\055\016\060\227" +
                            "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
                            "\232\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$SyntacticalAnalyser$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
      action_obj = new CUP$SyntacticalAnalyser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SyntacticalAnalyser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    return analyser.next_token();

    }


    private LexicalAnalyser analyser = (LexicalAnalyser) getScanner();

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SyntacticalAnalyser$actions {


  private final SyntacticalAnalyser parser;

  /** Constructor */
  CUP$SyntacticalAnalyser$actions(SyntacticalAnalyser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SyntacticalAnalyser$do_action_part00000000(
    int                        CUP$SyntacticalAnalyser$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticalAnalyser$parser,
    java.util.Stack            CUP$SyntacticalAnalyser$stack,
    int                        CUP$SyntacticalAnalyser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SyntacticalAnalyser$result;

      /* select the action based on the action number */
      switch (CUP$SyntacticalAnalyser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= ImportList DeclarationList 
            {
              ProgramNode RESULT =null;
		List<String> imports = (List<String>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		DeclarationNode declarations = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ProgramNode(declarations, imports); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Program",0, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		RESULT = start_val;
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$SyntacticalAnalyser$parser.done_parsing();
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ImportList ::= ImportList Import 
            {
              List<String> RESULT =null;
		List<String> imports = (List<String>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		String file = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 imports.add(file); RESULT = imports; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ImportList",1, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ImportList ::= 
            {
              List<String> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ImportList",1, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Import ::= IMPORT FilePath END 
            {
              String RESULT =null;
		String path = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = path; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Import",2, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FilePath ::= FilePath DIV IDENTIFIER 
            {
              String RESULT =null;
		String path = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		String filename = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = path + "/" + filename; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FilePath",3, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FilePath ::= IDENTIFIER 
            {
              String RESULT =null;
		String filename = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = filename; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FilePath",3, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DeclarationList ::= Declaration DeclarationList 
            {
              DeclarationNode RESULT =null;
		DeclarationNode declaration = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		DeclarationNode declarations = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration.linkedTo(declarations); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("DeclarationList",4, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DeclarationList ::= 
            {
              DeclarationNode RESULT =null;
		 RESULT = null; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("DeclarationList",4, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Declaration ::= GlobalVarConstDeclaration 
            {
              DeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration",5, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Declaration ::= FunctionDeclaration 
            {
              DeclarationNode RESULT =null;
		FunctionDeclarationNode declaration = (FunctionDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration",5, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Declaration ::= ClassDeclaration 
            {
              DeclarationNode RESULT =null;
		ClassDeclarationNode declaration = (ClassDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration",5, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // GlobalVarConstDeclaration ::= VarDeclaration 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalVarConstDeclaration",7, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // GlobalVarConstDeclaration ::= GlobalConstDeclaration END 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalVarConstDeclaration",7, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VarConstDeclaration ::= VarDeclaration 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarConstDeclaration",8, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VarConstDeclaration ::= LocalConstDeclaration END 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarConstDeclaration",8, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VarDeclaration ::= BaseVarDeclaration END 
            {
              VarDeclarationNode RESULT =null;
		Name declaration = (Name)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new VarDeclarationNode(declaration); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclaration",6, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VarDeclaration ::= VarInitDeclaration END 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclaration",6, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BaseVarDeclaration ::= Type VarId 
            {
              Name RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new Name(id, type); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("BaseVarDeclaration",12, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarInitDeclaration ::= BaseVarDeclaration ASSIGNMENT Expression 
            {
              VarDeclarationNode RESULT =null;
		Name name = (Name)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		ExpressionNode initialValue = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new VarDeclarationNode(name, initialValue); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarInitDeclaration",9, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // GlobalConstDeclaration ::= CONST Type GlobalConstId ASSIGNMENT Expression 
            {
              VarDeclarationNode RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		ExpressionNode initialValue = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new VarDeclarationNode(new Name(id, type), initialValue, true, true); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalConstDeclaration",10, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LocalConstDeclaration ::= CONST VarInitDeclaration 
            {
              VarDeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration.constant(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("LocalConstDeclaration",11, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FunctionDeclaration ::= BaseVarDeclaration FunctionParameters BlockStatement 
            {
              FunctionDeclarationNode RESULT =null;
		Name name = (Name)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		List<Name> parameters = (List<Name>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		BlockStatementNode block = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new FunctionDeclarationNode(name, parameters, block); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionDeclaration",13, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 23: // FunctionParameters ::= PARENTH_L PARENTH_R
            {
                List<Name> RESULT = null;
                RESULT = new ArrayList<>();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionParameters", 14, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 24: // FunctionParameters ::= PARENTH_L ParameterList PARENTH_R
            {
                List<Name> RESULT = null;
                List<Name> parameters = (List<Name>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = parameters;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionParameters", 14, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 25: // ParameterList ::= BaseVarDeclaration
            {
                List<Name> RESULT = null;
                Name parameter = (Name) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ArrayList<>(Collections.singletonList(parameter));
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ParameterList", 15, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 26: // ParameterList ::= ParameterList COMMA BaseVarDeclaration
            {
                List<Name> RESULT = null;
                List<Name> parameters = (List<Name>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                Name parameter = (Name) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                parameters.add(parameter);
                RESULT = parameters;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ParameterList", 15, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ClassDeclaration ::= CLASS TypeName ClassBlock 
            {
              ClassDeclarationNode RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		DeclarationNode block = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ClassDeclarationNode(name, block); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",16, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassBlock ::= CURLY_L ClassElementList CURLY_R 
            {
              DeclarationNode RESULT =null;
		DeclarationNode contents = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = contents; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassBlock",17, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassElementList ::= ClassElement ClassElementList 
            {
              DeclarationNode RESULT =null;
		DeclarationNode element = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		DeclarationNode elements = (DeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = element.linkedTo(elements); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElementList",18, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassElementList ::= 
            {
              DeclarationNode RESULT =null;
		 RESULT = null; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElementList",18, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClassElement ::= VarConstDeclaration 
            {
              DeclarationNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement",19, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassElement ::= ConstructorDeclaration 
            {
              DeclarationNode RESULT =null;
		ConstructorDeclarationNode declaration = (ConstructorDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement",19, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassElement ::= FunctionDeclaration 
            {
              DeclarationNode RESULT =null;
		FunctionDeclarationNode declaration = (FunctionDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement",19, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ConstructorDeclaration ::= CONSTRUCTOR FunctionParameters BlockStatement 
            {
              ConstructorDeclarationNode RESULT =null;
		List<Name> parameters = (List<Name>)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		BlockStatementNode block = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ConstructorDeclarationNode(parameters, block); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstructorDeclaration",20, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // StatementList ::= Statement StatementList 
            {
              StatementNode RESULT =null;
		StatementNode statement = (StatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		StatementNode statements = (StatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement.linkedTo(statements); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("StatementList",21, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // StatementList ::= 
            {
              StatementNode RESULT =null;
		 RESULT = null; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("StatementList",21, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Statement ::= VarDeclarationStatement 
            {
              StatementNode RESULT =null;
		VarDeclarationStatementNode statement = (VarDeclarationStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",22, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Statement ::= AssignmentStatement 
            {
              StatementNode RESULT =null;
		AssignmentStatementNode statement = (AssignmentStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",22, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Statement ::= FunctionCallStatement 
            {
              StatementNode RESULT =null;
		FunctionCallStatementNode statement = (FunctionCallStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",22, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Statement ::= ReturnStatement 
            {
              StatementNode RESULT =null;
		ReturnStatementNode statement = (ReturnStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",22, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Statement ::= IfElseStatement 
            {
              StatementNode RESULT =null;
		IfElseStatementNode statement = (IfElseStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",22, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Statement ::= SwitchStatement 
            {
              StatementNode RESULT =null;
		SwitchStatementNode statement = (SwitchStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",22, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Statement ::= WhileStatement 
            {
              StatementNode RESULT =null;
		WhileStatementNode statement = (WhileStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",22, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Statement ::= ForStatement 
            {
              StatementNode RESULT =null;
		ForStatementNode statement = (ForStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",22, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Statement ::= BlockStatement 
            {
              StatementNode RESULT =null;
		BlockStatementNode statement = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = statement; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement",22, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BlockStatement ::= CURLY_L StatementList CURLY_R 
            {
              BlockStatementNode RESULT =null;
		StatementNode root = (StatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new BlockStatementNode(root); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("BlockStatement",23, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VarDeclarationStatement ::= VarConstDeclaration 
            {
              VarDeclarationStatementNode RESULT =null;
		VarDeclarationNode declaration = (VarDeclarationNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = declaration.asStatement(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclarationStatement",24, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // AssignmentStatement ::= Designator ASSIGNMENT Expression END 
            {
              AssignmentStatementNode RESULT =null;
		Designator designator = (Designator)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		ExpressionNode expression = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new AssignmentStatementNode(designator, expression); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AssignmentStatement",25, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 49: // ReturnStatement ::= RETURN END
            {
              ReturnStatementNode RESULT =null;
		 RESULT = new ReturnStatementNode(); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",29, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 50: // ReturnStatement ::= RETURN Expression END
            {
              ReturnStatementNode RESULT =null;
		ExpressionNode expression = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		 RESULT = new ReturnStatementNode(expression); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",29, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 51: // IfElseStatement ::= IF Expression BlockStatement ElsePartStatement
            {
              IfElseStatementNode RESULT =null;
		ExpressionNode condition = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-2)).value;
		BlockStatementNode ifBlock = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		StatementNode elsePart = (StatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new IfElseStatementNode(condition, ifBlock, elsePart); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("IfElseStatement",30, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 52: // ElsePartStatement ::= ELSE BlockStatement
            {
              StatementNode RESULT =null;
		BlockStatementNode elseBlock = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = elseBlock; 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ElsePartStatement",31, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 53: // ElsePartStatement ::= ELSE IfElseStatement
            {
                StatementNode RESULT = null;
                IfElseStatementNode ifElse = (IfElseStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = ifElse;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ElsePartStatement", 31, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 54: // ElsePartStatement ::=
            {
                StatementNode RESULT = null;
                RESULT = null;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ElsePartStatement", 31, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 55: // SwitchStatement ::= SWITCH Expression CURLY_L SwitchCasesStatement CURLY_R
            {
                SwitchStatementNode RESULT = null;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                Map<ExpressionNode, StatementNode> cases = (Map<ExpressionNode, StatementNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new SwitchStatementNode(expression, cases);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("SwitchStatement", 32, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 56: // SwitchCasesStatement ::= ConstantExpression ARROW Statement
            {
                Map<ExpressionNode, StatementNode> RESULT = null;
                ConstantExpressionNode expression = (ConstantExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                StatementNode statement = (StatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new HashMap<>(Collections.singletonMap(expression, statement));
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("SwitchCasesStatement", 33, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 57: // SwitchCasesStatement ::= SwitchCasesStatement Expression ARROW Statement
            {
                Map<ExpressionNode, StatementNode> RESULT = null;
                Map<ExpressionNode, StatementNode> cases = (Map<ExpressionNode, StatementNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                StatementNode statement = (StatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                cases.put(expression, statement);
                RESULT = cases;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("SwitchCasesStatement", 33, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 58: // WhileStatement ::= WHILE Expression BlockStatement
            {
                WhileStatementNode RESULT = null;
                ExpressionNode condition = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                BlockStatementNode whileBlock = (BlockStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new WhileStatementNode(condition, whileBlock);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("WhileStatement", 34, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 59: // ForStatement ::= FOR BaseVarDeclaration IN Expression BlockStatement
            {
              ForStatementNode RESULT =null;
		Name variable = (Name)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-3)).value;
		ExpressionNode iterable = (ExpressionNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top-1)).value;
		BlockStatementNode forBlock = (BlockStatementNode)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = new ForStatementNode(variable, iterable, forBlock); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ForStatement",35, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 60: // Expression ::= ConstantExpression
            {
                ExpressionNode RESULT = null;
                ConstantExpressionNode expression = (ConstantExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression",36, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 61: // Expression ::= ListConstructorExpression
            {
                ExpressionNode RESULT = null;
                ListConstructorExpressionNode expression = (ListConstructorExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression",36, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 62: // Expression ::= AnonymousObjectConstructorExpression
            {
                ExpressionNode RESULT = null;
                AnonymousObjectConstructorExpressionNode expression = (AnonymousObjectConstructorExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression",36, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 63: // ConstantExpression ::= INT
            {
              ConstantExpressionNode RESULT =null;
		String n = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = ConstantExpressionNode.fromInt(n); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression",37, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 64: // ConstantExpression ::= REAL
            {
              ConstantExpressionNode RESULT =null;
		String x = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = ConstantExpressionNode.fromFloat(x); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression",37, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 65: // ConstantExpression ::= TRUE
            {
              ConstantExpressionNode RESULT =null;
		String t = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = ConstantExpressionNode.fromBoolean(t); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression",37, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 66: // ConstantExpression ::= FALSE
            {
              ConstantExpressionNode RESULT =null;
		String f = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = ConstantExpressionNode.fromBoolean(f); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression",37, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 67: // ConstantExpression ::= CHAR
            {
              ConstantExpressionNode RESULT =null;
		String c = (String)((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
		 RESULT = ConstantExpressionNode.fromChar(c); 
              CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression",37, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 68: // ConstantExpression ::= NOTHING
            {
                ConstantExpressionNode RESULT = null;
                RESULT = ConstantExpressionNode.ofNothing();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression", 37, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 69: // ConstantExpression ::= NULL
            {
                ConstantExpressionNode RESULT = null;
                RESULT = ConstantExpressionNode.ofNull();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression", 37, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 70: // ConstantExpression ::= UNDERSCORE
            {
                ConstantExpressionNode RESULT = null;
                RESULT = ConstantExpressionNode.ofNull();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression", 37, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 71: // ListConstructorExpression ::= STRING
            {
                ListConstructorExpressionNode RESULT = null;
                String str = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = ListConstructorExpressionNode.fromString(str);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListConstructorExpression", 38, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 72: // ListConstructorExpression ::= SQUARE_L SQUARE_R
            {
                ListConstructorExpressionNode RESULT = null;
                RESULT = new ListConstructorExpressionNode();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListConstructorExpression", 38, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 73: // ListConstructorExpression ::= SQUARE_L ListElements SQUARE_R
            {
                ListConstructorExpressionNode RESULT = null;
                List<ExpressionNode> elements = (List<ExpressionNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new ListConstructorExpressionNode(elements);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListConstructorExpression", 38, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 74: // ListElements ::= Expression
            {
                List<ExpressionNode> RESULT = null;
                ExpressionNode element = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ArrayList<>(Collections.singletonList(element));
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListElements", 39, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 75: // ListElements ::= ListElements COMMA Expression
            {
                List<ExpressionNode> RESULT = null;
                List<ExpressionNode> elements = (List<ExpressionNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode element = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                elements.add(element);
                RESULT = elements;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListElements", 39, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 76: // AnonymousObjectConstructorExpression ::= CURLY_L CURLY_R
            {
                AnonymousObjectConstructorExpressionNode RESULT = null;
                RESULT = new AnonymousObjectConstructorExpressionNode();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectConstructorExpression", 40, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 77: // AnonymousObjectConstructorExpression ::= CURLY_L AnonymousObjectFields CURLY_R
            {
                AnonymousObjectConstructorExpressionNode RESULT = null;
                DeclarationNode fields = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new AnonymousObjectConstructorExpressionNode(fields);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectConstructorExpression", 40, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 78: // AnonymousObjectFields ::= AnonymousObjectField
            {
                DeclarationNode RESULT = null;
                DeclarationNode field = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = field;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectFields", 41, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 79: // AnonymousObjectFields ::= AnonymousObjectField COMMA AnonymousObjectFields
            {
                DeclarationNode RESULT = null;
                DeclarationNode field = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                DeclarationNode fields = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = field.linkedTo(fields);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectFields", 41, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 80: // AnonymousObjectField ::= VarInitDeclaration
            {
                DeclarationNode RESULT = null;
                VarDeclarationNode field = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = field;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectField", 42, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 81: // AnonymousObjectField ::= LocalConstDeclaration
            {
                DeclarationNode RESULT = null;
                VarDeclarationNode field = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = field;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectField", 42, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 82: // Type ::= TypeName
            {
                Type RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new Type(name);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Type", 46, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 83: // Type ::= TypeName LT Type GT
            {
                Type RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                Type param = (Type) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new Type(name, param);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Type", 46, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 84: // TypeName ::= IDENTIFIER
            {
                String RESULT = null;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = id;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("TypeName", 43, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 85: // VarId ::= IDENTIFIER
            {
                String RESULT = null;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = id;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarId",44, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 86: // GlobalConstId ::= IDENTIFIER
            {
                String RESULT = null;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = id;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalConstId",45, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 87: // Designator ::= VarId
            {
                Designator RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Designator",47, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 88: // Designator ::= ArrayAccess
            {
                Designator RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Designator",47, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 89: // Designator ::= FieldAccess
            {
                Designator RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Designator",47, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 90: // ArrayAccess ::= DesignableExpression SQUARE_L Expression SQUARE_R
            {
                ExpressionNode RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ArrayAccess",48, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 91: // FieldAccess ::= DesignableExpression POINT VarId
            {
                ExpressionNode RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FieldAccess",49, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 92: // DesignableExpression ::= VarId
            {
                ExpressionNode RESULT = null;

                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("DesignableExpression",50, RESULT);
            }
          return CUP$SyntacticalAnalyser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SyntacticalAnalyser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SyntacticalAnalyser$do_action(
    int                        CUP$SyntacticalAnalyser$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticalAnalyser$parser,
    java.util.Stack            CUP$SyntacticalAnalyser$stack,
    int                        CUP$SyntacticalAnalyser$top)
    throws java.lang.Exception
    {
              return CUP$SyntacticalAnalyser$do_action_part00000000(
                               CUP$SyntacticalAnalyser$act_num,
                               CUP$SyntacticalAnalyser$parser,
                               CUP$SyntacticalAnalyser$stack,
                               CUP$SyntacticalAnalyser$top);
    }
}

