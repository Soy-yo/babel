class Node {
    Int value;
    Node left;
    Node right;

    constructor(Int value) {
        this.value = value;
        this.right = null;
        this.left = null;
    }

    Node merge(Node other) {
         if other == null {
             return this;
         }
         this.value += other.value;
         this.left = this.merge(this.left, other.left);
         this.right = this.merge(this.right, other.right);
         return this;
    }

    Int value() {
        return this.value;
    }

    Node left() {
        return this.left;
    }

    Void setLeft(Node left) {
        this.left = left;
    }

    Node right() {
        return this.right;
    }

    Void setRight(Node right) {
        this.right = right;
    }

}

class BinaryTree {
    Node root;

    constructor(Node root) {
        this.root = root;
    }

    constructor(Array<Int> arr) {
       for Int a in arr {
            this.add(a);
       }
    }

    Node addRecursive(Node current, Int value) {
        if current == null {
            return Node(value);
        }

        if value < current.value() {
            current.setLeft(this.addRecursive(current.left(), value));
        } else if value > current.value() {
            current.setRight(this.addRecursive(current.right(), value));
        } else {
            // value already exists
            return current;
        }

        return current;
    }

    Void add(Int value) {
        this.root = this.addRecursive(root, value);
    }

    Int findSmallestValue() {
        if this.root.left() == null {
            return root.value();
        } else {
            return this.findSmallestValue(root.left());
        }
    }

    BinaryTree _plus(BinaryTree other) {
        return BinaryTree(this.root.merge(other.root));
    }

}


Void main() {
    BinaryTree([1,2,3,4,5]) bt;
    print(bt.findSmallestValue());
    BinaryTree([3,1,4,69,62,7]) bt2;
    BinaryTree bt3 = bt + bt2;
}