
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Fri May 01 18:55:47 CEST 2020
//----------------------------------------------------

package syntactical;

import lexical.LexicalAnalyser;
import syntactical.ast.*;

import java.util.*;

/**
 * CUP v0.11b beta 20140220 generated parser.
 *
 * @version Fri May 01 18:55:47 CEST 2020
 */
public class SyntacticalAnalyser extends java_cup.runtime.lr_parser {

    /**
     * Default constructor.
     */
    public SyntacticalAnalyser() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    public SyntacticalAnalyser(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public SyntacticalAnalyser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][] =
            unpackFromStrings(new String[]{
                    "\000\234\000\002\002\004\000\002\002\004\000\002\003" +
                            "\004\000\002\003\002\000\002\004\005\000\002\005\005" +
                            "\000\002\005\003\000\002\006\003\000\002\006\003\000" +
                            "\002\006\003\000\002\007\004\000\002\007\002\000\002" +
                            "\010\003\000\002\010\003\000\002\010\003\000\002\012" +
                            "\003\000\002\012\004\000\002\013\003\000\002\013\004" +
                            "\000\002\011\004\000\002\011\004\000\002\017\004\000" +
                            "\002\014\005\000\002\014\004\000\002\015\007\000\002" +
                            "\015\005\000\002\016\004\000\002\063\003\000\002\063" +
                            "\003\000\002\020\005\000\002\021\004\000\002\021\005" +
                            "\000\002\022\003\000\002\022\005\000\002\023\005\000" +
                            "\002\023\005\000\002\024\005\000\002\025\004\000\002" +
                            "\025\002\000\002\026\003\000\002\026\003\000\002\026" +
                            "\003\000\002\027\005\000\002\030\004\000\002\030\002" +
                            "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
                            "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
                            "\031\003\000\002\031\003\000\002\031\003\000\002\032" +
                            "\005\000\002\033\003\000\002\034\006\000\002\034\006" +
                            "\000\002\034\006\000\002\034\006\000\002\034\006\000" +
                            "\002\034\006\000\002\035\003\000\002\035\003\000\002" +
                            "\035\003\000\002\036\004\000\002\037\004\000\002\037" +
                            "\005\000\002\040\006\000\002\041\004\000\002\041\004" +
                            "\000\002\041\002\000\002\042\007\000\002\043\005\000" +
                            "\002\043\005\000\002\043\006\000\002\043\006\000\002" +
                            "\044\005\000\002\045\007\000\002\046\003\000\002\047" +
                            "\005\000\002\047\003\000\002\050\005\000\002\050\003" +
                            "\000\002\051\005\000\002\051\003\000\002\052\005\000" +
                            "\002\052\005\000\002\052\005\000\002\052\003\000\002" +
                            "\053\005\000\002\053\005\000\002\053\005\000\002\053" +
                            "\005\000\002\053\003\000\002\054\005\000\002\054\005" +
                            "\000\002\054\003\000\002\055\005\000\002\055\005\000" +
                            "\002\055\005\000\002\055\003\000\002\056\004\000\002" +
                            "\056\004\000\002\056\004\000\002\056\003\000\002\057" +
                            "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
                            "\000\002\060\003\000\002\060\003\000\002\060\003\000" +
                            "\002\060\003\000\002\061\003\000\002\061\003\000\002" +
                            "\062\005\000\002\062\003\000\002\062\003\000\002\062" +
                            "\003\000\002\062\003\000\002\065\006\000\002\064\005" +
                            "\000\002\066\004\000\002\077\004\000\002\077\004\000" +
                            "\002\077\007\000\002\067\003\000\002\067\003\000\002" +
                            "\070\003\000\002\071\003\000\002\071\003\000\002\071" +
                            "\003\000\002\071\003\000\002\071\003\000\002\071\003" +
                            "\000\002\071\003\000\002\072\003\000\002\072\004\000" +
                            "\002\072\005\000\002\073\003\000\002\073\005\000\002" +
                            "\074\004\000\002\074\005\000\002\075\003\000\002\075" +
                            "\005\000\002\076\003\000\002\076\003\000\002\100\003" +
                            "\000\002\100\006\000\002\100\003\000\002\100\006\000" +
                            "\002\101\004\000\002\101\005\000\002\102\003\000\002" +
                            "\102\005"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[]{
                    "\000\u010f\000\016\002\ufffe\013\ufffe\014\ufffe\060\ufffe\062" +
                            "\ufffe\063\ufffe\001\002\000\004\002\u0111\001\002\000\016" +
                            "\002\ufff6\013\026\014\025\060\023\062\017\063\024\001" +
                            "\002\000\004\057\u0110\001\002\000\016\002\uffff\013\uffff" +
                            "\014\uffff\060\uffff\062\uffff\063\uffff\001\002\000\004\056" +
                            "\u010f\001\002\000\014\002\ufff3\013\ufff3\014\ufff3\060\ufff3" +
                            "\062\ufff3\001\002\000\014\002\ufff6\013\026\014\025\060" +
                            "\023\062\017\001\002\000\014\002\ufff2\013\ufff2\014\ufff2" +
                            "\060\ufff2\062\ufff2\001\002\000\004\002\001\001\002\000" +
                            "\010\017\243\052\155\056\312\001\002\000\014\002\ufff5" +
                            "\013\ufff5\014\ufff5\060\ufff5\062\ufff5\001\002\000\012\017" +
                            "\170\044\u0109\057\uff6d\060\uff6d\001\002\000\004\057\307" +
                            "\001\002\000\014\002\ufff4\013\ufff4\014\ufff4\060\ufff4\062" +
                            "\ufff4\001\002\000\004\056\u0108\001\002\000\012\017\170" +
                            "\044\217\057\uff6b\060\uff6b\001\002\000\010\057\u0103\060" +
                            "\u0101\062\u0104\001\002\000\006\060\226\062\227\001\002" +
                            "\000\006\060\023\062\017\001\002\000\004\060\032\001" +
                            "\002\000\004\060\031\001\002\000\004\056\uffe8\001\002" +
                            "\000\004\052\033\001\002\000\046\017\103\021\064\023" +
                            "\072\032\045\034\040\053\042\057\104\060\055\061\046" +
                            "\062\043\064\035\065\070\066\034\067\100\070\050\071" +
                            "\102\072\101\073\052\001\002\000\064\017\uff7b\020\uff7b" +
                            "\021\uff7b\022\uff7b\023\uff7b\024\uff7b\025\uff7b\026\uff7b\027" +
                            "\uff7b\030\uff7b\032\uff7b\034\uff7b\036\uff7b\040\uff7b\042\uff7b" +
                            "\043\uff7b\044\uff7b\045\uff7b\046\uff7b\047\uff7b\050\uff7b\051" +
                            "\uff7b\054\uff7b\055\uff7b\056\uff7b\001\002\000\064\017\uff7f" +
                            "\020\uff7f\021\uff7f\022\uff7f\023\uff7f\024\uff7f\025\uff7f\026" +
                            "\uff7f\027\uff7f\030\uff7f\032\uff7f\034\uff7f\036\uff7f\040\uff7f" +
                            "\042\uff7f\043\uff7f\044\uff7f\045\uff7f\046\uff7f\047\uff7f\050" +
                            "\uff7f\051\uff7f\054\uff7f\055\uff7f\056\uff7f\001\002\000\010" +
                            "\024\uffe5\030\uffe5\056\uffe5\001\002\000\062\017\uff8b\020" +
                            "\uff8b\021\uff8b\022\uff8b\023\uff8b\024\uff8b\026\uff8b\027\uff8b" +
                            "\030\uff8b\032\uff8b\034\uff8b\036\uff8b\040\uff8b\042\uff8b\043" +
                            "\uff8b\044\uff8b\045\uff8b\046\uff8b\047\uff8b\050\uff8b\051\uff8b" +
                            "\054\uff8b\055\uff8b\056\uff8b\001\002\000\044\017\103\021" +
                            "\064\032\045\034\040\053\042\057\104\060\055\061\046" +
                            "\062\043\064\035\065\070\066\034\067\100\070\050\071" +
                            "\102\072\101\073\052\001\002\000\062\017\uff93\020\uff97" +
                            "\021\uff97\022\uff97\023\uff97\024\uff97\026\uff97\027\uff97\030" +
                            "\uff97\032\uff97\034\uff97\036\uff97\040\uff97\042\uff97\043\uff97" +
                            "\044\uff97\045\uff97\046\uff97\047\uff97\050\uff97\051\uff97\054" +
                            "\uff97\055\uff97\056\uff97\001\002\000\044\017\103\021\064" +
                            "\032\045\034\040\053\042\057\104\060\055\061\046\062" +
                            "\043\064\035\065\070\066\034\067\100\070\050\071\102" +
                            "\072\101\073\052\001\002\000\006\017\170\044\207\001" +
                            "\002\000\062\017\uff91\020\uff95\021\uff95\022\uff95\023\uff95" +
                            "\024\uff95\026\uff95\027\uff95\030\uff95\032\uff95\034\uff95\036" +
                            "\uff95\040\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95" +
                            "\047\uff95\050\uff95\051\uff95\054\uff95\055\uff95\056\uff95\001" +
                            "\002\000\044\017\103\021\064\032\045\034\040\053\042" +
                            "\057\104\060\055\061\046\062\043\064\035\065\070\066" +
                            "\034\067\100\070\050\071\102\072\101\073\052\001\002" +
                            "\000\076\017\uff81\020\uff81\021\uff81\022\uff81\023\uff81\024" +
                            "\uff81\026\uff81\027\uff81\030\uff81\031\uff81\032\uff81\033\uff81" +
                            "\034\uff81\035\uff81\036\uff81\037\uff81\040\uff81\041\uff81\042" +
                            "\uff81\043\uff81\044\uff81\045\uff81\046\uff81\047\uff81\050\uff81" +
                            "\051\uff81\052\uff81\054\uff81\055\uff81\056\uff81\001\002\000" +
                            "\062\017\uff8c\020\uff8c\021\uff8c\022\uff8c\023\uff8c\024\uff8c" +
                            "\026\uff8c\027\uff8c\030\uff8c\032\uff8c\034\uff8c\036\uff8c\040" +
                            "\uff8c\042\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c" +
                            "\050\uff8c\051\uff8c\054\uff8c\055\uff8c\056\uff8c\001\002\000" +
                            "\064\017\uff7d\020\uff7d\021\uff7d\022\uff7d\023\uff7d\024\uff7d" +
                            "\025\uff7d\026\uff7d\027\uff7d\030\uff7d\032\uff7d\034\uff7d\036" +
                            "\uff7d\040\uff7d\042\uff7d\043\uff7d\044\uff7d\045\uff7d\046\uff7d" +
                            "\047\uff7d\050\uff7d\051\uff7d\054\uff7d\055\uff7d\056\uff7d\001" +
                            "\002\000\060\020\uff94\021\uff94\022\uff94\023\uff94\024\uff94" +
                            "\026\uff94\027\uff94\030\uff94\032\uff94\034\uff94\036\uff94\040" +
                            "\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94\047\uff94" +
                            "\050\uff94\051\uff94\054\uff94\055\uff94\056\uff94\001\002\000" +
                            "\064\017\uff79\020\uff79\021\uff79\022\uff79\023\uff79\024\uff79" +
                            "\025\uff79\026\uff79\027\uff79\030\uff79\032\uff79\034\uff79\036" +
                            "\uff79\040\uff79\042\uff79\043\uff79\044\uff79\045\uff79\046\uff79" +
                            "\047\uff79\050\uff79\051\uff79\054\uff79\055\uff79\056\uff79\001" +
                            "\002\000\060\020\uff98\021\202\022\uff98\023\uff98\024\uff98" +
                            "\026\uff98\027\201\030\uff98\032\uff98\034\uff98\036\uff98\040" +
                            "\uff98\042\uff98\043\uff98\044\uff98\045\uff98\046\uff98\047\uff98" +
                            "\050\uff98\051\uff98\054\uff98\055\uff98\056\uff98\001\002\000" +
                            "\054\020\uff9c\022\uff9c\023\uff9c\024\uff9c\026\uff9c\030\uff9c" +
                            "\032\uff9c\034\uff9c\036\uff9c\040\uff9c\042\uff9c\043\uff9c\044" +
                            "\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c\054\uff9c" +
                            "\055\uff9c\056\uff9c\001\002\000\062\017\170\020\uff80\021" +
                            "\uff80\022\uff80\023\uff80\024\uff80\026\uff80\027\uff80\030\uff80" +
                            "\032\uff80\034\uff80\036\uff80\040\uff80\042\uff80\043\uff80\044" +
                            "\uff80\045\uff80\046\uff80\047\uff80\050\uff80\051\uff80\054\uff80" +
                            "\055\uff80\056\uff80\001\002\000\054\020\uffa0\022\uffa0\023" +
                            "\uffa0\024\uffa0\026\uffa0\030\uffa0\032\uffa0\034\uffa0\036\132" +
                            "\040\133\042\131\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047" +
                            "\uffa0\050\uffa0\051\uffa0\054\uffa0\055\uffa0\056\uffa0\001\002" +
                            "\000\062\017\uff90\020\uff8f\021\uff8f\022\uff8f\023\uff8f\024" +
                            "\uff8f\026\uff8f\027\uff8f\030\uff8f\032\uff8f\034\uff8f\036\uff8f" +
                            "\040\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f\046\uff8f\047" +
                            "\uff8f\050\uff8f\051\uff8f\054\uff8f\055\uff8f\056\uff8f\001\002" +
                            "\000\046\020\uffa3\022\uffa3\023\uffa3\024\uffa3\026\uffa3\030" +
                            "\uffa3\032\126\034\127\043\uffa3\044\uffa3\045\uffa3\046\uffa3" +
                            "\047\uffa3\050\uffa3\051\uffa3\054\uffa3\055\uffa3\056\uffa3\001" +
                            "\002\000\042\020\uffa8\022\uffa8\023\uffa8\024\uffa8\026\uffa8" +
                            "\030\uffa8\043\123\044\121\045\124\046\122\047\uffa8\050" +
                            "\uffa8\051\uffa8\054\uffa8\055\uffa8\056\uffa8\001\002\000\004" +
                            "\017\170\001\002\000\032\020\uffac\022\uffac\023\uffac\024" +
                            "\uffac\026\uffac\030\uffac\047\115\050\116\051\117\054\uffac" +
                            "\055\uffac\056\uffac\001\002\000\046\017\103\021\064\022" +
                            "\162\032\045\034\040\053\042\057\104\060\055\061\046" +
                            "\062\043\064\035\065\070\066\034\067\100\070\050\071" +
                            "\102\072\101\073\052\001\002\000\024\020\uffae\022\uffae" +
                            "\023\uffae\024\uffae\026\uffae\030\uffae\054\113\055\uffae\056" +
                            "\uffae\001\002\000\062\017\uff8a\020\uff8a\021\uff8a\022\uff8a" +
                            "\023\uff8a\024\uff8a\026\uff8a\027\uff8a\030\uff8a\032\uff8a\034" +
                            "\uff8a\036\uff8a\040\uff8a\042\uff8a\043\uff8a\044\uff8a\045\uff8a" +
                            "\046\uff8a\047\uff8a\050\uff8a\051\uff8a\054\uff8a\055\uff8a\056" +
                            "\uff8a\001\002\000\022\020\uffb0\022\uffb0\023\uffb0\024\uffb0" +
                            "\026\uffb0\030\uffb0\055\111\056\uffb0\001\002\000\064\017" +
                            "\uff7e\020\uff7e\021\uff7e\022\uff7e\023\uff7e\024\uff7e\025\uff7e" +
                            "\026\uff7e\027\uff7e\030\uff7e\032\uff7e\034\uff7e\036\uff7e\040" +
                            "\uff7e\042\uff7e\043\uff7e\044\uff7e\045\uff7e\046\uff7e\047\uff7e" +
                            "\050\uff7e\051\uff7e\054\uff7e\055\uff7e\056\uff7e\001\002\000" +
                            "\020\020\uffb2\022\uffb2\023\uffb2\024\uffb2\026\106\030\uffb2" +
                            "\056\uffb2\001\002\000\012\013\153\024\146\060\023\062" +
                            "\017\001\002\000\062\017\uff92\020\uff96\021\uff96\022\uff96" +
                            "\023\uff96\024\uff96\026\uff96\027\uff96\030\uff96\032\uff96\034" +
                            "\uff96\036\uff96\040\uff96\042\uff96\043\uff96\044\uff96\045\uff96" +
                            "\046\uff96\047\uff96\050\uff96\051\uff96\054\uff96\055\uff96\056" +
                            "\uff96\001\002\000\060\020\uff8e\021\uff8e\022\uff8e\023\uff8e" +
                            "\024\uff8e\026\uff8e\027\uff8e\030\uff8e\032\uff8e\034\uff8e\036" +
                            "\uff8e\040\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e\046\uff8e" +
                            "\047\uff8e\050\uff8e\051\uff8e\054\uff8e\055\uff8e\056\uff8e\001" +
                            "\002\000\004\056\uffe9\001\002\000\062\017\uff89\020\uff89" +
                            "\021\uff89\022\uff89\023\uff89\024\uff89\026\uff89\027\uff89\030" +
                            "\uff89\032\uff89\034\uff89\036\uff89\040\uff89\042\uff89\043\uff89" +
                            "\044\uff89\045\uff89\046\uff89\047\uff89\050\uff89\051\uff89\054" +
                            "\uff89\055\uff89\056\uff89\001\002\000\010\024\uffe6\030\uffe6" +
                            "\056\uffe6\001\002\000\062\017\uff78\020\uff78\021\uff78\022" +
                            "\uff78\023\uff78\024\uff78\026\uff78\027\uff78\030\uff78\032\uff78" +
                            "\034\uff78\036\uff78\040\uff78\042\uff78\043\uff78\044\uff78\045" +
                            "\uff78\046\uff78\047\uff78\050\uff78\051\uff78\054\uff78\055\uff78" +
                            "\056\uff78\001\002\000\064\017\uff7a\020\uff7a\021\uff7a\022" +
                            "\uff7a\023\uff7a\024\uff7a\025\uff7a\026\uff7a\027\uff7a\030\uff7a" +
                            "\032\uff7a\034\uff7a\036\uff7a\040\uff7a\042\uff7a\043\uff7a\044" +
                            "\uff7a\045\uff7a\046\uff7a\047\uff7a\050\uff7a\051\uff7a\054\uff7a" +
                            "\055\uff7a\056\uff7a\001\002\000\064\017\uff7c\020\uff7c\021" +
                            "\uff7c\022\uff7c\023\uff7c\024\uff7c\025\uff7c\026\uff7c\027\uff7c" +
                            "\030\uff7c\032\uff7c\034\uff7c\036\uff7c\040\uff7c\042\uff7c\043" +
                            "\uff7c\044\uff7c\045\uff7c\046\uff7c\047\uff7c\050\uff7c\051\uff7c" +
                            "\054\uff7c\055\uff7c\056\uff7c\001\002\000\044\017\103\021" +
                            "\064\032\045\034\040\053\042\057\104\060\055\061\046" +
                            "\062\043\064\035\065\070\066\034\067\100\070\050\071" +
                            "\102\072\101\073\052\001\002\000\076\017\uff82\020\uff82" +
                            "\021\uff82\022\uff82\023\uff82\024\uff82\026\uff82\027\uff82\030" +
                            "\uff82\031\uff82\032\uff82\033\uff82\034\uff82\035\uff82\036\uff82" +
                            "\037\uff82\040\uff82\041\uff82\042\uff82\043\uff82\044\uff82\045" +
                            "\uff82\046\uff82\047\uff82\050\uff82\051\uff82\052\uff82\054\uff82" +
                            "\055\uff82\056\uff82\001\002\000\006\020\107\026\106\001" +
                            "\002\000\044\017\103\021\064\032\045\034\040\053\042" +
                            "\057\104\060\055\061\046\062\043\064\035\065\070\066" +
                            "\034\067\100\070\050\071\102\072\101\073\052\001\002" +
                            "\000\062\017\uff8d\020\uff8d\021\uff8d\022\uff8d\023\uff8d\024" +
                            "\uff8d\026\uff8d\027\uff8d\030\uff8d\032\uff8d\034\uff8d\036\uff8d" +
                            "\040\uff8d\042\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d\047" +
                            "\uff8d\050\uff8d\051\uff8d\054\uff8d\055\uff8d\056\uff8d\001\002" +
                            "\000\022\020\uffb1\022\uffb1\023\uffb1\024\uffb1\026\uffb1\030" +
                            "\uffb1\055\111\056\uffb1\001\002\000\044\017\103\021\064" +
                            "\032\045\034\040\053\042\057\104\060\055\061\046\062" +
                            "\043\064\035\065\070\066\034\067\100\070\050\071\102" +
                            "\072\101\073\052\001\002\000\024\020\uffaf\022\uffaf\023" +
                            "\uffaf\024\uffaf\026\uffaf\030\uffaf\054\113\055\uffaf\056\uffaf" +
                            "\001\002\000\044\017\103\021\064\032\045\034\040\053" +
                            "\042\057\104\060\055\061\046\062\043\064\035\065\070" +
                            "\066\034\067\100\070\050\071\102\072\101\073\052\001" +
                            "\002\000\032\020\uffad\022\uffad\023\uffad\024\uffad\026\uffad" +
                            "\030\uffad\047\115\050\116\051\117\054\uffad\055\uffad\056" +
                            "\uffad\001\002\000\044\017\103\021\064\032\045\034\040" +
                            "\053\042\057\104\060\055\061\046\062\043\064\035\065" +
                            "\070\066\034\067\100\070\050\071\102\072\101\073\052" +
                            "\001\002\000\044\017\103\021\064\032\045\034\040\053" +
                            "\042\057\104\060\055\061\046\062\043\064\035\065\070" +
                            "\066\034\067\100\070\050\071\102\072\101\073\052\001" +
                            "\002\000\044\017\103\021\064\032\045\034\040\053\042" +
                            "\057\104\060\055\061\046\062\043\064\035\065\070\066" +
                            "\034\067\100\070\050\071\102\072\101\073\052\001\002" +
                            "\000\042\020\uffaa\022\uffaa\023\uffaa\024\uffaa\026\uffaa\030" +
                            "\uffaa\043\123\044\121\045\124\046\122\047\uffaa\050\uffaa" +
                            "\051\uffaa\054\uffaa\055\uffaa\056\uffaa\001\002\000\044\017" +
                            "\103\021\064\032\045\034\040\053\042\057\104\060\055" +
                            "\061\046\062\043\064\035\065\070\066\034\067\100\070" +
                            "\050\071\102\072\101\073\052\001\002\000\044\017\103" +
                            "\021\064\032\045\034\040\053\042\057\104\060\055\061" +
                            "\046\062\043\064\035\065\070\066\034\067\100\070\050" +
                            "\071\102\072\101\073\052\001\002\000\044\017\103\021" +
                            "\064\032\045\034\040\053\042\057\104\060\055\061\046" +
                            "\062\043\064\035\065\070\066\034\067\100\070\050\071" +
                            "\102\072\101\073\052\001\002\000\044\017\103\021\064" +
                            "\032\045\034\040\053\042\057\104\060\055\061\046\062" +
                            "\043\064\035\065\070\066\034\067\100\070\050\071\102" +
                            "\072\101\073\052\001\002\000\046\020\uffa6\022\uffa6\023" +
                            "\uffa6\024\uffa6\026\uffa6\030\uffa6\032\126\034\127\043\uffa6" +
                            "\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\054" +
                            "\uffa6\055\uffa6\056\uffa6\001\002\000\044\017\103\021\064" +
                            "\032\045\034\040\053\042\057\104\060\055\061\046\062" +
                            "\043\064\035\065\070\066\034\067\100\070\050\071\102" +
                            "\072\101\073\052\001\002\000\044\017\103\021\064\032" +
                            "\045\034\040\053\042\057\104\060\055\061\046\062\043" +
                            "\064\035\065\070\066\034\067\100\070\050\071\102\072" +
                            "\101\073\052\001\002\000\054\020\uffa1\022\uffa1\023\uffa1" +
                            "\024\uffa1\026\uffa1\030\uffa1\032\uffa1\034\uffa1\036\132\040" +
                            "\133\042\131\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1" +
                            "\050\uffa1\051\uffa1\054\uffa1\055\uffa1\056\uffa1\001\002\000" +
                            "\044\017\103\021\064\032\045\034\040\053\042\057\104" +
                            "\060\055\061\046\062\043\064\035\065\070\066\034\067" +
                            "\100\070\050\071\102\072\101\073\052\001\002\000\044" +
                            "\017\103\021\064\032\045\034\040\053\042\057\104\060" +
                            "\055\061\046\062\043\064\035\065\070\066\034\067\100" +
                            "\070\050\071\102\072\101\073\052\001\002\000\044\017" +
                            "\103\021\064\032\045\034\040\053\042\057\104\060\055" +
                            "\061\046\062\043\064\035\065\070\066\034\067\100\070" +
                            "\050\071\102\072\101\073\052\001\002\000\054\020\uff9e" +
                            "\022\uff9e\023\uff9e\024\uff9e\026\uff9e\030\uff9e\032\uff9e\034" +
                            "\uff9e\036\uff9e\040\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e" +
                            "\046\uff9e\047\uff9e\050\uff9e\051\uff9e\054\uff9e\055\uff9e\056" +
                            "\uff9e\001\002\000\054\020\uff9f\022\uff9f\023\uff9f\024\uff9f" +
                            "\026\uff9f\030\uff9f\032\uff9f\034\uff9f\036\uff9f\040\uff9f\042" +
                            "\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f" +
                            "\051\uff9f\054\uff9f\055\uff9f\056\uff9f\001\002\000\054\020" +
                            "\uff9d\022\uff9d\023\uff9d\024\uff9d\026\uff9d\030\uff9d\032\uff9d" +
                            "\034\uff9d\036\uff9d\040\uff9d\042\uff9d\043\uff9d\044\uff9d\045" +
                            "\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\054\uff9d\055\uff9d" +
                            "\056\uff9d\001\002\000\054\020\uffa2\022\uffa2\023\uffa2\024" +
                            "\uffa2\026\uffa2\030\uffa2\032\uffa2\034\uffa2\036\132\040\133" +
                            "\042\131\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050" +
                            "\uffa2\051\uffa2\054\uffa2\055\uffa2\056\uffa2\001\002\000\046" +
                            "\020\uffa4\022\uffa4\023\uffa4\024\uffa4\026\uffa4\030\uffa4\032" +
                            "\126\034\127\043\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4" +
                            "\050\uffa4\051\uffa4\054\uffa4\055\uffa4\056\uffa4\001\002\000" +
                            "\046\020\uffa7\022\uffa7\023\uffa7\024\uffa7\026\uffa7\030\uffa7" +
                            "\032\126\034\127\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047" +
                            "\uffa7\050\uffa7\051\uffa7\054\uffa7\055\uffa7\056\uffa7\001\002" +
                            "\000\046\020\uffa5\022\uffa5\023\uffa5\024\uffa5\026\uffa5\030" +
                            "\uffa5\032\126\034\127\043\uffa5\044\uffa5\045\uffa5\046\uffa5" +
                            "\047\uffa5\050\uffa5\051\uffa5\054\uffa5\055\uffa5\056\uffa5\001" +
                            "\002\000\042\020\uffab\022\uffab\023\uffab\024\uffab\026\uffab" +
                            "\030\uffab\043\123\044\121\045\124\046\122\047\uffab\050" +
                            "\uffab\051\uffab\054\uffab\055\uffab\056\uffab\001\002\000\042" +
                            "\020\uffa9\022\uffa9\023\uffa9\024\uffa9\026\uffa9\030\uffa9\043" +
                            "\123\044\121\045\124\046\122\047\uffa9\050\uffa9\051\uffa9" +
                            "\054\uffa9\055\uffa9\056\uffa9\001\002\000\006\024\uff71\030" +
                            "\160\001\002\000\010\024\uff73\030\uff73\056\uff73\001\002" +
                            "\000\004\024\157\001\002\000\004\052\155\001\002\000" +
                            "\006\024\uff6e\030\uff6e\001\002\000\006\024\uff6f\030\uff6f" +
                            "\001\002\000\006\060\023\062\017\001\002\000\010\024" +
                            "\uffe7\030\uffe7\056\uffe7\001\002\000\046\017\103\021\064" +
                            "\023\072\032\045\034\040\053\042\057\104\060\055\061" +
                            "\046\062\043\064\035\065\070\066\034\067\100\070\050" +
                            "\071\102\072\101\073\052\001\002\000\010\024\uffeb\030" +
                            "\uffeb\056\uffeb\001\002\000\010\024\uff72\030\uff72\056\uff72" +
                            "\001\002\000\010\013\153\060\023\062\017\001\002\000" +
                            "\004\024\uff70\001\002\000\062\017\uff77\020\uff77\021\uff77" +
                            "\022\uff77\023\uff77\024\uff77\026\uff77\027\uff77\030\uff77\032" +
                            "\uff77\034\uff77\036\uff77\040\uff77\042\uff77\043\uff77\044\uff77" +
                            "\045\uff77\046\uff77\047\uff77\050\uff77\051\uff77\054\uff77\055" +
                            "\uff77\056\uff77\001\002\000\006\022\166\030\165\001\002" +
                            "\000\006\022\uff75\030\uff75\001\002\000\044\017\103\021" +
                            "\064\032\045\034\040\053\042\057\104\060\055\061\046" +
                            "\062\043\064\035\065\070\066\034\067\100\070\050\071" +
                            "\102\072\101\073\052\001\002\000\062\017\uff76\020\uff76" +
                            "\021\uff76\022\uff76\023\uff76\024\uff76\026\uff76\027\uff76\030" +
                            "\uff76\032\uff76\034\uff76\036\uff76\040\uff76\042\uff76\043\uff76" +
                            "\044\uff76\045\uff76\046\uff76\047\uff76\050\uff76\051\uff76\054" +
                            "\uff76\055\uff76\056\uff76\001\002\000\006\022\uff74\030\uff74" +
                            "\001\002\000\046\017\103\020\174\021\064\032\045\034" +
                            "\040\053\042\057\104\060\055\061\046\062\043\064\035" +
                            "\065\070\066\034\067\100\070\050\071\102\072\101\073" +
                            "\052\001\002\000\062\017\uff86\020\uff86\021\uff86\022\uff86" +
                            "\023\uff86\024\uff86\026\uff86\027\uff86\030\uff86\032\uff86\034" +
                            "\uff86\036\uff86\040\uff86\042\uff86\043\uff86\044\uff86\045\uff86" +
                            "\046\uff86\047\uff86\050\uff86\051\uff86\054\uff86\055\uff86\056" +
                            "\uff86\001\002\000\006\020\176\030\175\001\002\000\006" +
                            "\020\uff67\030\uff67\001\002\000\066\017\uff69\020\uff69\021" +
                            "\uff69\022\uff69\023\uff69\024\uff69\026\uff69\027\uff69\030\uff69" +
                            "\032\uff69\034\uff69\036\uff69\040\uff69\042\uff69\043\uff69\044" +
                            "\uff69\045\uff69\046\uff69\047\uff69\050\uff69\051\uff69\054\uff69" +
                            "\055\uff69\056\uff69\057\uff69\060\uff69\001\002\000\044\017" +
                            "\103\021\064\032\045\034\040\053\042\057\104\060\055" +
                            "\061\046\062\043\064\035\065\070\066\034\067\100\070" +
                            "\050\071\102\072\101\073\052\001\002\000\066\017\uff68" +
                            "\020\uff68\021\uff68\022\uff68\023\uff68\024\uff68\026\uff68\027" +
                            "\uff68\030\uff68\032\uff68\034\uff68\036\uff68\040\uff68\042\uff68" +
                            "\043\uff68\044\uff68\045\uff68\046\uff68\047\uff68\050\uff68\051" +
                            "\uff68\054\uff68\055\uff68\056\uff68\057\uff68\060\uff68\001\002" +
                            "\000\006\020\uff66\030\uff66\001\002\000\066\017\uff84\020" +
                            "\uff84\021\uff84\022\uff84\023\uff84\024\uff84\026\uff84\027\uff84" +
                            "\030\uff84\032\uff84\034\uff84\036\uff84\040\uff84\042\uff84\043" +
                            "\uff84\044\uff84\045\uff84\046\uff84\047\uff84\050\uff84\051\uff84" +
                            "\054\uff84\055\uff84\056\uff84\057\uff84\060\uff84\001\002\000" +
                            "\004\057\205\001\002\000\044\017\103\021\064\032\045" +
                            "\034\040\053\042\057\104\060\055\061\046\062\043\064" +
                            "\035\065\070\066\034\067\100\070\050\071\102\072\101" +
                            "\073\052\001\002\000\004\022\204\001\002\000\076\017" +
                            "\uff88\020\uff88\021\uff88\022\uff88\023\uff88\024\uff88\026\uff88" +
                            "\027\uff88\030\uff88\031\uff88\032\uff88\033\uff88\034\uff88\035" +
                            "\uff88\036\uff88\037\uff88\040\uff88\041\uff88\042\uff88\043\uff88" +
                            "\044\uff88\045\uff88\046\uff88\047\uff88\050\uff88\051\uff88\052" +
                            "\uff88\054\uff88\055\uff88\056\uff88\001\002\000\076\017\uff87" +
                            "\020\uff87\021\uff87\022\uff87\023\uff87\024\uff87\026\uff87\027" +
                            "\uff87\030\uff87\031\uff87\032\uff87\033\uff87\034\uff87\035\uff87" +
                            "\036\uff87\037\uff87\040\uff87\041\uff87\042\uff87\043\uff87\044" +
                            "\uff87\045\uff87\046\uff87\047\uff87\050\uff87\051\uff87\052\uff87" +
                            "\054\uff87\055\uff87\056\uff87\001\002\000\054\020\uff9b\022" +
                            "\uff9b\023\uff9b\024\uff9b\026\uff9b\030\uff9b\032\uff9b\034\uff9b" +
                            "\036\uff9b\040\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046" +
                            "\uff9b\047\uff9b\050\uff9b\051\uff9b\054\uff9b\055\uff9b\056\uff9b" +
                            "\001\002\000\006\060\212\062\213\001\002\000\066\017" +
                            "\uff85\020\uff85\021\uff85\022\uff85\023\uff85\024\uff85\026\uff85" +
                            "\027\uff85\030\uff85\032\uff85\034\uff85\036\uff85\040\uff85\042" +
                            "\uff85\043\uff85\044\uff85\045\uff85\046\uff85\047\uff85\050\uff85" +
                            "\051\uff85\054\uff85\055\uff85\056\uff85\057\uff85\060\uff85\001" +
                            "\002\000\004\046\222\001\002\000\010\044\217\046\uff6b" +
                            "\057\uff6b\001\002\000\010\044\214\046\uff6d\057\uff6d\001" +
                            "\002\000\006\060\212\062\213\001\002\000\004\046\216" +
                            "\001\002\000\006\046\uff6c\057\uff6c\001\002\000\006\060" +
                            "\212\062\213\001\002\000\004\046\221\001\002\000\010" +
                            "\046\uff6a\057\uff6a\060\uff6a\001\002\000\004\017\170\001" +
                            "\002\000\066\017\uff83\020\uff83\021\uff83\022\uff83\023\uff83" +
                            "\024\uff83\026\uff83\027\uff83\030\uff83\032\uff83\034\uff83\036" +
                            "\uff83\040\uff83\042\uff83\043\uff83\044\uff83\045\uff83\046\uff83" +
                            "\047\uff83\050\uff83\051\uff83\054\uff83\055\uff83\056\uff83\057" +
                            "\uff83\060\uff83\001\002\000\054\020\uff99\022\uff99\023\uff99" +
                            "\024\uff99\026\uff99\030\uff99\032\uff99\034\uff99\036\uff99\040" +
                            "\uff99\042\uff99\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99" +
                            "\050\uff99\051\uff99\054\uff99\055\uff99\056\uff99\001\002\000" +
                            "\054\020\uff9a\022\uff9a\023\uff9a\024\uff9a\026\uff9a\030\uff9a" +
                            "\032\uff9a\034\uff9a\036\uff9a\040\uff9a\042\uff9a\043\uff9a\044" +
                            "\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\054\uff9a" +
                            "\055\uff9a\056\uff9a\001\002\000\004\023\230\001\002\000" +
                            "\004\023\230\001\002\000\014\013\153\015\241\024\uffdb" +
                            "\060\023\062\017\001\002\000\014\002\uffdf\013\uffdf\014" +
                            "\uffdf\060\uffdf\062\uffdf\001\002\000\014\013\153\015\241" +
                            "\024\uffdb\060\023\062\017\001\002\000\014\013\uffd9\015" +
                            "\uffd9\024\uffd9\060\uffd9\062\uffd9\001\002\000\062\004\ufff0" +
                            "\006\ufff0\007\ufff0\010\ufff0\012\ufff0\013\ufff0\015\ufff0\016" +
                            "\ufff0\017\ufff0\021\ufff0\023\ufff0\024\ufff0\057\ufff0\060\ufff0" +
                            "\061\ufff0\062\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0\070" +
                            "\ufff0\071\ufff0\072\ufff0\073\ufff0\001\002\000\014\013\uffda" +
                            "\015\uffda\024\uffda\060\uffda\062\uffda\001\002\000\004\056" +
                            "\375\001\002\000\004\024\374\001\002\000\014\013\uffd8" +
                            "\015\uffd8\024\uffd8\060\uffd8\062\uffd8\001\002\000\004\017" +
                            "\243\001\002\000\004\023\253\001\002\000\010\020\246" +
                            "\060\212\062\213\001\002\000\006\020\250\030\247\001" +
                            "\002\000\006\020\uffe1\030\uffe1\001\002\000\004\023\uffe3" +
                            "\001\002\000\006\060\212\062\213\001\002\000\004\023" +
                            "\uffe2\001\002\000\006\020\uffe0\030\uffe0\001\002\000\014" +
                            "\013\uffd7\015\uffd7\024\uffd7\060\uffd7\062\uffd7\001\002\000" +
                            "\056\004\262\006\274\007\254\010\300\012\266\013\153" +
                            "\017\103\021\064\023\253\024\uffd5\057\104\060\271\061" +
                            "\046\062\017\064\035\065\070\066\034\067\100\070\050" +
                            "\071\102\072\101\073\052\001\002\000\006\060\212\062" +
                            "\213\001\002\000\004\024\367\001\002\000\024\017\uff93" +
                            "\021\uff97\027\uff97\031\uffc2\033\uffc2\035\uffc2\037\uffc2\041" +
                            "\uffc2\052\uffc2\001\002\000\060\004\uffcf\006\uffcf\007\uffcf" +
                            "\010\uffcf\012\uffcf\013\uffcf\016\uffcf\017\uffcf\021\uffcf\023" +
                            "\uffcf\024\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\064\uffcf" +
                            "\065\uffcf\066\uffcf\067\uffcf\070\uffcf\071\uffcf\072\uffcf\073" +
                            "\uffcf\001\002\000\012\017\uff91\021\uff95\027\uff95\056\366" +
                            "\001\002\000\016\031\347\033\344\035\350\037\345\041" +
                            "\351\052\346\001\002\000\044\017\103\021\064\032\045" +
                            "\034\040\053\042\057\104\060\055\061\046\062\043\064" +
                            "\035\065\070\066\034\067\100\070\050\071\102\072\101" +
                            "\073\052\001\002\000\060\004\uffd3\006\uffd3\007\uffd3\010" +
                            "\uffd3\012\uffd3\013\uffd3\016\uffd3\017\uffd3\021\uffd3\023\uffd3" +
                            "\024\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3\064\uffd3\065" +
                            "\uffd3\066\uffd3\067\uffd3\070\uffd3\071\uffd3\072\uffd3\073\uffd3" +
                            "\001\002\000\060\004\uffd2\006\uffd2\007\uffd2\010\uffd2\012" +
                            "\uffd2\013\uffd2\016\uffd2\017\uffd2\021\uffd2\023\uffd2\024\uffd2" +
                            "\057\uffd2\060\uffd2\061\uffd2\062\uffd2\064\uffd2\065\uffd2\066" +
                            "\uffd2\067\uffd2\070\uffd2\071\uffd2\072\uffd2\073\uffd2\001\002" +
                            "\000\024\017\uff8c\021\uff8c\027\uff8c\031\uffc3\033\uffc3\035" +
                            "\uffc3\037\uffc3\041\uffc3\052\uffc3\001\002\000\046\017\103" +
                            "\021\064\032\045\034\040\053\042\056\334\057\104\060" +
                            "\055\061\046\062\043\064\035\065\070\066\034\067\100" +
                            "\070\050\071\102\072\101\073\052\001\002\000\060\004" +
                            "\uffca\006\uffca\007\uffca\010\uffca\012\uffca\013\uffca\016\uffca" +
                            "\017\uffca\021\uffca\023\uffca\024\uffca\057\uffca\060\uffca\061" +
                            "\uffca\062\uffca\064\uffca\065\uffca\066\uffca\067\uffca\070\uffca" +
                            "\071\uffca\072\uffca\073\uffca\001\002\000\006\021\202\027" +
                            "\201\001\002\000\014\017\170\021\uff80\027\uff80\044\217" +
                            "\057\uff6b\001\002\000\060\004\uffd0\006\uffd0\007\uffd0\010" +
                            "\uffd0\012\uffd0\013\uffd0\016\uffd0\017\uffd0\021\uffd0\023\uffd0" +
                            "\024\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\064\uffd0\065" +
                            "\uffd0\066\uffd0\067\uffd0\070\uffd0\071\uffd0\072\uffd0\073\uffd0" +
                            "\001\002\000\060\004\uffd1\006\uffd1\007\uffd1\010\uffd1\012" +
                            "\uffd1\013\uffd1\016\uffd1\017\uffd1\021\uffd1\023\uffd1\024\uffd1" +
                            "\057\uffd1\060\uffd1\061\uffd1\062\uffd1\064\uffd1\065\uffd1\066" +
                            "\uffd1\067\uffd1\070\uffd1\071\uffd1\072\uffd1\073\uffd1\001\002" +
                            "\000\044\017\103\021\064\032\045\034\040\053\042\057" +
                            "\104\060\055\061\046\062\043\064\035\065\070\066\034" +
                            "\067\100\070\050\071\102\072\101\073\052\001\002\000" +
                            "\060\004\uffd4\006\uffd4\007\uffd4\010\uffd4\012\uffd4\013\uffd4" +
                            "\016\uffd4\017\uffd4\021\uffd4\023\uffd4\024\uffd4\057\uffd4\060" +
                            "\uffd4\061\uffd4\062\uffd4\064\uffd4\065\uffd4\066\uffd4\067\uffd4" +
                            "\070\uffd4\071\uffd4\072\uffd4\073\uffd4\001\002\000\060\004" +
                            "\uffcd\006\uffcd\007\uffcd\010\uffcd\012\uffcd\013\uffcd\016\uffcd" +
                            "\017\uffcd\021\uffcd\023\uffcd\024\uffcd\057\uffcd\060\uffcd\061" +
                            "\uffcd\062\uffcd\064\uffcd\065\uffcd\066\uffcd\067\uffcd\070\uffcd" +
                            "\071\uffcd\072\uffcd\073\uffcd\001\002\000\006\052\155\056" +
                            "\312\001\002\000\044\017\103\021\064\032\045\034\040" +
                            "\053\042\057\104\060\055\061\046\062\043\064\035\065" +
                            "\070\066\034\067\100\070\050\071\102\072\101\073\052" +
                            "\001\002\000\024\017\uff92\021\uff96\027\uff96\031\uffc1\033" +
                            "\uffc1\035\uffc1\037\uffc1\041\uffc1\052\uffc1\001\002\000\012" +
                            "\017\uff89\021\uff89\027\uff89\057\307\001\002\000\056\004" +
                            "\262\006\274\007\254\010\300\012\266\013\153\017\103" +
                            "\021\064\023\253\024\uffd5\057\104\060\271\061\046\062" +
                            "\017\064\035\065\070\066\034\067\100\070\050\071\102" +
                            "\072\101\073\052\001\002\000\060\004\uffce\006\uffce\007" +
                            "\uffce\010\uffce\012\uffce\013\uffce\016\uffce\017\uffce\021\uffce" +
                            "\023\uffce\024\uffce\057\uffce\060\uffce\061\uffce\062\uffce\064" +
                            "\uffce\065\uffce\066\uffce\067\uffce\070\uffce\071\uffce\072\uffce" +
                            "\073\uffce\001\002\000\060\004\uffcc\006\uffcc\007\uffcc\010" +
                            "\uffcc\012\uffcc\013\uffcc\016\uffcc\017\uffcc\021\uffcc\023\uffcc" +
                            "\024\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\064\uffcc\065" +
                            "\uffcc\066\uffcc\067\uffcc\070\uffcc\071\uffcc\072\uffcc\073\uffcc" +
                            "\001\002\000\004\024\uffd6\001\002\000\010\024\uffea\030" +
                            "\uffea\056\uffea\001\002\000\004\023\253\001\002\000\060" +
                            "\004\uffb4\006\uffb4\007\uffb4\010\uffb4\012\uffb4\013\uffb4\016" +
                            "\uffb4\017\uffb4\021\uffb4\023\uffb4\024\uffb4\057\uffb4\060\uffb4" +
                            "\061\uffb4\062\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\070" +
                            "\uffb4\071\uffb4\072\uffb4\073\uffb4\001\002\000\066\002\uffee" +
                            "\004\uffee\006\uffee\007\uffee\010\uffee\012\uffee\013\uffee\014" +
                            "\uffee\015\uffee\016\uffee\017\uffee\021\uffee\023\uffee\024\uffee" +
                            "\057\uffee\060\uffee\061\uffee\062\uffee\064\uffee\065\uffee\066" +
                            "\uffee\067\uffee\070\uffee\071\uffee\072\uffee\073\uffee\001\002" +
                            "\000\004\023\314\001\002\000\022\016\317\064\035\065" +
                            "\070\066\034\070\050\071\102\072\101\073\052\001\002" +
                            "\000\004\025\331\001\002\000\024\016\324\024\322\064" +
                            "\035\065\070\066\034\070\050\071\102\072\101\073\052" +
                            "\001\002\000\004\025\320\001\002\000\054\004\262\006" +
                            "\274\007\254\010\300\012\266\013\153\017\103\021\064" +
                            "\023\253\057\104\060\271\061\046\062\017\064\035\065" +
                            "\070\066\034\067\100\070\050\071\102\072\101\073\052" +
                            "\001\002\000\024\016\uffb7\024\uffb7\064\uffb7\065\uffb7\066" +
                            "\uffb7\070\uffb7\071\uffb7\072\uffb7\073\uffb7\001\002\000\060" +
                            "\004\uffb9\006\uffb9\007\uffb9\010\uffb9\012\uffb9\013\uffb9\016" +
                            "\uffb9\017\uffb9\021\uffb9\023\uffb9\024\uffb9\057\uffb9\060\uffb9" +
                            "\061\uffb9\062\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070" +
                            "\uffb9\071\uffb9\072\uffb9\073\uffb9\001\002\000\004\025\327" +
                            "\001\002\000\004\025\325\001\002\000\054\004\262\006" +
                            "\274\007\254\010\300\012\266\013\153\017\103\021\064" +
                            "\023\253\057\104\060\271\061\046\062\017\064\035\065" +
                            "\070\066\034\067\100\070\050\071\102\072\101\073\052" +
                            "\001\002\000\024\016\uffb5\024\uffb5\064\uffb5\065\uffb5\066" +
                            "\uffb5\070\uffb5\071\uffb5\072\uffb5\073\uffb5\001\002\000\054" +
                            "\004\262\006\274\007\254\010\300\012\266\013\153\017" +
                            "\103\021\064\023\253\057\104\060\271\061\046\062\017" +
                            "\064\035\065\070\066\034\067\100\070\050\071\102\072" +
                            "\101\073\052\001\002\000\024\016\uffb6\024\uffb6\064\uffb6" +
                            "\065\uffb6\066\uffb6\070\uffb6\071\uffb6\072\uffb6\073\uffb6\001" +
                            "\002\000\054\004\262\006\274\007\254\010\300\012\266" +
                            "\013\153\017\103\021\064\023\253\057\104\060\271\061" +
                            "\046\062\017\064\035\065\070\066\034\067\100\070\050" +
                            "\071\102\072\101\073\052\001\002\000\024\016\uffb8\024" +
                            "\uffb8\064\uffb8\065\uffb8\066\uffb8\070\uffb8\071\uffb8\072\uffb8" +
                            "\073\uffb8\001\002\000\004\056\335\001\002\000\060\004" +
                            "\uffbf\006\uffbf\007\uffbf\010\uffbf\012\uffbf\013\uffbf\016\uffbf" +
                            "\017\uffbf\021\uffbf\023\uffbf\024\uffbf\057\uffbf\060\uffbf\061" +
                            "\uffbf\062\uffbf\064\uffbf\065\uffbf\066\uffbf\067\uffbf\070\uffbf" +
                            "\071\uffbf\072\uffbf\073\uffbf\001\002\000\060\004\uffbe\006" +
                            "\uffbe\007\uffbe\010\uffbe\012\uffbe\013\uffbe\016\uffbe\017\uffbe" +
                            "\021\uffbe\023\uffbe\024\uffbe\057\uffbe\060\uffbe\061\uffbe\062" +
                            "\uffbe\064\uffbe\065\uffbe\066\uffbe\067\uffbe\070\uffbe\071\uffbe" +
                            "\072\uffbe\073\uffbe\001\002\000\004\023\253\001\002\000" +
                            "\062\004\uffba\005\340\006\uffba\007\uffba\010\uffba\012\uffba" +
                            "\013\uffba\016\uffba\017\uffba\021\uffba\023\uffba\024\uffba\057" +
                            "\uffba\060\uffba\061\uffba\062\uffba\064\uffba\065\uffba\066\uffba" +
                            "\067\uffba\070\uffba\071\uffba\072\uffba\073\uffba\001\002\000" +
                            "\006\004\262\023\253\001\002\000\060\004\uffbd\006\uffbd" +
                            "\007\uffbd\010\uffbd\012\uffbd\013\uffbd\016\uffbd\017\uffbd\021" +
                            "\uffbd\023\uffbd\024\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd" +
                            "\064\uffbd\065\uffbd\066\uffbd\067\uffbd\070\uffbd\071\uffbd\072" +
                            "\uffbd\073\uffbd\001\002\000\060\004\uffbc\006\uffbc\007\uffbc" +
                            "\010\uffbc\012\uffbc\013\uffbc\016\uffbc\017\uffbc\021\uffbc\023" +
                            "\uffbc\024\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\064\uffbc" +
                            "\065\uffbc\066\uffbc\067\uffbc\070\uffbc\071\uffbc\072\uffbc\073" +
                            "\uffbc\001\002\000\060\004\uffbb\006\uffbb\007\uffbb\010\uffbb" +
                            "\012\uffbb\013\uffbb\016\uffbb\017\uffbb\021\uffbb\023\uffbb\024" +
                            "\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\064\uffbb\065\uffbb" +
                            "\066\uffbb\067\uffbb\070\uffbb\071\uffbb\072\uffbb\073\uffbb\001" +
                            "\002\000\044\017\103\021\064\032\045\034\040\053\042" +
                            "\057\104\060\055\061\046\062\043\064\035\065\070\066" +
                            "\034\067\100\070\050\071\102\072\101\073\052\001\002" +
                            "\000\044\017\103\021\064\032\045\034\040\053\042\057" +
                            "\104\060\055\061\046\062\043\064\035\065\070\066\034" +
                            "\067\100\070\050\071\102\072\101\073\052\001\002\000" +
                            "\044\017\103\021\064\032\045\034\040\053\042\057\104" +
                            "\060\055\061\046\062\043\064\035\065\070\066\034\067" +
                            "\100\070\050\071\102\072\101\073\052\001\002\000\044" +
                            "\017\103\021\064\032\045\034\040\053\042\057\104\060" +
                            "\055\061\046\062\043\064\035\065\070\066\034\067\100" +
                            "\070\050\071\102\072\101\073\052\001\002\000\044\017" +
                            "\103\021\064\032\045\034\040\053\042\057\104\060\055" +
                            "\061\046\062\043\064\035\065\070\066\034\067\100\070" +
                            "\050\071\102\072\101\073\052\001\002\000\044\017\103" +
                            "\021\064\032\045\034\040\053\042\057\104\060\055\061" +
                            "\046\062\043\064\035\065\070\066\034\067\100\070\050" +
                            "\071\102\072\101\073\052\001\002\000\004\056\353\001" +
                            "\002\000\060\004\uffc4\006\uffc4\007\uffc4\010\uffc4\012\uffc4" +
                            "\013\uffc4\016\uffc4\017\uffc4\021\uffc4\023\uffc4\024\uffc4\057" +
                            "\uffc4\060\uffc4\061\uffc4\062\uffc4\064\uffc4\065\uffc4\066\uffc4" +
                            "\067\uffc4\070\uffc4\071\uffc4\072\uffc4\073\uffc4\001\002\000" +
                            "\004\056\355\001\002\000\060\004\uffc6\006\uffc6\007\uffc6" +
                            "\010\uffc6\012\uffc6\013\uffc6\016\uffc6\017\uffc6\021\uffc6\023" +
                            "\uffc6\024\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6\064\uffc6" +
                            "\065\uffc6\066\uffc6\067\uffc6\070\uffc6\071\uffc6\072\uffc6\073" +
                            "\uffc6\001\002\000\004\056\357\001\002\000\060\004\uffc8" +
                            "\006\uffc8\007\uffc8\010\uffc8\012\uffc8\013\uffc8\016\uffc8\017" +
                            "\uffc8\021\uffc8\023\uffc8\024\uffc8\057\uffc8\060\uffc8\061\uffc8" +
                            "\062\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8\070\uffc8\071" +
                            "\uffc8\072\uffc8\073\uffc8\001\002\000\004\056\361\001\002" +
                            "\000\060\004\uffc9\006\uffc9\007\uffc9\010\uffc9\012\uffc9\013" +
                            "\uffc9\016\uffc9\017\uffc9\021\uffc9\023\uffc9\024\uffc9\057\uffc9" +
                            "\060\uffc9\061\uffc9\062\uffc9\064\uffc9\065\uffc9\066\uffc9\067" +
                            "\uffc9\070\uffc9\071\uffc9\072\uffc9\073\uffc9\001\002\000\004" +
                            "\056\363\001\002\000\060\004\uffc5\006\uffc5\007\uffc5\010" +
                            "\uffc5\012\uffc5\013\uffc5\016\uffc5\017\uffc5\021\uffc5\023\uffc5" +
                            "\024\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\064\uffc5\065" +
                            "\uffc5\066\uffc5\067\uffc5\070\uffc5\071\uffc5\072\uffc5\073\uffc5" +
                            "\001\002\000\004\056\365\001\002\000\060\004\uffc7\006" +
                            "\uffc7\007\uffc7\010\uffc7\012\uffc7\013\uffc7\016\uffc7\017\uffc7" +
                            "\021\uffc7\023\uffc7\024\uffc7\057\uffc7\060\uffc7\061\uffc7\062" +
                            "\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7\070\uffc7\071\uffc7" +
                            "\072\uffc7\073\uffc7\001\002\000\060\004\uffc0\006\uffc0\007" +
                            "\uffc0\010\uffc0\012\uffc0\013\uffc0\016\uffc0\017\uffc0\021\uffc0" +
                            "\023\uffc0\024\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0\064" +
                            "\uffc0\065\uffc0\066\uffc0\067\uffc0\070\uffc0\071\uffc0\072\uffc0" +
                            "\073\uffc0\001\002\000\070\002\uffcb\004\uffcb\005\uffcb\006" +
                            "\uffcb\007\uffcb\010\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb" +
                            "\016\uffcb\017\uffcb\021\uffcb\023\uffcb\024\uffcb\057\uffcb\060" +
                            "\uffcb\061\uffcb\062\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb" +
                            "\070\uffcb\071\uffcb\072\uffcb\073\uffcb\001\002\000\004\011" +
                            "\371\001\002\000\044\017\103\021\064\032\045\034\040" +
                            "\053\042\057\104\060\055\061\046\062\043\064\035\065" +
                            "\070\066\034\067\100\070\050\071\102\072\101\073\052" +
                            "\001\002\000\004\023\253\001\002\000\060\004\uffb3\006" +
                            "\uffb3\007\uffb3\010\uffb3\012\uffb3\013\uffb3\016\uffb3\017\uffb3" +
                            "\021\uffb3\023\uffb3\024\uffb3\057\uffb3\060\uffb3\061\uffb3\062" +
                            "\uffb3\064\uffb3\065\uffb3\066\uffb3\067\uffb3\070\uffb3\071\uffb3" +
                            "\072\uffb3\073\uffb3\001\002\000\014\002\uffdd\013\uffdd\014" +
                            "\uffdd\060\uffdd\062\uffdd\001\002\000\062\004\uffef\006\uffef" +
                            "\007\uffef\010\uffef\012\uffef\013\uffef\015\uffef\016\uffef\017" +
                            "\uffef\021\uffef\023\uffef\024\uffef\057\uffef\060\uffef\061\uffef" +
                            "\062\uffef\064\uffef\065\uffef\066\uffef\067\uffef\070\uffef\071" +
                            "\uffef\072\uffef\073\uffef\001\002\000\004\024\uffdc\001\002" +
                            "\000\014\002\uffde\013\uffde\014\uffde\060\uffde\062\uffde\001" +
                            "\002\000\006\040\ufffb\056\ufffb\001\002\000\006\040\ufff9" +
                            "\056\ufff9\001\002\000\006\040\u0105\056\u0106\001\002\000" +
                            "\006\040\ufffa\056\ufffa\001\002\000\006\040\ufff8\056\ufff8" +
                            "\001\002\000\010\057\u0103\060\u0101\062\u0104\001\002\000" +
                            "\016\002\ufffd\013\ufffd\014\ufffd\060\ufffd\062\ufffd\063\ufffd" +
                            "\001\002\000\006\040\ufffc\056\ufffc\001\002\000\066\002" +
                            "\uffed\004\uffed\006\uffed\007\uffed\010\uffed\012\uffed\013\uffed" +
                            "\014\uffed\015\uffed\016\uffed\017\uffed\021\uffed\023\uffed\024" +
                            "\uffed\057\uffed\060\uffed\061\uffed\062\uffed\064\uffed\065\uffed" +
                            "\066\uffed\067\uffed\070\uffed\071\uffed\072\uffed\073\uffed\001" +
                            "\002\000\006\060\212\062\213\001\002\000\004\046\u010b" +
                            "\001\002\000\010\017\170\057\uff6c\060\uff6c\001\002\000" +
                            "\004\023\253\001\002\000\020\002\uffe4\013\uffe4\014\uffe4" +
                            "\015\uffe4\024\uffe4\060\uffe4\062\uffe4\001\002\000\004\002" +
                            "\ufff7\001\002\000\014\002\ufff1\013\ufff1\014\ufff1\060\ufff1" +
                            "\062\ufff1\001\002\000\016\011\uffec\017\uffec\020\uffec\030" +
                            "\uffec\052\uffec\056\uffec\001\002\000\004\002\000\001\002" +
                            ""});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /**
     * <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[]{
                    "\000\u010f\000\006\002\003\003\004\001\001\000\002\001" +
                            "\001\000\032\004\006\007\013\010\011\011\012\012\015" +
                            "\014\021\015\007\017\014\020\020\023\010\077\017\100" +
                            "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\030\007\u010d\010\011\011" +
                            "\012\012\015\014\021\015\007\017\014\020\020\023\010" +
                            "\077\017\100\005\001\001\000\002\001\001\000\002\001" +
                            "\001\000\004\021\u010b\001\001\000\002\001\001\000\004" +
                            "\101\207\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\004\101\177\001\001\000\006\005\u0101" +
                            "\006\377\001\001\000\002\001\001\000\006\077\027\100" +
                            "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\060\046\076\047\070\050" +
                            "\066\051\064\052\062\053\060\054\057\055\055\056\053" +
                            "\057\052\060\061\061\050\062\056\063\074\064\040\065" +
                            "\072\066\043\067\046\070\073\071\036\072\065\074\035" +
                            "\077\075\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\034\056\224\057\052" +
                            "\060\061\061\050\062\056\064\040\065\072\066\043\067" +
                            "\046\070\073\071\036\072\065\077\075\001\001\000\002" +
                            "\001\001\000\034\056\223\057\052\060\061\061\050\062" +
                            "\056\064\040\065\072\066\043\067\046\070\073\071\036" +
                            "\072\065\077\075\001\001\000\004\101\207\001\001\000" +
                            "\002\001\001\000\034\056\205\057\052\060\061\061\050" +
                            "\062\056\064\040\065\072\066\043\067\046\070\073\071" +
                            "\036\072\065\077\075\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\004\101\177" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\004\101\170\001\001\000\002" +
                            "\001\001\000\056\046\163\047\070\050\066\051\064\052" +
                            "\062\053\060\054\057\055\055\056\053\057\052\060\061" +
                            "\061\050\062\056\064\040\065\072\066\043\067\046\070" +
                            "\073\071\036\072\065\073\162\077\075\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\020\014\151\016\150\017\147" +
                            "\075\146\076\144\077\017\100\005\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\052\047\104\050\066\051\064\052\062" +
                            "\053\060\054\057\055\055\056\053\057\052\060\061\061" +
                            "\050\062\056\064\040\065\072\066\043\067\046\070\073" +
                            "\071\036\072\065\077\075\001\001\000\002\001\001\000" +
                            "\002\001\001\000\050\050\107\051\064\052\062\053\060" +
                            "\054\057\055\055\056\053\057\052\060\061\061\050\062" +
                            "\056\064\040\065\072\066\043\067\046\070\073\071\036" +
                            "\072\065\077\075\001\001\000\002\001\001\000\002\001" +
                            "\001\000\046\051\111\052\062\053\060\054\057\055\055" +
                            "\056\053\057\052\060\061\061\050\062\056\064\040\065" +
                            "\072\066\043\067\046\070\073\071\036\072\065\077\075" +
                            "\001\001\000\002\001\001\000\044\052\113\053\060\054" +
                            "\057\055\055\056\053\057\052\060\061\061\050\062\056" +
                            "\064\040\065\072\066\043\067\046\070\073\071\036\072" +
                            "\065\077\075\001\001\000\002\001\001\000\042\053\143" +
                            "\054\057\055\055\056\053\057\052\060\061\061\050\062" +
                            "\056\064\040\065\072\066\043\067\046\070\073\071\036" +
                            "\072\065\077\075\001\001\000\042\053\142\054\057\055" +
                            "\055\056\053\057\052\060\061\061\050\062\056\064\040" +
                            "\065\072\066\043\067\046\070\073\071\036\072\065\077" +
                            "\075\001\001\000\042\053\117\054\057\055\055\056\053" +
                            "\057\052\060\061\061\050\062\056\064\040\065\072\066" +
                            "\043\067\046\070\073\071\036\072\065\077\075\001\001" +
                            "\000\002\001\001\000\040\054\141\055\055\056\053\057" +
                            "\052\060\061\061\050\062\056\064\040\065\072\066\043" +
                            "\067\046\070\073\071\036\072\065\077\075\001\001\000" +
                            "\040\054\140\055\055\056\053\057\052\060\061\061\050" +
                            "\062\056\064\040\065\072\066\043\067\046\070\073\071" +
                            "\036\072\065\077\075\001\001\000\040\054\137\055\055" +
                            "\056\053\057\052\060\061\061\050\062\056\064\040\065" +
                            "\072\066\043\067\046\070\073\071\036\072\065\077\075" +
                            "\001\001\000\040\054\124\055\055\056\053\057\052\060" +
                            "\061\061\050\062\056\064\040\065\072\066\043\067\046" +
                            "\070\073\071\036\072\065\077\075\001\001\000\002\001" +
                            "\001\000\036\055\136\056\053\057\052\060\061\061\050" +
                            "\062\056\064\040\065\072\066\043\067\046\070\073\071" +
                            "\036\072\065\077\075\001\001\000\036\055\127\056\053" +
                            "\057\052\060\061\061\050\062\056\064\040\065\072\066" +
                            "\043\067\046\070\073\071\036\072\065\077\075\001\001" +
                            "\000\002\001\001\000\034\056\135\057\052\060\061\061" +
                            "\050\062\056\064\040\065\072\066\043\067\046\070\073" +
                            "\071\036\072\065\077\075\001\001\000\034\056\134\057" +
                            "\052\060\061\061\050\062\056\064\040\065\072\066\043" +
                            "\067\046\070\073\071\036\072\065\077\075\001\001\000" +
                            "\034\056\133\057\052\060\061\061\050\062\056\064\040" +
                            "\065\072\066\043\067\046\070\073\071\036\072\065\077" +
                            "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
                            "\014\153\017\147\077\017\100\005\001\001\000\002\001" +
                            "\001\000\060\046\076\047\070\050\066\051\064\052\062" +
                            "\053\060\054\057\055\055\056\053\057\052\060\061\061" +
                            "\050\062\056\063\155\064\040\065\072\066\043\067\046" +
                            "\070\073\071\036\072\065\074\035\077\075\001\001\000" +
                            "\002\001\001\000\002\001\001\000\020\014\151\016\150" +
                            "\017\147\075\160\076\144\077\017\100\005\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\054\046\166\047\070\050\066\051\064\052" +
                            "\062\053\060\054\057\055\055\056\053\057\052\060\061" +
                            "\061\050\062\056\064\040\065\072\066\043\067\046\070" +
                            "\073\071\036\072\065\077\075\001\001\000\002\001\001" +
                            "\000\002\001\001\000\056\046\172\047\070\050\066\051" +
                            "\064\052\062\053\060\054\057\055\055\056\053\057\052" +
                            "\060\061\061\050\062\056\064\040\065\072\066\043\067" +
                            "\046\070\073\071\036\072\065\077\075\102\171\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\054\046\176\047\070\050\066\051\064" +
                            "\052\062\053\060\054\057\055\055\056\053\057\052\060" +
                            "\061\061\050\062\056\064\040\065\072\066\043\067\046" +
                            "\070\073\071\036\072\065\077\075\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\054\046\202\047\070\050\066\051\064\052\062\053" +
                            "\060\054\057\055\055\056\053\057\052\060\061\061\050" +
                            "\062\056\064\040\065\072\066\043\067\046\070\073\071" +
                            "\036\072\065\077\075\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\004\100" +
                            "\210\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\004\100\214\001\001\000" +
                            "\002\001\001\000\002\001\001\000\004\100\217\001\001" +
                            "\000\002\001\001\000\002\001\001\000\004\101\222\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\004\024\376\001\001\000\004\024\230\001\001\000" +
                            "\030\011\233\013\234\014\021\016\235\017\014\020\237" +
                            "\025\236\026\231\027\232\077\017\100\005\001\001\000" +
                            "\002\001\001\000\030\011\233\013\234\014\021\016\235" +
                            "\017\014\020\237\025\375\026\231\027\232\077\017\100" +
                            "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\004\021\241\001\001\000\004\032\251\001\001" +
                            "\000\010\017\244\022\243\100\005\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\006\017\250" +
                            "\100\005\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\076\011\233\013\266\014\021\016\235" +
                            "\017\276\030\254\031\302\032\304\033\274\034\262\035" +
                            "\260\036\263\037\272\040\271\042\256\044\303\045\275" +
                            "\057\267\060\061\061\050\062\056\064\255\065\300\066" +
                            "\257\067\264\070\073\071\036\072\065\077\301\100\005" +
                            "\001\001\000\006\017\367\100\005\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\054\046\335\047\070\050\066\051" +
                            "\064\052\062\053\060\054\057\055\055\056\053\057\052" +
                            "\060\061\061\050\062\056\064\040\065\072\066\043\067" +
                            "\046\070\073\071\036\072\065\077\075\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\054\046" +
                            "\332\047\070\050\066\051\064\052\062\053\060\054\057" +
                            "\055\055\056\053\057\052\060\061\061\050\062\056\064" +
                            "\040\065\072\066\043\067\046\070\073\071\036\072\065" +
                            "\077\075\001\001\000\002\001\001\000\002\001\001\000" +
                            "\004\101\177\001\001\000\002\001\001\000\002\001\001" +
                            "\000\054\046\312\047\070\050\066\051\064\052\062\053" +
                            "\060\054\057\055\055\056\053\057\052\060\061\061\050" +
                            "\062\056\064\040\065\072\066\043\067\046\070\073\071" +
                            "\036\072\065\077\075\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\054\046\307\047\070\050" +
                            "\066\051\064\052\062\053\060\054\057\055\055\056\053" +
                            "\057\052\060\061\061\050\062\056\064\040\065\072\066" +
                            "\043\067\046\070\073\071\036\072\065\077\075\001\001" +
                            "\000\002\001\001\000\002\001\001\000\076\011\233\013" +
                            "\266\014\021\016\235\017\276\030\305\031\302\032\304" +
                            "\033\274\034\262\035\260\036\263\037\272\040\271\042" +
                            "\256\044\303\045\275\057\267\060\061\061\050\062\056" +
                            "\064\255\065\300\066\257\067\264\070\073\071\036\072" +
                            "\065\077\301\100\005\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
                            "\310\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\006\043\315\071\314\001\001\000\002\001" +
                            "\001\000\004\071\322\001\001\000\002\001\001\000\074" +
                            "\011\233\013\266\014\021\016\235\017\276\031\320\032" +
                            "\304\033\274\034\262\035\260\036\263\037\272\040\271" +
                            "\042\256\044\303\045\275\057\267\060\061\061\050\062" +
                            "\056\064\255\065\300\066\257\067\264\070\073\071\036" +
                            "\072\065\077\301\100\005\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\074" +
                            "\011\233\013\266\014\021\016\235\017\276\031\325\032" +
                            "\304\033\274\034\262\035\260\036\263\037\272\040\271" +
                            "\042\256\044\303\045\275\057\267\060\061\061\050\062" +
                            "\056\064\255\065\300\066\257\067\264\070\073\071\036" +
                            "\072\065\077\301\100\005\001\001\000\002\001\001\000" +
                            "\074\011\233\013\266\014\021\016\235\017\276\031\327" +
                            "\032\304\033\274\034\262\035\260\036\263\037\272\040" +
                            "\271\042\256\044\303\045\275\057\267\060\061\061\050" +
                            "\062\056\064\255\065\300\066\257\067\264\070\073\071" +
                            "\036\072\065\077\301\100\005\001\001\000\002\001\001" +
                            "\000\074\011\233\013\266\014\021\016\235\017\276\031" +
                            "\331\032\304\033\274\034\262\035\260\036\263\037\272" +
                            "\040\271\042\256\044\303\045\275\057\267\060\061\061" +
                            "\050\062\056\064\255\065\300\066\257\067\264\070\073" +
                            "\071\036\072\065\077\301\100\005\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\004\032\336\001\001\000\004\041\340\001\001\000" +
                            "\006\032\341\040\342\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\054\046\363\047\070\050" +
                            "\066\051\064\052\062\053\060\054\057\055\055\056\053" +
                            "\057\052\060\061\061\050\062\056\064\040\065\072\066" +
                            "\043\067\046\070\073\071\036\072\065\077\075\001\001" +
                            "\000\054\046\361\047\070\050\066\051\064\052\062\053" +
                            "\060\054\057\055\055\056\053\057\052\060\061\061\050" +
                            "\062\056\064\040\065\072\066\043\067\046\070\073\071" +
                            "\036\072\065\077\075\001\001\000\054\046\357\047\070" +
                            "\050\066\051\064\052\062\053\060\054\057\055\055\056" +
                            "\053\057\052\060\061\061\050\062\056\064\040\065\072" +
                            "\066\043\067\046\070\073\071\036\072\065\077\075\001" +
                            "\001\000\054\046\355\047\070\050\066\051\064\052\062" +
                            "\053\060\054\057\055\055\056\053\057\052\060\061\061" +
                            "\050\062\056\064\040\065\072\066\043\067\046\070\073" +
                            "\071\036\072\065\077\075\001\001\000\054\046\353\047" +
                            "\070\050\066\051\064\052\062\053\060\054\057\055\055" +
                            "\056\053\057\052\060\061\061\050\062\056\064\040\065" +
                            "\072\066\043\067\046\070\073\071\036\072\065\077\075" +
                            "\001\001\000\054\046\351\047\070\050\066\051\064\052" +
                            "\062\053\060\054\057\055\055\056\053\057\052\060\061" +
                            "\061\050\062\056\064\040\065\072\066\043\067\046\070" +
                            "\073\071\036\072\065\077\075\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\054\046\371\047\070\050\066\051" +
                            "\064\052\062\053\060\054\057\055\055\056\053\057\052" +
                            "\060\061\061\050\062\056\064\040\065\072\066\043\067" +
                            "\046\070\073\071\036\072\065\077\075\001\001\000\004" +
                            "\032\372\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\004\006\u0106\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\004\100" +
                            "\u0109\001\001\000\002\001\001\000\004\101\222\001\001" +
                            "\000\004\032\u010c\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            ""});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$SyntacticalAnalyser$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$SyntacticalAnalyser$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$SyntacticalAnalyser$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 1;
    }

    /**
     * <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /**
     * <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }


    /**
     * User initialization code.
     */
    public void user_init() throws java.lang.Exception {

    }

    /**
     * Scan to get the next Symbol.
     */
    public java_cup.runtime.Symbol scan()
            throws java.lang.Exception {

        return analyser.next_token();

    }


    private LexicalAnalyser analyser = (LexicalAnalyser) getScanner();

}

/**
 * Cup generated class to encapsulate user supplied action code.
 */
class CUP$SyntacticalAnalyser$actions {


    private final SyntacticalAnalyser parser;

    /** Constructor */
    CUP$SyntacticalAnalyser$actions(SyntacticalAnalyser parser) {
        this.parser = parser;
    }

    /** Method 0 with the actual generated action code for actions 0 to 300. */
    public final java_cup.runtime.Symbol CUP$SyntacticalAnalyser$do_action_part00000000(
            int CUP$SyntacticalAnalyser$act_num,
            java_cup.runtime.lr_parser CUP$SyntacticalAnalyser$parser,
            java.util.Stack CUP$SyntacticalAnalyser$stack,
            int CUP$SyntacticalAnalyser$top)
            throws java.lang.Exception {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$SyntacticalAnalyser$result;

        /* select the action based on the action number */
        switch (CUP$SyntacticalAnalyser$act_num) {
            /*. . . . . . . . . . . . . . . . . . . .*/
            case 0: // Program ::= ImportList DeclarationList
            {
                ProgramNode RESULT = null;
                List<String> imports = (List<String>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                DeclarationNode declarations = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ProgramNode(declarations, imports);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Program", 0, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 1: // $START ::= Program EOF
            {
                Object RESULT = null;
                ProgramNode start_val = (ProgramNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = start_val;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("$START", 0, RESULT);
            }
            /* ACCEPT */
            CUP$SyntacticalAnalyser$parser.done_parsing();
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 2: // ImportList ::= ImportList Import
            {
                List<String> RESULT = null;
                List<String> imports = (List<String>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                String file = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                imports.add(file);
                RESULT = imports;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ImportList", 1, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 3: // ImportList ::=
            {
                List<String> RESULT = null;
                RESULT = new ArrayList<>();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ImportList", 1, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 4: // Import ::= IMPORT FilePath END
            {
                String RESULT = null;
                String path = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = path;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Import", 2, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 5: // FilePath ::= FilePath DIV Filename
            {
                String RESULT = null;
                String path = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                String filename = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = path + "/" + filename;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FilePath", 3, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 6: // FilePath ::= Filename
            {
                String RESULT = null;
                String filename = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = filename;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FilePath", 3, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 7: // Filename ::= IDENTIFIER
            {
                String RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = name;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Filename", 4, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 8: // Filename ::= GLOBAL
            {
                String RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = name;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Filename", 4, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 9: // Filename ::= TYPE
            {
                String RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = name;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Filename", 4, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 10: // DeclarationList ::= Declaration DeclarationList
            {
                DeclarationNode RESULT = null;
                DeclarationNode declaration = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                DeclarationNode declarations = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration.linkedTo(declarations);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("DeclarationList", 5, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 11: // DeclarationList ::=
            {
                DeclarationNode RESULT = null;
                RESULT = null;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("DeclarationList", 5, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 12: // Declaration ::= GlobalVarConstDeclaration
            {
                DeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration", 6, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 13: // Declaration ::= FunctionDeclaration
            {
                DeclarationNode RESULT = null;
                FunctionDeclarationNode declaration = (FunctionDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration", 6, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 14: // Declaration ::= ClassDeclaration
            {
                DeclarationNode RESULT = null;
                ClassDeclarationNode declaration = (ClassDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Declaration", 6, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 15: // GlobalVarConstDeclaration ::= VarDeclaration
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalVarConstDeclaration", 8, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 16: // GlobalVarConstDeclaration ::= GlobalConstDeclaration END
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalVarConstDeclaration", 8, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 17: // VarConstDeclaration ::= VarDeclaration
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarConstDeclaration", 9, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 18: // VarConstDeclaration ::= LocalConstDeclaration END
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarConstDeclaration", 9, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 19: // VarDeclaration ::= BaseVarDeclaration END
            {
                VarDeclarationNode RESULT = null;
                Name declaration = (Name) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new VarDeclarationNode(declaration);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclaration", 7, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 20: // VarDeclaration ::= VarInitDeclaration END
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclaration", 7, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 21: // BaseVarDeclaration ::= Type IDENTIFIER
            {
                Name RESULT = null;
                Type type = (Type) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new Name(id, type);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("BaseVarDeclaration", 13, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 22: // VarInitDeclaration ::= BaseVarDeclaration ASSIGNMENT InitialValueExpression
            {
                VarDeclarationNode RESULT = null;
                Name name = (Name) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode initialValue = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new VarDeclarationNode(name, initialValue);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarInitDeclaration", 10, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 23: // VarInitDeclaration ::= ConstructorCallExpression IDENTIFIER
            {
                VarDeclarationNode RESULT = null;
                ConstructorCallExpressionNode constructor = (ConstructorCallExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = VarDeclarationNode.fromConstructor(constructor, id);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarInitDeclaration", 10, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 24: // GlobalConstDeclaration ::= CONST Type GLOBAL ASSIGNMENT InitialValueExpression
            {
                VarDeclarationNode RESULT = null;
                Type type = (Type) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode initialValue = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new VarDeclarationNode(new Name(id, type), initialValue, true);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalConstDeclaration", 11, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 25: // GlobalConstDeclaration ::= CONST ConstructorCallExpression GLOBAL
            {
                VarDeclarationNode RESULT = null;
                ConstructorCallExpressionNode constructor = (ConstructorCallExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = VarDeclarationNode.fromConstructor(constructor, id).constant();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalConstDeclaration", 11, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 26: // LocalConstDeclaration ::= CONST VarInitDeclaration
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration.constant();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("LocalConstDeclaration", 12, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 27: // InitialValueExpression ::= Expression
            {
                ExpressionNode RESULT = null;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("InitialValueExpression", 49, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 28: // InitialValueExpression ::= AnonymousObjectConstructorExpression
            {
                ExpressionNode RESULT = null;
                AnonymousObjectConstructorExpressionNode expression = (AnonymousObjectConstructorExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("InitialValueExpression", 49, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 29: // FunctionDeclaration ::= BaseVarDeclaration FunctionParameters BlockStatement
            {
                FunctionDeclarationNode RESULT = null;
                Name name = (Name) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                List<Name> parameters = (List<Name>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                BlockStatementNode block = (BlockStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new FunctionDeclarationNode(name, parameters, block);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionDeclaration", 14, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 30: // FunctionParameters ::= PARENTH_L PARENTH_R
            {
                List<Name> RESULT = null;
                RESULT = new ArrayList<>();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionParameters", 15, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 31: // FunctionParameters ::= PARENTH_L ParameterList PARENTH_R
            {
                List<Name> RESULT = null;
                List<Name> parameters = (List<Name>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = parameters;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionParameters", 15, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 32: // ParameterList ::= BaseVarDeclaration
            {
                List<Name> RESULT = null;
                Name parameter = (Name) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ArrayList<>(Collections.singletonList(parameter));
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ParameterList", 16, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 33: // ParameterList ::= ParameterList COMMA BaseVarDeclaration
            {
                List<Name> RESULT = null;
                List<Name> parameters = (List<Name>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                Name parameter = (Name) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                parameters.add(parameter);
                RESULT = parameters;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ParameterList", 16, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 34: // ClassDeclaration ::= CLASS TYPE ClassBlock
            {
                ClassDeclarationNode RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                DeclarationNode block = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ClassDeclarationNode(name, block);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration", 17, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 35: // ClassDeclaration ::= CLASS GLOBAL ClassBlock
            {
                ClassDeclarationNode RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                DeclarationNode block = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ClassDeclarationNode(name, block);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration", 17, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 36: // ClassBlock ::= CURLY_L ClassElementList CURLY_R
            {
                DeclarationNode RESULT = null;
                DeclarationNode contents = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = contents;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassBlock", 18, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 37: // ClassElementList ::= ClassElement ClassElementList
            {
                DeclarationNode RESULT = null;
                DeclarationNode element = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                DeclarationNode elements = (DeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = element.linkedTo(elements);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElementList", 19, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 38: // ClassElementList ::=
            {
                DeclarationNode RESULT = null;
                RESULT = null;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElementList", 19, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 39: // ClassElement ::= VarConstDeclaration
            {
                DeclarationNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement", 20, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 40: // ClassElement ::= ConstructorDeclaration
            {
                DeclarationNode RESULT = null;
                ConstructorDeclarationNode declaration = (ConstructorDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement", 20, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 41: // ClassElement ::= FunctionDeclaration
            {
                DeclarationNode RESULT = null;
                FunctionDeclarationNode declaration = (FunctionDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ClassElement", 20, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 42: // ConstructorDeclaration ::= CONSTRUCTOR FunctionParameters BlockStatement
            {
                ConstructorDeclarationNode RESULT = null;
                List<Name> parameters = (List<Name>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                BlockStatementNode block = (BlockStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ConstructorDeclarationNode(parameters, block);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstructorDeclaration", 21, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 43: // StatementList ::= Statement StatementList
            {
                StatementNode RESULT = null;
                StatementNode statement = (StatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                StatementNode statements = (StatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = statement.linkedTo(statements);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("StatementList", 22, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 44: // StatementList ::=
            {
                StatementNode RESULT = null;
                RESULT = null;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("StatementList", 22, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 45: // Statement ::= VarDeclarationStatement
            {
                StatementNode RESULT = null;
                VarDeclarationStatementNode statement = (VarDeclarationStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = statement;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement", 23, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 46: // Statement ::= AssignmentStatement
            {
                StatementNode RESULT = null;
                AssignmentStatementNode statement = (AssignmentStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = statement;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement", 23, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 47: // Statement ::= FunctionCallStatement
            {
                StatementNode RESULT = null;
                FunctionCallStatementNode statement = (FunctionCallStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = statement;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement", 23, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 48: // Statement ::= ReturnStatement
            {
                StatementNode RESULT = null;
                ReturnStatementNode statement = (ReturnStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = statement;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement", 23, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 49: // Statement ::= IfElseStatement
            {
                StatementNode RESULT = null;
                IfElseStatementNode statement = (IfElseStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = statement;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement", 23, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 50: // Statement ::= SwitchStatement
            {
                StatementNode RESULT = null;
                SwitchStatementNode statement = (SwitchStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = statement;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement", 23, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 51: // Statement ::= WhileStatement
            {
                StatementNode RESULT = null;
                WhileStatementNode statement = (WhileStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = statement;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement", 23, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 52: // Statement ::= ForStatement
            {
                StatementNode RESULT = null;
                ForStatementNode statement = (ForStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = statement;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement", 23, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 53: // Statement ::= BlockStatement
            {
                StatementNode RESULT = null;
                BlockStatementNode statement = (BlockStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = statement;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Statement", 23, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 54: // BlockStatement ::= CURLY_L StatementList CURLY_R
            {
                BlockStatementNode RESULT = null;
                StatementNode root = (StatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new BlockStatementNode(root);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("BlockStatement", 24, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 55: // VarDeclarationStatement ::= VarConstDeclaration
            {
                VarDeclarationStatementNode RESULT = null;
                VarDeclarationNode declaration = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = declaration.asStatement();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VarDeclarationStatement", 25, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 56: // AssignmentStatement ::= Designator ASSIGNMENT Expression END
            {
                AssignmentStatementNode RESULT = null;
                Designator designator = (Designator) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new AssignmentStatementNode(designator, expression);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AssignmentStatement", 26, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 57: // AssignmentStatement ::= Designator PLUS_ASSIGN Expression END
            {
                AssignmentStatementNode RESULT = null;
                Designator designator = (Designator) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = AssignmentStatementNode.fromSyntacticSugar(
                        designator, OperatorOverloadConstants._PLUS, expression);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AssignmentStatement", 26, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 58: // AssignmentStatement ::= Designator MINUS_ASSIGN Expression END
            {
                AssignmentStatementNode RESULT = null;
                Designator designator = (Designator) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = AssignmentStatementNode.fromSyntacticSugar(
                        designator, OperatorOverloadConstants._MINUS, expression);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AssignmentStatement", 26, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 59: // AssignmentStatement ::= Designator MULT_ASSIGN Expression END
            {
                AssignmentStatementNode RESULT = null;
                Designator designator = (Designator) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = AssignmentStatementNode.fromSyntacticSugar(
                        designator, OperatorOverloadConstants._MULT, expression);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AssignmentStatement", 26, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 60: // AssignmentStatement ::= Designator DIV_ASSIGN Expression END
            {
                AssignmentStatementNode RESULT = null;
                Designator designator = (Designator) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = AssignmentStatementNode.fromSyntacticSugar(
                        designator, OperatorOverloadConstants._DIV, expression);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AssignmentStatement", 26, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 61: // AssignmentStatement ::= Designator MOD_ASSIGN Expression END
            {
                AssignmentStatementNode RESULT = null;
                Designator designator = (Designator) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = AssignmentStatementNode.fromSyntacticSugar(
                        designator, OperatorOverloadConstants._MOD, expression);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AssignmentStatement", 26, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 62: // Designator ::= VariableExpression
            {
                Designator RESULT = null;
                VariableExpressionNode expression = (VariableExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = Designator.ofVar(expression);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Designator", 27, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 63: // Designator ::= FieldAccessExpression
            {
                Designator RESULT = null;
                PointExpressionNode expression = (PointExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = Designator.ofField(expression);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Designator", 27, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 64: // Designator ::= ArrayAccessExpression
            {
                Designator RESULT = null;
                ArrayAccessExpressionNode expression = (ArrayAccessExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = Designator.ofArray(expression);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Designator", 27, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 65: // FunctionCallStatement ::= FunctionCallExpression END
            {
                FunctionCallStatementNode RESULT = null;
                FunctionCallExpressionNode function = (FunctionCallExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new FunctionCallStatementNode(function);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionCallStatement", 28, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 66: // ReturnStatement ::= RETURN END
            {
                ReturnStatementNode RESULT = null;
                RESULT = new ReturnStatementNode();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ReturnStatement", 29, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 67: // ReturnStatement ::= RETURN Expression END
            {
                ReturnStatementNode RESULT = null;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new ReturnStatementNode(expression);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ReturnStatement", 29, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 68: // IfElseStatement ::= IF Expression BlockStatement ElsePartStatement
            {
                IfElseStatementNode RESULT = null;
                ExpressionNode condition = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                BlockStatementNode ifBlock = (BlockStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                StatementNode elsePart = (StatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new IfElseStatementNode(condition, ifBlock, elsePart);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("IfElseStatement", 30, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 69: // ElsePartStatement ::= ELSE BlockStatement
            {
                StatementNode RESULT = null;
                BlockStatementNode elseBlock = (BlockStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = elseBlock;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ElsePartStatement", 31, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 70: // ElsePartStatement ::= ELSE IfElseStatement
            {
                StatementNode RESULT = null;
                IfElseStatementNode ifElse = (IfElseStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = ifElse;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ElsePartStatement", 31, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 71: // ElsePartStatement ::=
            {
                StatementNode RESULT = null;
                RESULT = null;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ElsePartStatement", 31, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 72: // SwitchStatement ::= SWITCH Expression CURLY_L SwitchCasesStatement CURLY_R
            {
                SwitchStatementNode RESULT = null;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                Map<ConstantExpressionNode, StatementNode> cases = (Map<ConstantExpressionNode, StatementNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new SwitchStatementNode(expression, cases);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("SwitchStatement", 32, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 73: // SwitchCasesStatement ::= ConstantExpression ARROW Statement
            {
                Map<ConstantExpressionNode, StatementNode> RESULT = null;
                ConstantExpressionNode expression = (ConstantExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                StatementNode statement = (StatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new HashMap<>(Collections.singletonMap(expression, statement));
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("SwitchCasesStatement", 33, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 74: // SwitchCasesStatement ::= UNDERSCORE ARROW Statement
            {
                Map<ConstantExpressionNode, StatementNode> RESULT = null;
                StatementNode statement = (StatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new HashMap<>(Collections.singletonMap(
                        ConstantExpressionNode.special("<default>", new Type("~Default")), statement));
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("SwitchCasesStatement", 33, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 75: // SwitchCasesStatement ::= SwitchCasesStatement ConstantExpression ARROW Statement
            {
                Map<ConstantExpressionNode, StatementNode> RESULT = null;
                Map<ConstantExpressionNode, StatementNode> cases = (Map<ConstantExpressionNode, StatementNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                ConstantExpressionNode expression = (ConstantExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                StatementNode statement = (StatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                cases.put(expression, statement);
                RESULT = cases;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("SwitchCasesStatement", 33, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 76: // SwitchCasesStatement ::= SwitchCasesStatement UNDERSCORE ARROW Statement
            {
                Map<ConstantExpressionNode, StatementNode> RESULT = null;
                Map<ConstantExpressionNode, StatementNode> cases = (Map<ConstantExpressionNode, StatementNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                StatementNode statement = (StatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                cases.put(ConstantExpressionNode.special("<default>", new Type("~Default")), statement);
                RESULT = cases;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("SwitchCasesStatement", 33, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 77: // WhileStatement ::= WHILE Expression BlockStatement
            {
                WhileStatementNode RESULT = null;
                ExpressionNode condition = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                BlockStatementNode whileBlock = (BlockStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new WhileStatementNode(condition, whileBlock);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("WhileStatement", 34, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 78: // ForStatement ::= FOR BaseVarDeclaration IN Expression BlockStatement
            {
                ForStatementNode RESULT = null;
                Name variable = (Name) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                ExpressionNode iterable = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                BlockStatementNode forBlock = (BlockStatementNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ForStatementNode(variable, iterable, forBlock);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ForStatement", 35, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 79: // Expression ::= Expression0
            {
                ExpressionNode RESULT = null;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression", 36, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 80: // Expression0 ::= Expression0 ELLIPSIS Expression1
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(first, OperatorOverloadConstants._TO, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression0", 37, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 81: // Expression0 ::= Expression1
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = first;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression0", 37, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 82: // Expression1 ::= Expression1 OR Expression2
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(first, OperatorOverloadConstants._OR, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression1", 38, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 83: // Expression1 ::= Expression2
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = first;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression1", 38, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 84: // Expression2 ::= Expression2 AND Expression3
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(first, OperatorOverloadConstants._AND, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression2", 39, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 85: // Expression2 ::= Expression3
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = first;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression2", 39, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 86: // Expression3 ::= Expression3 EQUALS Expression4
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(first, OperatorOverloadConstants._EQUALS, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression3", 40, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 87: // Expression3 ::= Expression3 NEQ Expression4
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(first, OperatorOverloadConstants._NEQ, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression3", 40, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 88: // Expression3 ::= Expression3 IDENTITY Expression4
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(first, OperatorOverloadConstants._ID, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression3", 40, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 89: // Expression3 ::= Expression4
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = first;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression3", 40, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 90: // Expression4 ::= Expression4 GT Expression5
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(first, OperatorOverloadConstants._GT, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression4", 41, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 91: // Expression4 ::= Expression4 GE Expression5
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(first, OperatorOverloadConstants._GE, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression4", 41, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 92: // Expression4 ::= Expression4 LT Expression5
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(first, OperatorOverloadConstants._LT, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression4", 41, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 93: // Expression4 ::= Expression4 LE Expression5
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(first, OperatorOverloadConstants._LE, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression4", 41, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 94: // Expression4 ::= Expression5
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = first;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression4", 41, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 95: // Expression5 ::= Expression5 PLUS Expression6
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(first, OperatorOverloadConstants._PLUS, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression5", 42, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 96: // Expression5 ::= Expression5 MINUS Expression6
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(first, OperatorOverloadConstants._MINUS, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression5", 42, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 97: // Expression5 ::= Expression6
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = first;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression5", 42, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 98: // Expression6 ::= Expression6 MULT Expression7
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(first, OperatorOverloadConstants._MULT, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression6", 43, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 99: // Expression6 ::= Expression6 DIV Expression7
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(first, OperatorOverloadConstants._DIV, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression6", 43, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 100: // Expression6 ::= Expression6 MOD Expression7
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode last = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(first, OperatorOverloadConstants._MOD, last);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression6", 43, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 101: // Expression6 ::= Expression7
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = first;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression6", 43, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 102: // Expression7 ::= PLUS Expression7
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(OperatorOverloadConstants._PLUS, first);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression7", 44, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 103: // Expression7 ::= MINUS Expression7
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(OperatorOverloadConstants._MINUS, first);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression7", 44, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 104: // Expression7 ::= NOT Expression7
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = FunctionCallExpressionNode.operator(OperatorOverloadConstants._NOT, first);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression7", 44, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 105: // Expression7 ::= Expression8
            {
                ExpressionNode RESULT = null;
                ExpressionNode first = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = first;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression7", 44, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 106: // Expression8 ::= FieldAccessExpression
            {
                ExpressionNode RESULT = null;
                PointExpressionNode expression = (PointExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression8", 45, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 107: // Expression8 ::= ArrayAccessExpression
            {
                ExpressionNode RESULT = null;
                ArrayAccessExpressionNode expression = (ArrayAccessExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression8", 45, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 108: // Expression8 ::= FunctionCallExpression
            {
                ExpressionNode RESULT = null;
                FunctionCallExpressionNode expression = (FunctionCallExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression8", 45, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 109: // Expression8 ::= Expression9
            {
                ExpressionNode RESULT = null;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression8", 45, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 110: // Expr8 ::= FieldAccessExpression
            {
                ExpressionNode RESULT = null;
                PointExpressionNode expression = (PointExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expr8", 46, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 111: // Expr8 ::= ArrayAccessExpression
            {
                ExpressionNode RESULT = null;
                ArrayAccessExpressionNode expression = (ArrayAccessExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expr8", 46, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 112: // Expr8 ::= FunctionCallExpression
            {
                ExpressionNode RESULT = null;
                FunctionCallExpressionNode expression = (FunctionCallExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expr8", 46, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 113: // Expr8 ::= Expr9
            {
                ExpressionNode RESULT = null;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expr8", 46, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 114: // Expression9 ::= Expr9
            {
                ExpressionNode RESULT = null;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression9", 47, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 115: // Expression9 ::= GlobalConstExpression
            {
                ExpressionNode RESULT = null;
                VariableExpressionNode expression = (VariableExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expression9", 47, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 116: // Expr9 ::= PARENTH_L Expression0 PARENTH_R
            {
                ExpressionNode RESULT = null;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expr9", 48, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 117: // Expr9 ::= VariableExpression
            {
                ExpressionNode RESULT = null;
                VariableExpressionNode expression = (VariableExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expr9", 48, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 118: // Expr9 ::= ConstantExpression
            {
                ExpressionNode RESULT = null;
                ConstantExpressionNode expression = (ConstantExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expr9", 48, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 119: // Expr9 ::= ListConstructorExpression
            {
                ExpressionNode RESULT = null;
                ListConstructorExpressionNode expression = (ListConstructorExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expr9", 48, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 120: // Expr9 ::= ConstructorCallExpression
            {
                ExpressionNode RESULT = null;
                ConstructorCallExpressionNode expression = (ConstructorCallExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = expression;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Expr9", 48, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 121: // ArrayAccessExpression ::= Expression8 SQUARE_L Expression SQUARE_R
            {
                ArrayAccessExpressionNode RESULT = null;
                ExpressionNode array = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                ExpressionNode index = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new ArrayAccessExpressionNode(array, index);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ArrayAccessExpression", 51, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 122: // FieldAccessExpression ::= Expression8 POINT IDENTIFIER
            {
                PointExpressionNode RESULT = null;
                ExpressionNode expression = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                String identifier = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new PointExpressionNode(expression, identifier);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FieldAccessExpression", 50, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 123: // FunctionCallExpression ::= Expr8 Arguments
            {
                FunctionCallExpressionNode RESULT = null;
                ExpressionNode function = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                List<ExpressionNode> arguments = (List<ExpressionNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new FunctionCallExpressionNode(function, arguments);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("FunctionCallExpression", 52, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 124: // ConstructorCallExpression ::= TYPE Arguments
            {
                ConstructorCallExpressionNode RESULT = null;
                String type = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                List<ExpressionNode> arguments = (List<ExpressionNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ConstructorCallExpressionNode(new Type(type), arguments);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstructorCallExpression", 61, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 125: // ConstructorCallExpression ::= GLOBAL Arguments
            {
                ConstructorCallExpressionNode RESULT = null;
                String type = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                List<ExpressionNode> arguments = (List<ExpressionNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ConstructorCallExpressionNode(new Type(type), arguments);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstructorCallExpression", 61, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 126: // ConstructorCallExpression ::= TYPE LT Type GT Arguments
            {
                ConstructorCallExpressionNode RESULT = null;
                String type = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 4)).value;
                Type qualified = (Type) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                List<ExpressionNode> arguments = (List<ExpressionNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ConstructorCallExpressionNode(new Type(type, qualified), arguments);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstructorCallExpression", 61, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 127: // VariableExpression ::= IDENTIFIER
            {
                VariableExpressionNode RESULT = null;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new VariableExpressionNode(id);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VariableExpression", 53, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 128: // VariableExpression ::= THIS
            {
                VariableExpressionNode RESULT = null;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new VariableExpressionNode(id);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("VariableExpression", 53, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 129: // GlobalConstExpression ::= GLOBAL
            {
                VariableExpressionNode RESULT = null;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new VariableExpressionNode(id);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("GlobalConstExpression", 54, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 130: // ConstantExpression ::= INT
            {
                ConstantExpressionNode RESULT = null;
                String n = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = ConstantExpressionNode.fromInt(n);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression", 55, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 131: // ConstantExpression ::= REAL
            {
                ConstantExpressionNode RESULT = null;
                String x = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = ConstantExpressionNode.fromFloat(x);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression", 55, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 132: // ConstantExpression ::= TRUE
            {
                ConstantExpressionNode RESULT = null;
                String t = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = ConstantExpressionNode.fromBoolean(t);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression", 55, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 133: // ConstantExpression ::= FALSE
            {
                ConstantExpressionNode RESULT = null;
                String f = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = ConstantExpressionNode.fromBoolean(f);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression", 55, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 134: // ConstantExpression ::= CHAR
            {
                ConstantExpressionNode RESULT = null;
                String c = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = ConstantExpressionNode.fromChar(c);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression", 55, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 135: // ConstantExpression ::= NOTHING
            {
                ConstantExpressionNode RESULT = null;
                RESULT = ConstantExpressionNode.ofNothing();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression", 55, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 136: // ConstantExpression ::= NULL
            {
                ConstantExpressionNode RESULT = null;
                RESULT = ConstantExpressionNode.ofNull();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ConstantExpression", 55, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 137: // ListConstructorExpression ::= STRING
            {
                ListConstructorExpressionNode RESULT = null;
                String str = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = ListConstructorExpressionNode.fromString(str);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListConstructorExpression", 56, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 138: // ListConstructorExpression ::= SQUARE_L SQUARE_R
            {
                ListConstructorExpressionNode RESULT = null;
                RESULT = new ListConstructorExpressionNode();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListConstructorExpression", 56, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 139: // ListConstructorExpression ::= SQUARE_L ListElements SQUARE_R
            {
                ListConstructorExpressionNode RESULT = null;
                List<ExpressionNode> elements = (List<ExpressionNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new ListConstructorExpressionNode(elements);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListConstructorExpression", 56, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 140: // ListElements ::= Expression
            {
                List<ExpressionNode> RESULT = null;
                ExpressionNode element = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ArrayList<>(Collections.singletonList(element));
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListElements", 57, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 141: // ListElements ::= ListElements COMMA Expression
            {
                List<ExpressionNode> RESULT = null;
                List<ExpressionNode> elements = (List<ExpressionNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode element = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                elements.add(element);
                RESULT = elements;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ListElements", 57, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 142: // AnonymousObjectConstructorExpression ::= CURLY_L CURLY_R
            {
                AnonymousObjectConstructorExpressionNode RESULT = null;
                RESULT = new AnonymousObjectConstructorExpressionNode();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectConstructorExpression", 58, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 143: // AnonymousObjectConstructorExpression ::= CURLY_L AnonymousObjectFields CURLY_R
            {
                AnonymousObjectConstructorExpressionNode RESULT = null;
                VarDeclarationNode fields = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new AnonymousObjectConstructorExpressionNode(fields);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectConstructorExpression", 58, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 144: // AnonymousObjectFields ::= AnonymousObjectField
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode field = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = field;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectFields", 59, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 145: // AnonymousObjectFields ::= AnonymousObjectField COMMA AnonymousObjectFields
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode field = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                VarDeclarationNode fields = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                field.linkedTo(fields);
                RESULT = field;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectFields", 59, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 146: // AnonymousObjectField ::= VarInitDeclaration
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode field = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = field;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectField", 60, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 147: // AnonymousObjectField ::= LocalConstDeclaration
            {
                VarDeclarationNode RESULT = null;
                VarDeclarationNode field = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = field;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("AnonymousObjectField", 60, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 148: // Type ::= TYPE
            {
                Type RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new Type(name);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Type", 62, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 149: // Type ::= TYPE LT Type GT
            {
                Type RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                Type param = (Type) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new Type(name, param);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Type", 62, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 150: // Type ::= GLOBAL
            {
                Type RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new Type(name);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Type", 62, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 151: // Type ::= GLOBAL LT Type GT
            {
                Type RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 3)).value;
                Type param = (Type) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = new Type(name, param);
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Type", 62, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 152: // Arguments ::= PARENTH_L PARENTH_R
            {
                List<ExpressionNode> RESULT = null;
                RESULT = new ArrayList<>();
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Arguments", 63, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 153: // Arguments ::= PARENTH_L ArgumentList PARENTH_R
            {
                List<ExpressionNode> RESULT = null;
                List<ExpressionNode> arguments = (List<ExpressionNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 1)).value;
                RESULT = arguments;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("Arguments", 63, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 154: // ArgumentList ::= Expression
            {
                List<ExpressionNode> RESULT = null;
                ExpressionNode argument = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                RESULT = new ArrayList<>(Collections.singletonList(argument));
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ArgumentList", 64, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 155: // ArgumentList ::= ArgumentList COMMA Expression
            {
                List<ExpressionNode> RESULT = null;
                List<ExpressionNode> arguments = (List<ExpressionNode>) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.elementAt(CUP$SyntacticalAnalyser$top - 2)).value;
                ExpressionNode argument = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$SyntacticalAnalyser$stack.peek()).value;
                arguments.add(argument);
                RESULT = arguments;
                CUP$SyntacticalAnalyser$result = parser.getSymbolFactory().newSymbol("ArgumentList", 64, RESULT);
            }
            return CUP$SyntacticalAnalyser$result;

            /* . . . . . .*/
            default:
                throw new Exception(
                        "Invalid action number " + CUP$SyntacticalAnalyser$act_num + "found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$SyntacticalAnalyser$do_action(
            int CUP$SyntacticalAnalyser$act_num,
            java_cup.runtime.lr_parser CUP$SyntacticalAnalyser$parser,
            java.util.Stack CUP$SyntacticalAnalyser$stack,
            int CUP$SyntacticalAnalyser$top)
            throws java.lang.Exception {
        return CUP$SyntacticalAnalyser$do_action_part00000000(
                CUP$SyntacticalAnalyser$act_num,
                               CUP$SyntacticalAnalyser$parser,
                               CUP$SyntacticalAnalyser$stack,
                               CUP$SyntacticalAnalyser$top);
    }
}

